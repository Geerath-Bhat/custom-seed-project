[
    {
        "fileName": "src/index.css",
        "content": "/**\n * Generalized Tokens & Base Styles for React Tailwind Projects\n * -----------------------------------------------------------\n */\n@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  /**\n   * ========================================================================\n   * Theme Variables (CSS Custom Properties)\n   * ========================================================================\n   */\n  :root {\n    /* Colors (Light Mode - HSL with PERCENT) */\n    --background: 210 20% 98%;\n    --foreground: 210 10% 15%;\n\n    --card: 0 0% 100%;\n    --card-foreground: 210 10% 15%;\n\n    --popover: 0 0% 100%;\n    --popover-foreground: 210 10% 15%;\n\n    --primary: 180 65% 45%;\n    --primary-foreground: 0 0% 100%;\n\n    --secondary: 215 25% 65%;\n    --secondary-foreground: 210 10% 15%;\n\n    --muted: 210 30% 94%;\n    --muted-foreground: 210 10% 45%;\n    /* Define HSL components for scrollbar usage */\n    --muted-foreground-h: 210;\n    --muted-foreground-s: 10%;\n    --muted-foreground-l: 45%;\n\n    --accent: 15 90% 60%;\n    --accent-foreground: 0 0% 100%;\n\n    --destructive: 0 80% 60%;\n    --destructive-foreground: 0 0% 100%;\n\n    --success: 130 60% 50%;\n    --success-foreground: 0 0% 100%;\n\n    --warning: 40 90% 55%;\n    --warning-foreground: 210 10% 15%;\n\n    --border: 210 20% 88%;\n    --input: 210 20% 88%;\n    --ring: 180 65% 75%;\n\n    /* Layout & Typography */\n    --radius: 0.75rem;\n    --font-family-base: \"Poppins\", \"Inter\", sans-serif;\n    --font-family-heading: \"Poppins\", \"Inter\", sans-serif;\n    --font-family-mono: ui-monospace, Menlo, Monaco, \"Cascadia Mono\", \"Segoe UI Mono\", \"Roboto Mono\", \"Oxygen Mono\", \"Ubuntu Monospace\", \"Source Code Pro\", \"Fira Mono\", \"Droid Sans Mono\", \"Courier New\", monospace;\n    --text-scale: 1;\n    --spacing-scale: 1;\n    --transition-duration-base: 200ms;\n  }\n\n  /**\n   * ========================================================================\n   * Dark Mode Theme Variables\n   * ========================================================================\n   */\n  .dark {\n    --background: 210 15% 10%;\n    --foreground: 210 20% 95%;\n\n    --card: 210 15% 15%;\n    --card-foreground: 210 20% 95%;\n\n    --popover: 210 15% 15%;\n    --popover-foreground: 210 20% 95%;\n\n    --primary: 180 60% 55%;\n    --primary-foreground: 210 10% 15%;\n\n    --secondary: 215 20% 35%;\n    --secondary-foreground: 210 20% 95%;\n\n    --muted: 210 15% 25%;\n    --muted-foreground: 210 15% 65%;\n    /* Define HSL components for scrollbar usage */\n    --muted-foreground-h: 210;\n    --muted-foreground-s: 15%;\n    --muted-foreground-l: 65%;\n\n    --accent: 15 85% 65%;\n    --accent-foreground: 210 10% 15%;\n\n    --destructive: 0 70% 55%;\n    --destructive-foreground: 0 0% 100%;\n\n    --success: 130 55% 55%;\n    --success-foreground: 210 10% 15%;\n\n    --warning: 40 85% 60%;\n    --warning-foreground: 210 10% 15%;\n\n    --border: 210 15% 30%;\n    --input: 210 15% 30%;\n    --ring: 180 60% 65%;\n  }\n\n  /* Base Element Styling */\n  * { border-color: hsl(var(--border)); }\n  html { scroll-behavior: smooth; }\n  body {\n    background-color: hsl(var(--background));\n    color: hsl(var(--foreground));\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    font-family: var(--font-family-base);\n    font-feature-settings: \"rlig\" 1, \"calt\" 1, \"ss01\", \"ss02\", \"cv01\", \"cv02\", \"cv03\", \"cv04\", \"cv11\";\n  }\n  h1, h2, h3, h4, h5, h6 { font-family: var(--font-family-heading);\n  color: hsl(var(--foreground));}\n  h1 { font-size: calc(2.25rem * var(--text-scale, 1)); }\n  h2 { font-size: calc(1.875rem * var(--text-scale, 1)); }\n  h3 { font-size: calc(1.5rem * var(--text-scale, 1)); }\n  h4 { font-size: calc(1.25rem * var(--text-scale, 1)); }\n  p, span, button, a, li, input, textarea, label, div { font-size: calc(1rem * var(--text-scale, 1)); }\n  .text-xs { font-size: calc(0.75rem * var(--text-scale, 1)); }\n  .text-sm { font-size: calc(0.875rem * var(--text-scale, 1)); }\n  .text-lg { font-size: calc(1.125rem * var(--text-scale, 1)); }\n  .text-xl { font-size: calc(1.25rem * var(--text-scale, 1)); }\n  .text-2xl { font-size: calc(1.5rem * var(--text-scale, 1)); }\n}\n\n@layer utilities {\n  /**\n   * ========================================================================\n   * General Utilities\n   * ========================================================================\n   */\n  .text-balance { text-wrap: balance; }\n  .text-pretty { text-wrap: pretty; }\n  .center {  display: flex; align-items: center; justify-content: center; }\n  .text-gradient-primary { background: linear-gradient(to right, hsl(var(--primary)), hsl(var(--accent)));\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n    -webkit-text-fill-color: transparent; }\n  ::-webkit-scrollbar { width: 8px; height: 8px; }\n  ::-webkit-scrollbar-track { background: transparent; }\n  ::-webkit-scrollbar-thumb {\n    background-color: hsla(var(--muted-foreground-h), var(--muted-foreground-s), var(--muted-foreground-l), 0.5);\n    border-radius: var(--radius); border: 2px solid transparent; background-clip: padding-box;\n  }\n  ::-webkit-scrollbar-thumb:hover { background-color: hsla(var(--muted-foreground-h), var(--muted-foreground-s), var(--muted-foreground-l), 0.7); }\n  .no-scrollbar::-webkit-scrollbar { display: none; }\n  .no-scrollbar { -ms-overflow-style: none; scrollbar-width: none; }\n  .glass-effect { backdrop-filter: blur(8px) saturate(180%);\n     background-color: hsla(var(--background) / 0.7);\n     border: 1px solid hsla(var(--border) / 0.3);\n     box-shadow: 0 4px 6px hsla(var(--foreground) / 0.1); }\n}\n\n@layer components {\n  /**\n   * ========================================================================\n   * Common Component Base Styles & Animations\n   * ========================================================================\n   */\n  .card-hover-basic {\n     transition: transform var(--transition-duration-base, 200ms) ease-in-out, box-shadow var(--transition-duration-base, 200ms) ease-in-out;\n     box-shadow: 0 1px 3px 0 hsla(var(--foreground) / 0.1), 0 1px 2px 0 hsla(var(--foreground) / 0.06);\n  }\n  @keyframes fadeIn { from { opacity: 0; } to { opacity: 1; } }\n  .animate-fade-in { animation: fadeIn 0.5s ease-out forwards; }\n  @keyframes slideUp { from { opacity: 0; transform: translateY(20px); } to { opacity: 1; transform: translateY(0); } }\n  .animate-slide-up { animation: slideUp 0.5s cubic-bezier(0.25, 0.46, 0.45, 0.94) forwards; }\n  @keyframes scaleIn { from { opacity: 0; transform: scale(0.95); } to { opacity: 1; transform: scale(1); } }\n  .animate-scale-in { animation: scaleIn 0.3s ease-out forwards; }\n\n  @keyframes pulse { 0%, 100% { opacity: 1; } 50% { opacity: .5; } }\n  .animate-pulse-gentle { animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite; }\n\n  .stagger-item { opacity:0; animation: fadeIn 0.6s ease-out forwards; }\n  .stagger-container > .stagger-item:nth-child(1) { animation-delay: 0.05s; }\n  .stagger-container > .stagger-item:nth-child(2) { animation-delay: 0.1s; }\n  .stagger-container > .stagger-item:nth-child(3) { animation-delay: 0.15s; }\n  .stagger-container > .stagger-item:nth-child(4) { animation-delay: 0.2s; }\n  .stagger-container > .stagger-item:nth-child(5) { animation-delay: 0.25s; }\n}\n"
    },
    {
        "fileName": "tailwind.config.ts",
        "content": "import type { Config } from \"tailwindcss\";\n\nexport default {\n    darkMode: [\"class\"], // Enables dark mode based on the 'class' attribute\n    content: [\n        \"./pages/**/*.{ts,tsx}\",\n        \"./components/**/*.{ts,tsx}\",\n        \"./app/**/*.{ts,tsx}\", // Common path for Next.js App Router\n        \"./src/**/*.{ts,tsx}\",  // Common path for source files\n        // Add any other paths where Tailwind classes might be used\n    ],\n    prefix: \"\", // No prefix for utility classes (e.g., 'text-primary' instead of 'tw-text-primary')\n    theme: {\n        // --- Container Settings ---\n        // Default container configuration for centering and padding\n        container: {\n            center: true,\n            padding: '2rem', // Default padding for containers\n            screens: {\n                '2xl': '1400px' // Max width for the container on 2xl screens\n            }\n        },\n\n        // --- Theme Extensions ---\n        // Use 'extend' to add customizations without overwriting Tailwind defaults\n        extend: {\n            // --- START: Project-Specific Font Families ---\n            // Define custom font families. Ensure the fonts are imported/linked in your project.\n            fontFamily: {\n                sans: ['Poppins', 'Inter', 'sans-serif'], // Default sans-serif stack from --font-family-base\n                heading: ['Poppins', 'Inter', 'sans-serif'], // Heading font stack from --font-family-heading\n                mono: ['ui-monospace', 'Menlo', 'Monaco', 'Cascadia Mono', 'Segoe UI Mono', 'Roboto Mono', 'Oxygen Mono', 'Ubuntu Monospace', 'Source Code Pro', 'Fira Mono', 'Droid Sans Mono', 'Courier New', 'monospace'], // Mono font stack from --font-family-mono\n            },\n            // --- END: Project-Specific Font Families ---\n\n            // --- Color Palette ---\n            colors: {\n                // Base colors (typically controlled by CSS variables for theming)\n                border: 'hsl(var(--border))',\n                input: 'hsl(var(--input))',\n                ring: 'hsl(var(--ring))', // Used for focus rings, etc.\n                background: 'hsl(var(--background))',\n                foreground: 'hsl(var(--foreground))',\n                primary: {\n                    DEFAULT: 'hsl(var(--primary))',\n                    foreground: 'hsl(var(--primary-foreground))' // Text color on primary background\n                },\n                secondary: {\n                    DEFAULT: 'hsl(var(--secondary))',\n                    foreground: 'hsl(var(--secondary-foreground))'\n                },\n                destructive: {\n                    DEFAULT: 'hsl(var(--destructive))',\n                    foreground: 'hsl(var(--destructive-foreground))'\n                },\n                muted: {\n                    DEFAULT: 'hsl(var(--muted))',\n                    foreground: 'hsl(var(--muted-foreground))' // Often used for subtle text or backgrounds\n                },\n                accent: {\n                    DEFAULT: 'hsl(var(--accent))',\n                    foreground: 'hsl(var(--accent-foreground))'\n                },\n                popover: {\n                    DEFAULT: 'hsl(var(--popover))',\n                    foreground: 'hsl(var(--popover-foreground))'\n                },\n                card: {\n                    DEFAULT: 'hsl(var(--card))',\n                    foreground: 'hsl(var(--card-foreground))'\n                },\n                // Sidebar specific colors (if using a distinct sidebar theme)\n                // sidebar: {\n                //  DEFAULT: 'hsl(var(--sidebar-background))',\n                //  foreground: 'hsl(var(--sidebar-foreground))',\n                //  primary: 'hsl(var(--sidebar-primary))',\n                //  'primary-foreground': 'hsl(var(--sidebar-primary-foreground))',\n                //  accent: 'hsl(var(--sidebar-accent))',\n                //  'accent-foreground': 'hsl(var(--sidebar-accent-foreground))',\n                //  border: 'hsl(var(--sidebar-border))',\n                //  ring: 'hsl(var(--sidebar-ring))'\n                // },\n\n                // --- START: Project-Specific Colors ---\n                // Added based on CSS variables found in index.css\n                success: {\n                  DEFAULT: 'hsl(var(--success))',\n                  foreground: 'hsl(var(--success-foreground))'\n                },\n                warning: {\n                  DEFAULT: 'hsl(var(--warning))',\n                  foreground: 'hsl(var(--warning-foreground))'\n                },\n                // --- END: Project-Specific Colors ---\n            },\n\n            // --- Border Radius ---\n            // Uses CSS variable for easy global adjustment\n            borderRadius: {\n                lg: 'var(--radius)',\n                md: 'calc(var(--radius) - 2px)',\n                sm: 'calc(var(--radius) - 4px)'\n            },\n\n            // --- Keyframes for Animations ---\n            keyframes: {\n                // Common animations (e.g., for Accordion components)\n                'accordion-down': {\n                    from: { height: '0' },\n                    to: { height: 'var(--radix-accordion-content-height)' }\n                },\n                'accordion-up': {\n                    from: { height: 'var(--radix-accordion-content-height)' },\n                    to: { height: '0' }\n                },\n\n                // --- START: Project-Specific Keyframes ---\n                // Added based on @keyframes found in index.css\n                fadeIn: {\n                    from: { opacity: '0' },\n                    to: { opacity: '1' }\n                },\n                slideUp: {\n                    from: { opacity: '0', transform: 'translateY(20px)' },\n                    to: { opacity: '1', transform: 'translateY(0)' }\n                },\n                scaleIn: {\n                    from: { opacity: '0', transform: 'scale(0.95)' },\n                    to: { opacity: '1', transform: 'scale(1)' }\n                },\n                pulse: {\n                    '0%, 100%': { opacity: '1' },\n                    '50%': { opacity: '.5' }\n                },\n                // --- END: Project-Specific Keyframes ---\n            },\n\n            // --- Animation Utilities ---\n            animation: {\n                // Common animations\n                'accordion-down': 'accordion-down 0.2s ease-out',\n                'accordion-up': 'accordion-up 0.2s ease-out',\n\n                // --- START: Project-Specific Animations ---\n                // Added based on animation utilities found in index.css\n                'fade-in': 'fadeIn 0.5s ease-out forwards',\n                'slide-up': 'slideUp 0.5s cubic-bezier(0.25, 0.46, 0.45, 0.94) forwards',\n                'scale-in': 'scaleIn 0.3s ease-out forwards',\n                'pulse-gentle': 'pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite',\n                // --- END: Project-Specific Animations ---\n            },\n\n            // --- START: Project-Specific Box Shadows ---\n            boxShadow: {\n                // Add custom shadows if needed based on project design\n            },\n            // --- END: Project-Specific Box Shadows ---\n\n            // --- START: Project-Specific Background Images ---\n            backgroundImage: {\n                // Add custom background images or gradients if needed\n            },\n            // --- END: Project-Specific Background Images ---\n        }\n    },\n\n    // --- Tailwind CSS Plugins ---\n    plugins: [\n        require(\"tailwindcss-animate\"), // Essential for the keyframes/animations defined above\n        require('@tailwindcss/forms'),     // Required for form styling based on project description\n        require('@tailwindcss/typography'), // Recommended for content-rich pages like destination details\n        // DO NOT ADD ANY OTHER PLUGINS.\n    ],\n} satisfies Config;"
    },
    {
        "fileName": "src/components/layout/Header.tsx",
        "content": "import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Menu, User, Sun, Moon } from 'lucide-react';\nimport { cn } from '@/lib/utils'; // Assuming cn utility exists\nimport { Button } from '@/components/ui/button'; // Assuming shadcn/ui Button\n// import { useTheme } from 'next-themes'; // Placeholder for theme toggle functionality\n\ntype HeaderProps = {\n  // Prop to toggle a collapsible sidebar, only passed when relevant\n  toggleSidebar?: () => void;\n  // Flag to indicate if the current layout uses a collapsible sidebar\n  hasCollapsibleSidebar?: boolean;\n};\n\nconst Header: React.FC<HeaderProps> = ({ toggleSidebar, hasCollapsibleSidebar }) => {\n  // const { theme, setTheme } = useTheme(); // Placeholder for theme toggle\n\n  return (\n    <header className={cn(\n      \"sticky top-0 z-40 w-full border-b border-border bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\"\n    )}>\n      <div className=\"container flex h-16 max-w-screen-2xl items-center justify-between px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex items-center space-x-4\">\n          {/* Conditionally render Menu button only if a collapsible sidebar exists */}\n          {hasCollapsibleSidebar && (\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={toggleSidebar}\n              className=\"lg:hidden\" // Often hidden on larger screens where sidebar might be static\n              aria-label=\"Toggle menu\"\n            >\n              <Menu className=\"h-5 w-5\" />\n            </Button>\n          )}\n          <Link to=\"/home\" className=\"flex items-center space-x-2\">\n            {/* Placeholder Logo/Brand Name */}\n            {/* <img src=\"/logo.svg\" alt=\"Ascendion Logo\" className=\"h-6 w-auto\" /> */}\n            <span className=\"font-semibold text-lg text-foreground\">ascendion</span>\n          </Link>\n        </div>\n\n        {/* Placeholder Navigation Links */}\n        <nav className=\"hidden md:flex items-center space-x-6 text-sm font-medium\">\n          <Link\n            to=\"/home\"\n            className=\"text-muted-foreground transition-colors hover:text-foreground\"\n          >\n            Home\n          </Link>\n          {/* Example link - adjust based on actual routes */}\n          <Link\n            to=\"/destination/some-id\" // Example path\n            className=\"text-muted-foreground transition-colors hover:text-foreground\"\n          >\n            Destinations\n          </Link>\n           <Link\n            to=\"/group\"\n            className=\"text-muted-foreground transition-colors hover:text-foreground\"\n          >\n            Group Trips\n          </Link>\n        </nav>\n\n        {/* Placeholder User Actions */}\n        <div className=\"flex items-center space-x-3\">\n          {/* Theme Toggle Placeholder */}\n          {/* <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => setTheme(theme === 'light' ? 'dark' : 'light')}\n            aria-label=\"Toggle theme\"\n          >\n            <Sun className=\"h-5 w-5 rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n            <Moon className=\"absolute h-5 w-5 rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n            <span className=\"sr-only\">Toggle theme</span>\n          </Button> */}\n          <Button variant=\"ghost\" size=\"icon\" aria-label=\"User Profile\">\n             <Link to=\"/dashboard\">\n                <User className=\"h-5 w-5\" />\n             </Link>\n          </Button>\n          {/* Add other icons like Cart, Notifications if needed */}\n        </div>\n      </div>\n    </header>\n  );\n};\n\nexport default Header;\n"
    },
    {
        "fileName": "src/components/layout/Footer.tsx",
        "content": "import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { cn } from '@/lib/utils'; // Assuming cn utility exists\n\nconst Footer: React.FC = () => {\n  const currentYear = new Date().getFullYear();\n\n  return (\n    <footer className={cn(\"bg-muted text-muted-foreground border-t border-border\")}>\n      <div className=\"container mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n          {/* Column 1: Brand/About */}\n          <div>\n            <h3 className=\"text-lg font-semibold text-foreground mb-3\">ascendion</h3>\n            <p className=\"text-sm\">\n              Explore the world with us. Curated travel experiences and seamless booking.\n            </p>\n          </div>\n\n          {/* Column 2: Quick Links */}\n          <div>\n            <h4 className=\"font-medium text-foreground mb-3\">Quick Links</h4>\n            <ul className=\"space-y-2 text-sm\">\n              <li><Link to=\"/home\" className=\"hover:text-primary transition-colors\">Home</Link></li>\n              <li><Link to=\"#\" className=\"hover:text-primary transition-colors\">Destinations</Link></li> {/* Placeholder */} \n              <li><Link to=\"#\" className=\"hover:text-primary transition-colors\">About Us</Link></li> {/* Placeholder */} \n              <li><Link to=\"#\" className=\"hover:text-primary transition-colors\">Contact</Link></li> {/* Placeholder */} \n            </ul>\n          </div>\n\n          {/* Column 3: Legal/Social */}\n          <div>\n            <h4 className=\"font-medium text-foreground mb-3\">Legal</h4>\n            <ul className=\"space-y-2 text-sm\">\n              <li><Link to=\"#\" className=\"hover:text-primary transition-colors\">Terms of Service</Link></li> {/* Placeholder */} \n              <li><Link to=\"#\" className=\"hover:text-primary transition-colors\">Privacy Policy</Link></li> {/* Placeholder */} \n            </ul>\n             {/* Add Social Media Icons here if needed */}\n          </div>\n        </div>\n\n        <div className=\"mt-8 pt-8 border-t border-border/50 text-center text-xs\">\n          &copy; {currentYear} ascendion. All rights reserved.\n        </div>\n      </div>\n    </footer>\n  );\n};\n\nexport default Footer;\n"
    },
    {
        "fileName": "src/components/layout/BodySidebar.tsx",
        "content": "import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { MapPin, CalendarDays, Hotel } from 'lucide-react'; // Example icons\nimport { cn } from '@/lib/utils';\n\ninterface BodySidebarProps {\n  className?: string;\n}\n\n// Sidebar intended for 'LSB(S)' layout: Static, below Header, alongside Body content.\n// Its positioning is typically managed by the parent layout component (e.g., using Flexbox or Grid).\nconst BodySidebar: React.FC<BodySidebarProps> = ({ className }) => {\n  return (\n    <aside\n      className={cn(\n        'hidden lg:block w-64 shrink-0 border-r border-border bg-muted/40 p-4 lg:p-6',\n        className // Allow overriding/extending classes\n      )}\n    >\n      <div className=\"space-y-6\">\n        <h3 className=\"text-lg font-semibold text-foreground\">Details</h3>\n        {/* Placeholder Content for Destination Detail Page Sidebar */}\n        <nav className=\"space-y-2\">\n          <Link\n            to=\"#location\" // Example internal link or specific route\n            className=\"flex items-center space-x-2 text-sm text-muted-foreground hover:text-primary transition-colors p-2 rounded-md hover:bg-primary/10\"\n          >\n            <MapPin className=\"h-4 w-4\" />\n            <span>Location Info</span>\n          </Link>\n          <Link\n            to=\"#itinerary\" // Example internal link or specific route\n            className=\"flex items-center space-x-2 text-sm text-muted-foreground hover:text-primary transition-colors p-2 rounded-md hover:bg-primary/10\"\n          >\n            <CalendarDays className=\"h-4 w-4\" />\n            <span>Itinerary</span>\n          </Link>\n          <Link\n             to=\"/hotel/some-id\" // Example link to related page type\n            className=\"flex items-center space-x-2 text-sm text-muted-foreground hover:text-primary transition-colors p-2 rounded-md hover:bg-primary/10\"\n          >\n            <Hotel className=\"h-4 w-4\" />\n            <span>Nearby Hotels</span>\n          </Link>\n        </nav>\n        {/* Add more sections as needed */}\n      </div>\n    </aside>\n  );\n};\n\nexport default BodySidebar;\n"
    },
    {
        "fileName": "src/components/layout/IntegratedSidebar.tsx",
        "content": "import React from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport { X, LayoutDashboard, Users, Settings } from 'lucide-react'; // Example icons\nimport { cn } from '@/lib/utils';\nimport { Button } from '@/components/ui/button'; // Assuming shadcn/ui Button\n\ninterface IntegratedSidebarProps {\n  isOpen: boolean;\n  onClose: () => void;\n  className?: string;\n}\n\n// Sidebar intended for 'LSI(C)' layout: Collapsible, Full Height (Integrated).\nconst IntegratedSidebar: React.FC<IntegratedSidebarProps> = ({ isOpen, onClose, className }) => {\n  const location = useLocation();\n\n  const sidebarLinks = [\n    { path: '/dashboard', label: 'Dashboard', icon: LayoutDashboard },\n    { path: '/group', label: 'Group Trips', icon: Users },\n    { path: '#settings', label: 'Settings', icon: Settings }, // Placeholder\n  ];\n\n  return (\n    <>\n      {/* Overlay for mobile/tablet when sidebar is open */}\n      {isOpen && (\n        <div\n          className=\"fixed inset-0 z-40 bg-black/60 lg:hidden\"\n          onClick={onClose}\n          aria-hidden=\"true\"\n        />\n      )}\n\n      <aside\n        className={cn(\n          'fixed inset-y-0 left-0 z-50 flex h-full w-72 flex-col border-r border-border bg-background',\n          'transition-transform duration-300 ease-in-out',\n          isOpen ? 'translate-x-0' : '-translate-x-full',\n          'lg:sticky lg:translate-x-0', // On large screens, make it sticky and always visible\n          className\n        )}\n      >\n        <div className=\"flex h-16 items-center justify-between border-b border-border px-4 shrink-0\">\n           <Link to=\"/home\" className=\"flex items-center space-x-2\" onClick={onClose}>\n             {/* Placeholder Logo/Brand Name */}\n             <span className=\"font-semibold text-lg text-foreground\">ascendion</span>\n          </Link>\n          <Button variant=\"ghost\" size=\"icon\" onClick={onClose} className=\"lg:hidden\">\n            <X className=\"h-5 w-5\" />\n            <span className=\"sr-only\">Close menu</span>\n          </Button>\n        </div>\n\n        <nav className=\"flex-1 overflow-y-auto p-4\">\n          <ul className=\"space-y-1\">\n            {sidebarLinks.map((link) => {\n              const isActive = location.pathname === link.path;\n              return (\n                <li key={link.path}>\n                  <Link\n                    to={link.path}\n                    onClick={onClose} // Close sidebar on navigation (especially mobile)\n                    className={cn(\n                      'flex items-center rounded-md px-3 py-2 text-sm font-medium transition-colors',\n                      isActive\n                        ? 'bg-primary/10 text-primary'\n                        : 'text-muted-foreground hover:bg-muted hover:text-foreground'\n                    )}\n                  >\n                    <link.icon className=\"mr-3 h-5 w-5\" />\n                    {link.label}\n                  </Link>\n                </li>\n              );\n            })}\n          </ul>\n        </nav>\n\n        {/* Optional Footer section within the sidebar */}\n        {/* <div className=\"mt-auto p-4 border-t border-border\">\n            <p className=\"text-xs text-muted-foreground\">Sidebar Footer</p>\n        </div> */}\n      </aside>\n    </>\n  );\n};\n\nexport default IntegratedSidebar;\n"
    },
    {
        "fileName": "src/components/homepage_destination_discovery/DestinationSearchBar.tsx",
        "content": "import React from 'react';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { Search } from 'lucide-react';\n\ninterface DestinationSearchBarProps {\n  // Placeholder for potential props like initial value, suggestions, onSearch callback\n  onSearch?: (query: string) => void;\n}\n\nconst DestinationSearchBar: React.FC<DestinationSearchBarProps> = ({ onSearch }) => {\n  const [searchQuery, setSearchQuery] = React.useState('');\n\n  const handleSearch = (event: React.FormEvent) => {\n    event.preventDefault();\n    if (onSearch) {\n      onSearch(searchQuery);\n    }\n    // Add search logic here or trigger callback\n    console.log('Searching for:', searchQuery);\n  };\n\n  return (\n    <form \n      onSubmit={handleSearch}\n      className=\"flex w-full max-w-2xl items-center space-x-2 p-4 bg-card/80 dark:bg-card/60 backdrop-blur-sm rounded-lg shadow-lg border border-border/50 mx-auto my-8 animate-slide-up\"\n      style={{ animationDelay: '0.1s' }} // Example of staggering entry animation\n    >\n      <div className=\"relative flex-grow\">\n        <Search className=\"absolute left-3 top-1/2 h-5 w-5 -translate-y-1/2 text-muted-foreground\" />\n        <Input\n          type=\"text\"\n          placeholder=\"Search destinations by name, theme, or feature...\"\n          value={searchQuery}\n          onChange={(e) => setSearchQuery(e.target.value)}\n          className=\"pl-10 pr-4 py-3 h-12 text-base bg-background border-input focus:ring-2 focus:ring-ring focus:ring-offset-2 focus:ring-offset-background rounded-md shadow-sm\"\n        />\n        {/* Potential location for auto-suggestion dropdown */}\n      </div>\n      <Button \n        type=\"submit\" \n        className=\"h-12 px-6 bg-primary text-primary-foreground hover:bg-primary/90 rounded-md shadow-md transition-colors duration-200\"\n      >\n        Search\n      </Button>\n    </form>\n  );\n};\n\nexport default DestinationSearchBar;\n"
    },
    {
        "fileName": "src/components/homepage_destination_discovery/TrendingDestinationsCarousel.tsx",
        "content": "import React from 'react';\nimport {\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselNext,\n  CarouselPrevious,\n} from '@/components/ui/carousel';\nimport {\n  Card,\n  CardContent,\n  CardFooter\n} from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { ArrowRight } from 'lucide-react';\n\n// Placeholder data structure\ninterface Destination {\n  id: string;\n  name: string;\n  imageUrl: string;\n  description: string;\n}\n\ninterface TrendingDestinationsCarouselProps {\n  destinations: Destination[];\n}\n\nconst TrendingDestinationsCarousel: React.FC<TrendingDestinationsCarouselProps> = ({ destinations = [] }) => {\n  // Placeholder data if none provided\n  const defaultDestinations: Destination[] = [\n    { id: '1', name: 'Kerala Backwaters', imageUrl: '/placeholder-kerala.jpg', description: 'Tranquil waterways and lush greenery.' },\n    { id: '2', name: 'Ladakh Mountains', imageUrl: '/placeholder-ladakh.jpg', description: 'High-altitude desert landscapes.' },\n    { id: '3', name: 'Rajasthan Palaces', imageUrl: '/placeholder-rajasthan.jpg', description: 'Royal heritage and vibrant culture.' },\n    { id: '4', name: 'Goa Beaches', imageUrl: '/placeholder-goa.jpg', description: 'Sun, sand, and coastal charm.' },\n    { id: '5', name: 'Varanasi Ghats', imageUrl: '/placeholder-varanasi.jpg', description: 'Spiritual heart of India.' },\n  ];\n\n  const displayDestinations = destinations.length > 0 ? destinations : defaultDestinations;\n\n  return (\n    <div className=\"w-full px-4 md:px-16 py-8 animate-fade-in\">\n      <h2 className=\"text-3xl font-bold text-center mb-8 text-foreground\">Trending Destinations</h2>\n      <Carousel\n        opts={{\n          align: 'start',\n          loop: true,\n          // Add options for 3D effect if desired (might need custom styling or a different library)\n        }}\n        className=\"w-full max-w-6xl mx-auto\"\n      >\n        <CarouselContent className=\"-ml-4 py-4\">\n          {displayDestinations.map((destination, index) => (\n            <CarouselItem key={destination.id} className=\"pl-4 md:basis-1/2 lg:basis-1/3 stagger-item\" style={{ animationDelay: `${index * 0.1}s` }}>\n              <div className=\"p-1 h-full\">\n                <Card className=\"overflow-hidden h-full flex flex-col group card-hover-basic transform transition-transform duration-500 ease-out hover:scale-105\">\n                  <CardContent className=\"relative p-0 flex-grow aspect-[4/3]\">\n                    <img\n                      src={destination.imageUrl} // Use placeholder image\n                      alt={destination.name}\n                      className=\"absolute inset-0 w-full h-full object-cover transition-transform duration-500 group-hover:scale-110\"\n                    />\n                    {/* Add overlay for better text readability if needed */}\n                    <div className=\"absolute inset-0 bg-gradient-to-t from-black/70 via-black/30 to-transparent\"></div>\n                     <div className=\"absolute bottom-0 left-0 p-4 text-white\">\n                        <h3 className=\"text-xl font-semibold mb-1 text-balance\">{destination.name}</h3>\n                        <p className=\"text-sm text-gray-200 text-pretty\">{destination.description}</p>\n                    </div>\n                  </CardContent>\n                  <CardFooter className=\"p-4 bg-card border-t border-border/50\">\n                     <Button variant=\"link\" className=\"text-primary hover:text-primary/80 p-0 h-auto\">View Details <ArrowRight className=\"ml-2 h-4 w-4\" /></Button>\n                  </CardFooter>\n                </Card>\n              </div>\n            </CarouselItem>\n          ))}\n        </CarouselContent>\n        <CarouselPrevious className=\"absolute left-[-50px] top-1/2 -translate-y-1/2 hidden md:inline-flex bg-card/80 hover:bg-card border-border/50\" />\n        <CarouselNext className=\"absolute right-[-50px] top-1/2 -translate-y-1/2 hidden md:inline-flex bg-card/80 hover:bg-card border-border/50\" />\n      </Carousel>\n    </div>\n  );\n};\n\nexport default TrendingDestinationsCarousel;\n"
    },
    {
        "fileName": "src/components/homepage_destination_discovery/FeaturedDestinationGrid.tsx",
        "content": "import React from 'react';\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge'; // Assuming Badge is available for tags\nimport { ArrowRight } from 'lucide-react';\n\n// Placeholder data structure\ninterface FeaturedDestination {\n  id: string;\n  name: string;\n  imageUrl: string;\n  summary: string;\n  tags?: string[]; // e.g., 'Popular', 'Exclusive'\n}\n\ninterface FeaturedDestinationGridProps {\n  destinations: FeaturedDestination[];\n}\n\nconst FeaturedDestinationGrid: React.FC<FeaturedDestinationGridProps> = ({ destinations = [] }) => {\n  // Placeholder data if none provided\n  const defaultDestinations: FeaturedDestination[] = [\n    { id: 'fd1', name: 'Andaman Islands', imageUrl: '/placeholder-andaman.jpg', summary: 'Pristine beaches and coral reefs.', tags: ['Popular', 'Beach'] },\n    { id: 'fd2', name: 'Spiti Valley', imageUrl: '/placeholder-spiti.jpg', summary: 'Remote monasteries and stark beauty.', tags: ['Adventure', 'Exclusive'] },\n    { id: 'fd3', name: 'Hampi Ruins', imageUrl: '/placeholder-hampi.jpg', summary: 'Explore ancient temples and boulders.', tags: ['History', 'Unique'] },\n    { id: 'fd4', name: 'Sundarbans Mangroves', imageUrl: '/placeholder-sundarbans.jpg', summary: 'Home of the Royal Bengal Tiger.', tags: ['Wildlife', 'Nature'] },\n  ];\n\n  const displayDestinations = destinations.length > 0 ? destinations : defaultDestinations;\n\n  return (\n    <div className=\"container mx-auto px-4 py-12 animate-fade-in\">\n      <h2 className=\"text-3xl font-bold text-center mb-8 text-foreground\">Featured Destinations</h2>\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6 stagger-container\">\n        {displayDestinations.map((destination, index) => (\n          <Card \n            key={destination.id} \n            className=\"overflow-hidden flex flex-col card-hover-basic stagger-item transition-all duration-300 ease-in-out hover:shadow-xl dark:hover:shadow-primary/10\"\n            style={{ animationDelay: `${index * 0.1}s` }}\n          >\n            <CardHeader className=\"p-0 relative\">\n              <img \n                src={destination.imageUrl} // Use placeholder image\n                alt={destination.name} \n                className=\"w-full h-48 object-cover\"\n              />\n              {destination.tags && destination.tags.length > 0 && (\n                <div className=\"absolute top-2 right-2 flex flex-wrap gap-1\">\n                  {destination.tags.map(tag => (\n                    <Badge key={tag} variant={tag === 'Exclusive' ? 'destructive' : 'secondary'} className=\"text-xs backdrop-blur-sm bg-black/30 text-white border-none\">\n                      {tag}\n                    </Badge>\n                  ))}\n                </div>\n              )}\n            </CardHeader>\n            <CardContent className=\"p-4 flex-grow\">\n              <CardTitle className=\"text-lg font-semibold mb-2 text-foreground\">{destination.name}</CardTitle>\n              <CardDescription className=\"text-sm text-muted-foreground text-pretty\">{destination.summary}</CardDescription>\n            </CardContent>\n            <CardFooter className=\"p-4 pt-0\">\n              <Button variant=\"outline\" className=\"w-full border-primary text-primary hover:bg-primary/10 hover:text-primary\">\n                View Details <ArrowRight className=\"ml-2 h-4 w-4\" />\n              </Button>\n            </CardFooter>\n          </Card>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default FeaturedDestinationGrid;\n"
    },
    {
        "fileName": "src/components/homepage_destination_discovery/JourneyPreviewCarousel.tsx",
        "content": "import React from 'react';\nimport {\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselNext,\n  CarouselPrevious,\n} from '@/components/ui/carousel';\nimport {\n  Card,\n  CardContent,\n} from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { MapPin, Eye } from 'lucide-react'; // Example icons\n\n// Placeholder data structure\ninterface Journey {\n  id: string;\n  title: string;\n  theme: string; // e.g., 'Backwaters Sojourn', 'Mountain Explorer'\n  imageUrl: string;\n  highlights: string[]; // Short list of highlights\n}\n\ninterface JourneyPreviewCarouselProps {\n  journeys: Journey[];\n}\n\nconst JourneyPreviewCarousel: React.FC<JourneyPreviewCarouselProps> = ({ journeys = [] }) => {\n  // Placeholder data if none provided\n  const defaultJourneys: Journey[] = [\n    { id: 'j1', title: 'Backwaters Sojourn', theme: 'Relaxation', imageUrl: '/placeholder-journey-kerala.jpg', highlights: ['Houseboat Stay', 'Village Life', 'Lush Scenery'] },\n    { id: 'j2', title: 'Mountain Explorer', theme: 'Adventure', imageUrl: '/placeholder-journey-himachal.jpg', highlights: ['Trekking', 'Monasteries', 'Panoramic Views'] },\n    { id: 'j3', title: 'Desert Kingdoms', theme: 'Culture', imageUrl: '/placeholder-journey-rajasthan.jpg', highlights: ['Forts & Palaces', 'Camel Safari', 'Local Markets'] },\n    { id: 'j4', title: 'Coastal Wonders', theme: 'Beach', imageUrl: '/placeholder-journey-goa.jpg', highlights: ['Beach Hopping', 'Water Sports', 'Nightlife'] },\n  ];\n\n  const displayJourneys = journeys.length > 0 ? journeys : defaultJourneys;\n\n  return (\n    <div className=\"w-full bg-muted/50 dark:bg-muted/20 px-4 md:px-16 py-12 my-8 animate-fade-in\">\n      <h2 className=\"text-3xl font-bold text-center mb-8 text-foreground\">Popular Journeys</h2>\n      <Carousel\n        opts={{\n          align: 'start',\n          loop: false,\n        }}\n        className=\"w-full max-w-7xl mx-auto\"\n      >\n        <CarouselContent className=\"-ml-4 py-4\">\n          {displayJourneys.map((journey, index) => (\n            <CarouselItem key={journey.id} className=\"pl-4 md:basis-1/2 lg:basis-1/4 stagger-item\" style={{ animationDelay: `${index * 0.1}s` }}>\n              <div className=\"p-1 h-full\">\n                <Card className=\"overflow-hidden h-full flex flex-col group card-hover-basic relative transform transition-transform duration-300 ease-in-out hover:-translate-y-2\">\n                  <CardContent className=\"relative p-0 flex-grow aspect-[3/4]\">\n                    <img\n                      src={journey.imageUrl} // Use placeholder image\n                      alt={journey.title}\n                      className=\"absolute inset-0 w-full h-full object-cover transition-transform duration-500 group-hover:scale-110\"\n                    />\n                    <div className=\"absolute inset-0 bg-gradient-to-t from-black/80 via-black/40 to-transparent flex flex-col justify-end p-4\">\n                      <h3 className=\"text-xl font-semibold mb-2 text-white text-balance\">{journey.title}</h3>\n                      <p className=\"text-sm font-medium text-primary-foreground/80 bg-primary/70 px-2 py-1 rounded inline-block self-start mb-2\">{journey.theme}</p>\n                      <ul className=\"text-xs text-gray-200 list-disc list-inside space-y-1 mb-4\">\n                        {journey.highlights.map((highlight, i) => (\n                          <li key={i}>{highlight}</li>\n                        ))}\n                      </ul>\n                      {/* Quick View / Details Button */}\n                      <Button size=\"sm\" variant=\"secondary\" className=\"w-full bg-secondary/90 text-secondary-foreground hover:bg-secondary\">\n                        <Eye className=\"mr-2 h-4 w-4\" /> View Itinerary\n                      </Button>\n                    </div>\n                  </CardContent>\n                   {/* Potential 3D/Animation elements could be added here or via card styling */}\n                </Card>\n              </div>\n            </CarouselItem>\n          ))}\n        </CarouselContent>\n        <CarouselPrevious className=\"absolute left-[-20px] md:left-[-50px] top-1/2 -translate-y-1/2 hidden sm:inline-flex bg-card/80 hover:bg-card border-border/50\" />\n        <CarouselNext className=\"absolute right-[-20px] md:right-[-50px] top-1/2 -translate-y-1/2 hidden sm:inline-flex bg-card/80 hover:bg-card border-border/50\" />\n      </Carousel>\n    </div>\n  );\n};\n\nexport default JourneyPreviewCarousel;\n"
    },
    {
        "fileName": "src/components/homepage_destination_discovery/GroupDealsSection.tsx",
        "content": "import React from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Tag, Users, Clock } from 'lucide-react'; // Example icons\n\n// Placeholder data structure\ninterface GroupDeal {\n  id: string;\n  title: string;\n  destination: string;\n  discount: string; // e.g., 'Up to 25% off'\n  validUntil?: string; // e.g., '2024-12-31'\n  minGroupSize: number;\n}\n\ninterface GroupDealsSectionProps {\n  deals: GroupDeal[];\n}\n\nconst GroupDealsSection: React.FC<GroupDealsSectionProps> = ({ deals = [] }) => {\n  // Placeholder data if none provided\n  const defaultDeals: GroupDeal[] = [\n    { id: 'gd1', title: 'Himalayan Group Trek', destination: 'Himachal Pradesh', discount: '15% Off', minGroupSize: 5, validUntil: 'Ends Dec 31st' },\n    { id: 'gd2', title: 'South India Temple Tour', destination: 'Tamil Nadu', discount: '20% Off for 8+', minGroupSize: 8, validUntil: 'Limited Time Offer' },\n    { id: 'gd3', title: 'Rajasthan Cultural Fiesta', destination: 'Rajasthan', discount: 'Book 10, Get 1 Free', minGroupSize: 10 },\n  ];\n\n  const displayDeals = deals.length > 0 ? deals : defaultDeals;\n\n  // Basic countdown logic placeholder (replace with actual library if needed)\n  const CountdownTimer: React.FC<{ dateString?: string }> = ({ dateString }) => {\n    if (!dateString || !dateString.includes('Dec 31st')) return null; // Simple placeholder logic\n    // In a real app, calculate remaining time from dateString\n    const timeLeft = 'Limited Time!'; // Placeholder\n    return <span className=\"text-xs text-destructive font-medium flex items-center\"><Clock className=\"h-3 w-3 mr-1\"/>{timeLeft}</span>;\n  };\n\n  return (\n    <div className=\"container mx-auto px-4 py-12 animate-scale-in\">\n      <Card className=\"bg-gradient-to-br from-primary/10 via-background to-accent/10 border-primary/20 shadow-lg overflow-hidden\">\n        <CardHeader className=\"text-center\">\n          <Tag className=\"mx-auto h-10 w-10 text-primary mb-2\" />\n          <CardTitle className=\"text-3xl font-bold text-primary\">Special Group Deals</CardTitle>\n          <CardDescription className=\"text-lg text-muted-foreground mt-1 text-balance\">\n            Travel together and save more! Explore exclusive offers for group bookings.\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"px-6 pb-6\">\n          {displayDeals.length > 0 ? (\n            <div className=\"space-y-4\">\n              {displayDeals.map((deal) => (\n                <div key={deal.id} className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center p-4 bg-card/80 dark:bg-card/50 rounded-lg border border-border/50 shadow-sm stagger-item\">\n                  <div className=\"mb-3 sm:mb-0\">\n                    <h4 className=\"font-semibold text-foreground\">{deal.title} - <span className=\"text-muted-foreground\">{deal.destination}</span></h4>\n                    <div className=\"flex items-center space-x-3 text-sm mt-1\">\n                      <span className=\"flex items-center text-success font-medium\"><Tag className=\"h-4 w-4 mr-1\" />{deal.discount}</span>\n                      <span className=\"flex items-center text-secondary\"><Users className=\"h-4 w-4 mr-1\" />Min. {deal.minGroupSize} people</span>\n                      {deal.validUntil && <CountdownTimer dateString={deal.validUntil} />}\n                    </div>\n                  </div>\n                  <div className=\"flex space-x-2 w-full sm:w-auto\">\n                     <Button variant=\"outline\" size=\"sm\" className=\"flex-1 sm:flex-none\">Learn More</Button>\n                     <Button size=\"sm\" className=\"flex-1 sm:flex-none bg-primary text-primary-foreground hover:bg-primary/90\">Book Now</Button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <p className=\"text-center text-muted-foreground\">No group deals available at the moment. Check back soon!</p>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default GroupDealsSection;\n"
    },
    {
        "fileName": "src/components/homepage_destination_discovery/PlanTripCtaButton.tsx",
        "content": "import React from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Send } from 'lucide-react'; // Using Send as an example icon\n\ninterface PlanTripCtaButtonProps {\n  onClick?: () => void; // Callback for button click, e.g., navigation\n}\n\nconst PlanTripCtaButton: React.FC<PlanTripCtaButtonProps> = ({ onClick }) => {\n  const handleClick = () => {\n    if (onClick) {\n      onClick();\n    } else {\n      // Default behavior: navigate or log\n      console.log('Navigate to trip planner page');\n      // Example navigation (if using react-router-dom):\n      // navigate('/plan-trip');\n    }\n  };\n\n  return (\n    <div className=\"my-12 text-center animate-fade-in\" style={{ animationDelay: '0.5s' }}>\n      <Button\n        size=\"lg\" // Use large size for prominence\n        onClick={handleClick}\n        className=\"px-10 py-6 text-lg font-semibold bg-gradient-to-r from-primary to-accent text-primary-foreground rounded-full shadow-lg transform transition-transform duration-300 ease-in-out hover:scale-105 hover:shadow-xl focus:outline-none focus:ring-4 focus:ring-ring focus:ring-offset-2 focus:ring-offset-background\"\n      >\n        <Send className=\"mr-3 h-5 w-5\" />\n        Plan Your Dream Trip\n      </Button>\n    </div>\n  );\n};\n\nexport default PlanTripCtaButton;\n"
    },
    {
        "fileName": "src/components/homepage_destination_discovery/OffersBanner.tsx",
        "content": "import React from 'react';\nimport { Button } from '@/components/ui/button';\nimport { AlertCircle, Megaphone, ArrowRight } from 'lucide-react'; // Example icons\n\ninterface Offer {\n  id: string;\n  text: string;\n  link?: string;\n}\n\ninterface OffersBannerProps {\n  offers: Offer[];\n  // Variant could control appearance (e.g., 'top-strip', 'inline-section')\n  variant?: 'top-strip' | 'inline-section'; \n}\n\nconst OffersBanner: React.FC<OffersBannerProps> = ({ offers = [], variant = 'inline-section' }) => {\n  // Placeholder data if none provided\n  const defaultOffers: Offer[] = [\n    { id: 'o1', text: 'Flash Sale! Up to 30% off on selected Rajasthan tours. Ends Soon!', link: '/offers/flash-sale' },\n    { id: 'o2', text: 'Group Booking Special: Get an extra 5% discount for groups of 10+.', link: '/group-bookings' },\n  ];\n\n  const displayOffers = offers.length > 0 ? offers : defaultOffers;\n\n  if (displayOffers.length === 0) {\n    return null; // Don't render if no offers\n  }\n\n  const currentOffer = displayOffers[0]; // Simple logic to display one offer, could be a carousel\n\n  const bannerClasses = {\n    'top-strip': 'w-full p-2 bg-accent text-accent-foreground text-sm font-medium text-center flex items-center justify-center space-x-2 shadow-md animate-fade-in',\n    'inline-section': 'container mx-auto px-4 py-4 my-6 bg-gradient-to-r from-accent/80 to-primary/80 text-primary-foreground rounded-lg shadow-md flex flex-col sm:flex-row items-center justify-between animate-fade-in',\n  }[variant];\n\n  const icon = variant === 'top-strip' ? <Megaphone className=\"h-4 w-4\" /> : <AlertCircle className=\"h-6 w-6 mb-2 sm:mb-0 sm:mr-3\" />;\n  const textClass = variant === 'top-strip' ? '' : 'text-center sm:text-left flex-grow mb-2 sm:mb-0';\n  const buttonVariant = variant === 'top-strip' ? 'link' : 'secondary';\n  const buttonSize = variant === 'top-strip' ? 'sm' : 'default';\n  const buttonClass = variant === 'top-strip' ? 'text-accent-foreground hover:underline p-0 h-auto' : 'bg-white/20 hover:bg-white/30 text-white';\n\n  return (\n    <div className={bannerClasses}>\n      {icon}\n      <p className={textClass}>{currentOffer.text}</p>\n      {currentOffer.link && (\n        <Button \n          variant={buttonVariant}\n          size={buttonSize}\n          className={buttonClass} \n          onClick={() => console.log(`Navigate to ${currentOffer.link}`)} // Replace with actual navigation\n        >\n          Explore Offers <ArrowRight className=\"ml-1 h-4 w-4\" />\n        </Button>\n      )}\n      {/* Could add a close button if needed */} \n    </div>\n  );\n};\n\nexport default OffersBanner;\n"
    },
    {
        "fileName": "src/components/homepage_destination_discovery/DestinationFilterGroup.tsx",
        "content": "import React from 'react';\nimport { Button } from '@/components/ui/button';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuCheckboxItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\nimport { ToggleGroup, ToggleGroupItem } from '@/components/ui/toggle-group';\nimport { Filter, ChevronDown, Tag, Map, Clock, Star } from 'lucide-react'; // Example icons\n\n// Define possible filter criteria and their state\ninterface FilterState {\n  themes: string[];\n  locations: string[];\n  tripTypes: string[];\n  duration?: string; // e.g., 'short', 'medium', 'long'\n  sortBy?: string; // e.g., 'popularity', 'name'\n}\n\ninterface DestinationFilterGroupProps {\n  availableFilters: {\n    themes?: string[];\n    locations?: string[];\n    tripTypes?: string[];\n    durations?: { label: string; value: string }[];\n    sortOptions?: { label: string; value: string }[];\n  };\n  onFilterChange: (filters: Partial<FilterState>) => void;\n}\n\nconst DestinationFilterGroup: React.FC<DestinationFilterGroupProps> = ({ \n  availableFilters = {}, \n  onFilterChange \n}) => {\n  const [selectedThemes, setSelectedThemes] = React.useState<string[]>([]);\n  const [selectedLocations, setSelectedLocations] = React.useState<string[]>([]);\n  const [selectedTripTypes, setSelectedTripTypes] = React.useState<string[]>([]);\n  const [selectedSortBy, setSelectedSortBy] = React.useState<string>('popularity');\n\n  // Example handler for theme changes\n  const handleThemeChange = (theme: string, checked: boolean) => {\n    const newThemes = checked \n      ? [...selectedThemes, theme]\n      : selectedThemes.filter(t => t !== theme);\n    setSelectedThemes(newThemes);\n    onFilterChange({ themes: newThemes });\n  };\n\n  // Example handler for sort change (using ToggleGroup)\n  const handleSortChange = (value: string) => {\n    if (value) { // Prevent unselecting all\n      setSelectedSortBy(value);\n      onFilterChange({ sortBy: value });\n    }\n  };\n\n  // Simplified rendering - add more filters as needed (locations, tripTypes, duration)\n\n  return (\n    <div className=\"flex flex-wrap items-center justify-center gap-2 md:gap-4 p-4 bg-card/50 dark:bg-card/30 rounded-lg border border-border/30 shadow-sm my-6 animate-fade-in\">\n      <span className=\"text-sm font-medium text-muted-foreground mr-2 hidden sm:inline\">Filter by:</span>\n      \n      {/* Theme Filter Dropdown */}\n      {availableFilters.themes && availableFilters.themes.length > 0 && (\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button variant=\"outline\" className=\"h-9 px-3 text-sm\">\n              <Tag className=\"h-4 w-4 mr-2\" /> Themes <ChevronDown className=\"h-4 w-4 ml-1 text-muted-foreground\" />\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"start\">\n            <DropdownMenuLabel>Select Themes</DropdownMenuLabel>\n            <DropdownMenuSeparator />\n            {availableFilters.themes.map(theme => (\n              <DropdownMenuCheckboxItem\n                key={theme}\n                checked={selectedThemes.includes(theme)}\n                onCheckedChange={(checked) => handleThemeChange(theme, Boolean(checked))}\n              >\n                {theme}\n              </DropdownMenuCheckboxItem>\n            ))}\n          </DropdownMenuContent>\n        </DropdownMenu>\n      )}\n\n      {/* Add more dropdowns for Locations, Trip Types, Duration similarly */} \n       {/* Example: Location Filter Placeholder */}\n      <Button variant=\"outline\" className=\"h-9 px-3 text-sm\" disabled>\n          <Map className=\"h-4 w-4 mr-2\" /> Location <ChevronDown className=\"h-4 w-4 ml-1 text-muted-foreground\" />\n      </Button>\n\n      {/* Sort By Toggle Group */} \n      {availableFilters.sortOptions && availableFilters.sortOptions.length > 0 && (\n        <div className=\"flex items-center gap-2 ml-auto\">\n            <span className=\"text-sm font-medium text-muted-foreground mr-1 hidden md:inline\">Sort:</span>\n            <ToggleGroup type=\"single\" value={selectedSortBy} onValueChange={handleSortChange} className=\"gap-1\">\n                {availableFilters.sortOptions.map(option => (\n                    <ToggleGroupItem key={option.value} value={option.value} aria-label={`Sort by ${option.label}`} size=\"sm\" className=\"h-9 px-3 data-[state=on]:bg-primary/10 data-[state=on]:text-primary\">\n                        {option.value === 'popularity' && <Star className=\"h-4 w-4 mr-1\" />}\n                        {option.label}\n                    </ToggleGroupItem>\n                ))}\n            </ToggleGroup>\n        </div>\n      )}\n\n      {/* Optional: Clear Filters Button */}\n      {/* <Button variant=\"ghost\" size=\"sm\" className=\"text-muted-foreground hover:text-foreground\">\n          <Filter className=\"h-4 w-4 mr-1\" /> Clear\n      </Button> */} \n    </div>\n  );\n};\n\n// Default props providing example filter options\nDestinationFilterGroup.defaultProps = {\n  availableFilters: {\n    themes: ['Adventure', 'Relaxation', 'Culture', 'Wildlife', 'Beach'],\n    locations: ['North India', 'South India', 'West India', 'East India'],\n    tripTypes: ['Solo', 'Couple', 'Family', 'Group'],\n    sortOptions: [\n        { label: 'Popularity', value: 'popularity' }, \n        { label: 'Name', value: 'name' }\n    ]\n  },\n  onFilterChange: (filters) => console.log('Filters changed:', filters),\n};\n\nexport default DestinationFilterGroup;\n"
    },
    {
        "fileName": "src/components/homepage_destination_discovery/IntroductoryTextBlock.tsx",
        "content": "import React from 'react';\n\ninterface IntroductoryTextBlockProps {\n  headline?: string;\n  tagline?: string;\n}\n\nconst IntroductoryTextBlock: React.FC<IntroductoryTextBlockProps> = ({ \n  headline = \"Discover Exotic India\", \n  tagline = \"Like Never Before.\"\n}) => {\n  return (\n    <div className=\"text-center py-8 px-4 animate-slide-up\">\n      <h1 className=\"text-4xl md:text-5xl lg:text-6xl font-bold mb-2 text-foreground\">\n        {headline}\n      </h1>\n      <p className=\"text-xl md:text-2xl text-gradient-primary font-semibold text-pretty\">\n        {tagline}\n      </p>\n    </div>\n  );\n};\n\nexport default IntroductoryTextBlock;\n"
    },
    {
        "fileName": "src/components/destination_detail_itinerary_page/ImageGallery.tsx",
        "content": "import React from 'react';\nimport {\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselNext,\n  CarouselPrevious,\n} from '@/components/ui/carousel'; // Assuming Shadcn UI setup\nimport Image from 'next/image'; // Or use standard <img> if not using Next.js\n\ninterface ImageItem {\n  src: string;\n  alt: string;\n}\n\ninterface ImageGalleryProps {\n  images: ImageItem[];\n  destinationName: string;\n}\n\nconst ImageGallery: React.FC<ImageGalleryProps> = ({ images = [], destinationName }) => {\n  if (!images || images.length === 0) {\n    return (\n      <div className=\"aspect-video w-full bg-muted flex items-center justify-center rounded-lg\">\n        <p className=\"text-muted-foreground\">No images available.</p>\n      </div>\n    );\n  }\n\n  return (\n    <Carousel className=\"w-full rounded-lg overflow-hidden shadow-lg bg-card\" opts={{ loop: true }}>\n      <CarouselContent>\n        {images.map((image, index) => (\n          <CarouselItem key={index}>\n            <div className=\"aspect-video relative\">\n              {/* If using Next.js Image */}\n              {/* <Image\n                src={image.src}\n                alt={image.alt || `Image of ${destinationName} ${index + 1}`}\n                layout=\"fill\"\n                objectFit=\"cover\"\n                className=\"rounded-lg\"\n              /> */}\n\n              {/* If using standard <img> */}\n              <img\n                src={image.src}\n                alt={image.alt || `Image of ${destinationName} ${index + 1}`}\n                className=\"w-full h-full object-cover\"\n                loading=\"lazy\"\n              />\n            </div>\n          </CarouselItem>\n        ))}\n      </CarouselContent>\n      <CarouselPrevious className=\"absolute left-4 top-1/2 -translate-y-1/2 z-10 bg-background/70 hover:bg-background/90 text-foreground\" />\n      <CarouselNext className=\"absolute right-4 top-1/2 -translate-y-1/2 z-10 bg-background/70 hover:bg-background/90 text-foreground\" />\n    </Carousel>\n  );\n};\n\nexport default ImageGallery;\n"
    },
    {
        "fileName": "src/components/destination_detail_itinerary_page/DestinationProfileCard.tsx",
        "content": "import React from 'react';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { MapPin, CalendarDays, Star } from 'lucide-react';\n\ninterface Destination {\n  name: string;\n  location: string;\n  description: string;\n  keyAttractions: string[];\n  bestSeasons: string[];\n  featuredHighlights: string[];\n}\n\ninterface DestinationProfileCardProps {\n  destination: Destination;\n}\n\nconst DestinationProfileCard: React.FC<DestinationProfileCardProps> = ({ destination }) => {\n  return (\n    <Card className=\"w-full shadow-md border border-border bg-card\">\n      <CardHeader>\n        <CardTitle className=\"text-2xl font-bold text-primary mb-1\">{destination.name}</CardTitle>\n        <div className=\"flex items-center text-muted-foreground text-sm mb-2\">\n          <MapPin className=\"mr-1.5 h-4 w-4\" />\n          <span>{destination.location}</span>\n        </div>\n        <CardDescription className=\"text-foreground text-base text-pretty\">{destination.description}</CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div>\n          <h4 className=\"font-semibold text-foreground mb-1.5\">Key Attractions:</h4>\n          <div className=\"flex flex-wrap gap-2\">\n            {destination.keyAttractions.map((attraction, index) => (\n              <Badge key={index} variant=\"secondary\" className=\"bg-secondary/20 text-secondary-foreground\">\n                <Star className=\"mr-1 h-3 w-3\" />\n                {attraction}\n              </Badge>\n            ))}\n          </div>\n        </div>\n        <div>\n          <h4 className=\"font-semibold text-foreground mb-1.5\">Best Season(s) to Visit:</h4>\n          <div className=\"flex flex-wrap gap-2\">\n            {destination.bestSeasons.map((season, index) => (\n              <Badge key={index} variant=\"outline\" className=\"border-primary/50 text-primary\">\n                <CalendarDays className=\"mr-1 h-3 w-3\" />\n                {season}\n              </Badge>\n            ))}\n          </div>\n        </div>\n         {destination.featuredHighlights && destination.featuredHighlights.length > 0 && (\n           <div>\n              <h4 className=\"font-semibold text-foreground mb-1.5\">Highlights:</h4>\n              <ul className=\"list-disc list-inside space-y-1 text-muted-foreground\">\n                {destination.featuredHighlights.map((highlight, index) => (\n                  <li key={index}>{highlight}</li>\n                ))}\n              </ul>\n           </div>\n         )}\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default DestinationProfileCard;\n"
    },
    {
        "fileName": "src/components/destination_detail_itinerary_page/DescriptiveTextBlock.tsx",
        "content": "import React from 'react';\n\ninterface DescriptiveTextBlockProps {\n  title?: string;\n  content: string; // Can be plain text or HTML string\n}\n\nconst DescriptiveTextBlock: React.FC<DescriptiveTextBlockProps> = ({ title, content }) => {\n  return (\n    <div className=\"bg-card p-6 rounded-lg shadow-sm border border-border\">\n      {title && <h3 className=\"text-xl font-semibold text-foreground mb-4\">{title}</h3>}\n      {/* Use prose for rich text formatting if content is HTML/Markdown */}\n      {/* Ensure @tailwindcss/typography plugin is installed and configured */}\n      <div\n        className=\"prose prose-sm sm:prose-base max-w-none dark:prose-invert prose-p:text-foreground/90 prose-headings:text-primary prose-strong:text-foreground prose-a:text-primary hover:prose-a:text-primary/80\"\n        dangerouslySetInnerHTML={{ __html: content }} // Be careful with XSS if content is user-generated\n      />\n      {/* Or for plain text: */}\n      {/* <p className=\"text-foreground/90 text-base text-pretty\">{content}</p> */}\n    </div>\n  );\n};\n\nexport default DescriptiveTextBlock;\n"
    },
    {
        "fileName": "src/components/destination_detail_itinerary_page/InteractiveMap.tsx",
        "content": "import React from 'react';\nimport { Map } from 'lucide-react';\n\ninterface Stop {\n  id: string;\n  name: string;\n  coordinates: [number, number]; // [longitude, latitude]\n}\n\ninterface Route {\n  id: string;\n  stops: Stop[];\n}\n\ninterface InteractiveMapProps {\n  routeData?: Route[]; // Placeholder for actual route data structure\n  // Add props for specific map library integration (e.g., Mapbox accessToken)\n}\n\nconst InteractiveMap: React.FC<InteractiveMapProps> = ({ routeData }) => {\n  // Placeholder component - Requires integration with a mapping library (e.g., Mapbox GL JS, Leaflet, Google Maps)\n  // The implementation would involve initializing the map, plotting markers, drawing routes, and handling interactions.\n\n  return (\n    <div className=\"w-full aspect-video bg-muted rounded-lg shadow-md border border-border flex flex-col items-center justify-center text-center p-4\">\n      <Map className=\"h-12 w-12 text-primary mb-4\" />\n      <h3 className=\"text-lg font-semibold text-foreground mb-2\">Interactive Route Map</h3>\n      <p className=\"text-muted-foreground text-sm\">\n        {routeData && routeData.length > 0\n          ? 'Map visualization would render here.'\n          : 'No route data available for visualization.'}\n      </p>\n      <p className=\"text-xs text-muted-foreground/70 mt-2\">\n        (Requires integration with a mapping library)\n      </p>\n      {/* Map container div - Map library will typically mount here */}\n      {/* <div id=\"map-container\" className=\"w-full h-full rounded-lg\"></div> */}\n    </div>\n  );\n};\n\nexport default InteractiveMap;\n"
    },
    {
        "fileName": "src/components/destination_detail_itinerary_page/ItineraryStepper.tsx",
        "content": "import React from 'react';\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion';\nimport { ItineraryCustomizationControls } from './ItineraryCustomizationControls'; // Assuming controls component\nimport { MapPin, Clock } from 'lucide-react';\n\ninterface Activity {\n  id: string;\n  name: string;\n  description: string;\n  time?: string;\n  location?: string;\n  cost?: number;\n  isCustomizable?: boolean;\n}\n\ninterface ItineraryDay {\n  day: number;\n  title: string;\n  activities: Activity[];\n}\n\ninterface ItineraryStepperProps {\n  itinerary: ItineraryDay[];\n  onAddActivity?: (day: number, activity: Activity) => void; // Placeholder callbacks\n  onRemoveActivity?: (day: number, activityId: string) => void;\n}\n\nconst ItineraryStepper: React.FC<ItineraryStepperProps> = ({ \n  itinerary = [], \n  onAddActivity, \n  onRemoveActivity \n}) => {\n  if (!itinerary || itinerary.length === 0) {\n    return <p className=\"text-muted-foreground p-4 text-center\">No itinerary details available.</p>;\n  }\n\n  return (\n    <Accordion type=\"single\" collapsible className=\"w-full space-y-2\">\n      {itinerary.map((dayData) => (\n        <AccordionItem key={dayData.day} value={`day-${dayData.day}`} className=\"bg-card border border-border rounded-lg shadow-sm overflow-hidden\">\n          <AccordionTrigger className=\"px-4 py-3 text-left hover:bg-muted/50 transition-colors\">\n            <span className=\"font-semibold text-primary\">Day {dayData.day}:</span>\n            <span className=\"ml-2 text-foreground font-medium flex-1 truncate\">{dayData.title}</span>\n          </AccordionTrigger>\n          <AccordionContent className=\"px-4 pt-2 pb-4 border-t border-border bg-background/50\">\n            <ul className=\"space-y-3 list-none pl-0\">\n              {dayData.activities.map((activity) => (\n                <li key={activity.id} className=\"relative pl-6 border-l-2 border-primary/50 py-1\">\n                   <div className=\"absolute left-[-9px] top-[7px] h-4 w-4 rounded-full bg-primary border-2 border-background\"></div>\n                   <div className=\"flex justify-between items-start\">\n                     <div>\n                        <p className=\"font-medium text-foreground\">{activity.name}</p>\n                        {activity.description && <p className=\"text-sm text-muted-foreground mt-0.5 text-pretty\">{activity.description}</p>}\n                        <div className=\"flex items-center space-x-3 mt-1 text-xs text-muted-foreground\">\n                          {activity.time && <span className=\"flex items-center\"><Clock className=\"mr-1 h-3 w-3\" /> {activity.time}</span>}\n                          {activity.location && <span className=\"flex items-center\"><MapPin className=\"mr-1 h-3 w-3\" /> {activity.location}</span>}\n                        </div>\n                     </div>\n                     {activity.isCustomizable && onRemoveActivity && (\n                        <ItineraryCustomizationControls\n                            activityId={activity.id}\n                            day={dayData.day}\n                            onRemove={() => onRemoveActivity(dayData.day, activity.id)}\n                            // onAdd could be triggered elsewhere or via AI suggestions\n                        />\n                     )}\n                   </div>\n                </li>\n              ))}\n            </ul>\n            {/* Optionally add a button here to add custom activities via onAddActivity */}\n          </AccordionContent>\n        </AccordionItem>\n      ))}\n    </Accordion>\n  );\n};\n\nexport default ItineraryStepper;\n"
    },
    {
        "fileName": "src/components/destination_detail_itinerary_page/ItineraryCustomizationControls.tsx",
        "content": "import React from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\nimport { MinusCircle, PlusCircle } from 'lucide-react';\n\ninterface ItineraryCustomizationControlsProps {\n  activityId: string;\n  day: number;\n  onRemove?: () => void;\n  onAdd?: () => void; // Add might be for variations or adding similar\n  // Could add other controls like dropdowns if needed\n}\n\nexport const ItineraryCustomizationControls: React.FC<ItineraryCustomizationControlsProps> = ({ onRemove, onAdd }) => {\n  return (\n    <TooltipProvider delayDuration={100}>\n      <div className=\"flex items-center space-x-1 flex-shrink-0 ml-2\">\n        {onAdd && (\n          <Tooltip>\n            <TooltipTrigger asChild>\n              <Button variant=\"ghost\" size=\"icon\" className=\"h-7 w-7 text-success hover:text-success hover:bg-success/10\" onClick={onAdd}>\n                <PlusCircle className=\"h-4 w-4\" />\n                <span className=\"sr-only\">Add Alternative/Similar</span>\n              </Button>\n            </TooltipTrigger>\n            <TooltipContent>\n              <p>Add Alternative/Similar</p>\n            </TooltipContent>\n          </Tooltip>\n        )}\n        {onRemove && (\n          <Tooltip>\n            <TooltipTrigger asChild>\n              <Button variant=\"ghost\" size=\"icon\" className=\"h-7 w-7 text-destructive hover:text-destructive hover:bg-destructive/10\" onClick={onRemove}>\n                <MinusCircle className=\"h-4 w-4\" />\n                <span className=\"sr-only\">Remove Activity</span>\n              </Button>\n            </TooltipTrigger>\n            <TooltipContent>\n              <p>Remove Activity</p>\n            </TooltipContent>\n          </Tooltip>\n        )}\n        {/* Add other controls like dropdowns here if needed */}\n      </div>\n    </TooltipProvider>\n  );\n};\n\n// Note: This component is likely used within ItineraryStepper, so default export might not be needed\n// but adhering to instruction to export default.\nexport default ItineraryCustomizationControls;\n"
    },
    {
        "fileName": "src/components/destination_detail_itinerary_page/CostOverview.tsx",
        "content": "import React from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Separator } from '@/components/ui/separator';\nimport { DollarSign } from 'lucide-react';\n\ninterface CostBreakdown {\n  [category: string]: number;\n}\n\ninterface CostOverviewProps {\n  totalCost: number;\n  breakdown?: CostBreakdown;\n  currency?: string;\n}\n\nconst CostOverview: React.FC<CostOverviewProps> = ({ totalCost, breakdown = {}, currency = 'USD' }) => {\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-US', { style: 'currency', currency: currency }).format(amount);\n  };\n\n  return (\n    <Card className=\"w-full shadow-sm border border-border bg-card sticky top-4\">\n      <CardHeader className=\"pb-3\">\n        <CardTitle className=\"text-lg font-semibold text-primary flex items-center\">\n          <DollarSign className=\"mr-2 h-5 w-5\" />\n          Estimated Trip Cost\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-3\">\n        <div className=\"text-center py-2\">\n          <p className=\"text-sm text-muted-foreground mb-1\">Total Estimated</p>\n          <p className=\"text-3xl font-bold text-foreground\">{formatCurrency(totalCost)}</p>\n        </div>\n\n        {Object.keys(breakdown).length > 0 && (\n          <>\n            <Separator className=\"my-3 bg-border\" />\n            <h4 className=\"text-sm font-medium text-muted-foreground mb-2\">Breakdown:</h4>\n            <ul className=\"space-y-1.5 text-sm\">\n              {Object.entries(breakdown).map(([category, cost]) => (\n                <li key={category} className=\"flex justify-between items-center\">\n                  <span className=\"text-foreground capitalize\">{category.replace(/_/g, ' ')}</span>\n                  <span className=\"font-medium text-foreground/90\">{formatCurrency(cost)}</span>\n                </li>\n              ))}\n            </ul>\n          </>\n        )}\n        <p className=\"text-xs text-muted-foreground/80 text-center pt-2\">\n          *Costs are estimates and may vary. Updates in real-time based on selections.\n        </p>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default CostOverview;\n"
    },
    {
        "fileName": "src/components/destination_detail_itinerary_page/AiSuggestionPanel.tsx",
        "content": "import React from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Wand2, PlusCircle } from 'lucide-react';\n\ninterface Suggestion {\n  id: string;\n  type: 'activity' | 'accommodation' | 'route';\n  title: string;\n  description?: string;\n  reason?: string; // Why AI suggested this\n}\n\ninterface AiSuggestionPanelProps {\n  suggestions: Suggestion[];\n  onAddSuggestion: (suggestion: Suggestion) => void;\n}\n\nconst AiSuggestionPanel: React.FC<AiSuggestionPanelProps> = ({ suggestions = [], onAddSuggestion }) => {\n  return (\n    <Card className=\"w-full shadow-sm border border-border bg-card\">\n      <CardHeader className=\"pb-3\">\n        <CardTitle className=\"text-lg font-semibold text-primary flex items-center\">\n          <Wand2 className=\"mr-2 h-5 w-5\" />\n          Personalized Suggestions\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-3\">\n        {suggestions.length === 0 ? (\n          <p className=\"text-sm text-muted-foreground text-center py-4\">No suggestions available right now.</p>\n        ) : (\n          <ul className=\"space-y-3\">\n            {suggestions.map((suggestion) => (\n              <li key={suggestion.id} className=\"p-3 rounded-md border border-border/70 bg-background/50 flex justify-between items-start gap-3\">\n                <div className=\"flex-1\">\n                  <p className=\"font-medium text-foreground text-sm\">{suggestion.title}</p>\n                  {suggestion.description && <p className=\"text-xs text-muted-foreground mt-0.5 text-pretty\">{suggestion.description}</p>}\n                  {suggestion.reason && <p className=\"text-xs text-primary/80 mt-1 italic\">Reason: {suggestion.reason}</p>}\n                </div>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  className=\"h-8 px-2 text-primary hover:bg-primary/10 hover:text-primary border-primary/50\"\n                  onClick={() => onAddSuggestion(suggestion)}\n                >\n                  <PlusCircle className=\"h-4 w-4 mr-1.5\" />\n                  Add\n                </Button>\n              </li>\n            ))}\n          </ul>\n        )}\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default AiSuggestionPanel;\n"
    },
    {
        "fileName": "src/components/destination_detail_itinerary_page/AccommodationList.tsx",
        "content": "import React from 'react';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Star, MapPin, BedDouble, DollarSign } from 'lucide-react';\nimport Image from 'next/image'; // Or use standard <img> if not using Next.js\n\ninterface Accommodation {\n  id: string;\n  name: string;\n  imageUrl: string;\n  rating: number;\n  pricePerNight: number;\n  currency?: string;\n  location?: string;\n  type?: string; // e.g., Hotel, Hostel, Apartment\n  detailsUrl?: string;\n}\n\ninterface AccommodationListProps {\n  accommodations: Accommodation[];\n  onViewDetails?: (id: string) => void;\n}\n\n// Internal component for rendering a single accommodation card\nconst AccommodationCard: React.FC<{ accommodation: Accommodation; onViewDetails?: (id: string) => void }> = ({ accommodation, onViewDetails }) => {\n  const formatCurrency = (amount: number, currency = 'USD') => {\n    return new Intl.NumberFormat('en-US', { style: 'currency', currency: currency }).format(amount);\n  };\n\n  return (\n    <Card className=\"overflow-hidden shadow-sm border border-border bg-card flex flex-col sm:flex-row card-hover-basic hover:shadow-md\">\n      <div className=\"relative w-full h-48 sm:w-1/3 sm:h-auto flex-shrink-0\">\n        {/* Use Next.js Image or standard img */}\n        <img src={accommodation.imageUrl} alt={accommodation.name} className=\"w-full h-full object-cover\" loading=\"lazy\" />\n      </div>\n      <CardContent className=\"p-4 flex flex-col justify-between flex-grow\">\n        <div>\n          <h3 className=\"text-lg font-semibold text-foreground mb-1\">{accommodation.name}</h3>\n          <div className=\"flex items-center space-x-4 text-sm text-muted-foreground mb-2\">\n            <span className=\"flex items-center font-medium text-amber-500\">\n              <Star className=\"h-4 w-4 mr-1 fill-current\" /> {accommodation.rating.toFixed(1)}\n            </span>\n            {accommodation.type && (\n              <span className=\"flex items-center\">\n                <BedDouble className=\"h-4 w-4 mr-1\" /> {accommodation.type}\n              </span>\n            )}\n          </div>\n          {accommodation.location && (\n            <p className=\"text-xs text-muted-foreground flex items-center mb-3\">\n              <MapPin className=\"h-3 w-3 mr-1\" /> {accommodation.location}\n            </p>\n          )}\n        </div>\n        <div className=\"flex justify-between items-center mt-2\">\n          <p className=\"text-lg font-semibold text-primary\">\n            {formatCurrency(accommodation.pricePerNight, accommodation.currency)}\n            <span className=\"text-xs font-normal text-muted-foreground\"> / night</span>\n          </p>\n          {onViewDetails && (\n             <Button variant=\"outline\" size=\"sm\" onClick={() => onViewDetails(accommodation.id)}>\n                View Details\n             </Button>\n          )}\n           {/* Or Link to detailsUrl if provided */}\n           {accommodation.detailsUrl && !onViewDetails && (\n             <Button asChild variant=\"outline\" size=\"sm\">\n                <a href={accommodation.detailsUrl} target=\"_blank\" rel=\"noopener noreferrer\">View Details</a>\n             </Button>\n           )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\nconst AccommodationList: React.FC<AccommodationListProps> = ({ accommodations = [], onViewDetails }) => {\n  return (\n    <div className=\"space-y-4\">\n      {accommodations.length === 0 ? (\n        <div className=\"text-center py-8 px-4 bg-muted rounded-lg\">\n          <p className=\"text-muted-foreground\">No accommodations found matching your criteria.</p>\n        </div>\n      ) : (\n        <div className=\"grid grid-cols-1 gap-4 stagger-container\">\n          {accommodations.map((acc) => (\n             <div key={acc.id} className=\"stagger-item\">\n                <AccommodationCard accommodation={acc} onViewDetails={onViewDetails} />\n             </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AccommodationList;\n"
    },
    {
        "fileName": "src/components/destination_detail_itinerary_page/AccommodationFilterGroup.tsx",
        "content": "import React from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Label } from '@/components/ui/label';\nimport { Input } from '@/components/ui/input';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Slider } from '@/components/ui/slider';\nimport { Button } from '@/components/ui/button';\nimport { Filter, RotateCcw } from 'lucide-react';\n\nexport interface Filters {\n  budget?: [number, number];\n  rating?: number; // Minimum rating\n  amenities?: string[];\n  type?: string;\n}\n\ninterface AccommodationFilterGroupProps {\n  initialFilters?: Filters;\n  availableAmenities?: string[];\n  availableTypes?: string[];\n  maxPrice?: number;\n  onFilterChange: (newFilters: Filters) => void;\n  onResetFilters?: () => void;\n}\n\nconst AccommodationFilterGroup: React.FC<AccommodationFilterGroupProps> = ({\n  initialFilters = {},\n  availableAmenities = ['WiFi', 'Pool', 'Parking', 'Gym', 'Pet Friendly'],\n  availableTypes = ['Hotel', 'Hostel', 'Apartment', 'Resort'],\n  maxPrice = 1000,\n  onFilterChange,\n  onResetFilters,\n}) => {\n  // Ideally, manage filter state here or lift it up\n  // For simplicity, this example calls onFilterChange directly, assuming parent manages state.\n\n  const handlePriceChange = (value: number[]) => {\n    onFilterChange({ ...initialFilters, budget: [value[0], value[1]] });\n  };\n\n  const handleRatingChange = (value: string) => {\n    onFilterChange({ ...initialFilters, rating: parseInt(value) });\n  };\n\n  const handleAmenityChange = (amenity: string, checked: boolean) => {\n    const currentAmenities = initialFilters.amenities || [];\n    const newAmenities = checked\n      ? [...currentAmenities, amenity]\n      : currentAmenities.filter(a => a !== amenity);\n    onFilterChange({ ...initialFilters, amenities: newAmenities });\n  };\n\n  const handleTypeChange = (type: string) => {\n     onFilterChange({ ...initialFilters, type: type === 'all' ? undefined : type });\n  }\n\n  return (\n    <Card className=\"w-full shadow-sm border border-border bg-card sticky top-4\">\n      <CardHeader className=\"flex flex-row items-center justify-between pb-3\">\n        <CardTitle className=\"text-lg font-semibold text-primary flex items-center\">\n          <Filter className=\"mr-2 h-5 w-5\" />\n          Filter Accommodations\n        </CardTitle>\n        {onResetFilters && (\n           <Button variant=\"ghost\" size=\"sm\" onClick={onResetFilters} className=\"text-muted-foreground hover:text-primary\">\n              <RotateCcw className=\"h-4 w-4 mr-1\"/>\n              Reset\n           </Button>\n        )}\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        {/* Price Range Slider */}\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"price-range\" className=\"font-medium\">Price Range (per night)</Label>\n          <Slider\n            id=\"price-range\"\n            min={0}\n            max={maxPrice}\n            step={10}\n            defaultValue={initialFilters.budget || [0, maxPrice]}\n            onValueCommit={handlePriceChange} // Use onValueCommit to avoid too many updates while dragging\n            className=\"mt-4\"\n          />\n          <div className=\"flex justify-between text-sm text-muted-foreground\">\n            <span>${initialFilters.budget?.[0] ?? 0}</span>\n            <span>${initialFilters.budget?.[1] ?? maxPrice}</span>\n          </div>\n        </div>\n\n        {/* Rating Select */}\n         <div className=\"space-y-2\">\n           <Label htmlFor=\"rating-select\" className=\"font-medium\">Minimum Rating</Label>\n            <Select onValueChange={handleRatingChange} value={initialFilters.rating?.toString()}> \n              <SelectTrigger id=\"rating-select\">\n                 <SelectValue placeholder=\"Any Rating\" />\n              </SelectTrigger>\n              <SelectContent>\n                 <SelectItem value=\"0\">Any Rating</SelectItem>\n                 <SelectItem value=\"4\">4 Stars & Up</SelectItem>\n                 <SelectItem value=\"3\">3 Stars & Up</SelectItem>\n                 <SelectItem value=\"2\">2 Stars & Up</SelectItem>\n              </SelectContent>\n            </Select>\n         </div>\n\n        {/* Accommodation Type Radio/Select */}\n        <div className=\"space-y-2\">\n          <Label className=\"font-medium\">Accommodation Type</Label>\n          <RadioGroup defaultValue={initialFilters.type || 'all'} onValueChange={handleTypeChange} className=\"flex flex-wrap gap-x-4 gap-y-2\">\n              <div className=\"flex items-center space-x-2\">\n                 <RadioGroupItem value=\"all\" id=\"type-all\" />\n                 <Label htmlFor=\"type-all\">All</Label>\n               </div>\n            {availableTypes.map(type => (\n               <div key={type} className=\"flex items-center space-x-2\">\n                 <RadioGroupItem value={type} id={`type-${type}`} />\n                 <Label htmlFor={`type-${type}`}>{type}</Label>\n               </div>\n            ))}\n          </RadioGroup>\n        </div>\n\n        {/* Amenities Checkboxes */}\n        <div className=\"space-y-2\">\n          <Label className=\"font-medium\">Amenities</Label>\n          <div className=\"grid grid-cols-2 gap-x-4 gap-y-2\">\n            {availableAmenities.map(amenity => (\n              <div key={amenity} className=\"flex items-center space-x-2\">\n                <Checkbox \n                    id={`amenity-${amenity}`}\n                    checked={initialFilters.amenities?.includes(amenity)}\n                    onCheckedChange={(checked) => handleAmenityChange(amenity, !!checked)}\n                 />\n                <Label htmlFor={`amenity-${amenity}`} className=\"text-sm font-normal\">{amenity}</Label>\n              </div>\n            ))}\n          </div>\n        </div>\n\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default AccommodationFilterGroup;\n"
    },
    {
        "fileName": "src/components/destination_detail_itinerary_page/ActionButtons.tsx",
        "content": "import React from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Heart, Share2, Users, Send } from 'lucide-react';\n\ninterface ActionButtonsProps {\n  isInWishlist?: boolean;\n  onToggleWishlist?: () => void;\n  onBookNow?: () => void;\n  onStartGroupPlanning?: () => void;\n}\n\nconst ActionButtons: React.FC<ActionButtonsProps> = ({\n  isInWishlist = false,\n  onToggleWishlist,\n  onBookNow,\n  onStartGroupPlanning,\n}) => {\n  return (\n    <div className=\"flex flex-wrap gap-2 sticky top-4 z-10 bg-background/80 backdrop-blur-sm p-2 rounded-lg justify-center sm:justify-start glass-effect\">\n      {onToggleWishlist && (\n        <Button variant={isInWishlist ? \"secondary\" : \"outline\"} onClick={onToggleWishlist} className=\"flex-grow sm:flex-grow-0\">\n          <Heart className={`h-4 w-4 mr-2 ${isInWishlist ? 'fill-destructive text-destructive' : ''}`} />\n          {isInWishlist ? 'In Wishlist' : 'Add to Wishlist'}\n        </Button>\n      )}\n      {onBookNow && (\n        <Button onClick={onBookNow} className=\"flex-grow sm:flex-grow-0 bg-primary hover:bg-primary/90 text-primary-foreground\">\n          <Send className=\"h-4 w-4 mr-2\" />\n          Book Now\n        </Button>\n      )}\n      {onStartGroupPlanning && (\n        <Button variant=\"outline\" onClick={onStartGroupPlanning} className=\"flex-grow sm:flex-grow-0\">\n          <Users className=\"h-4 w-4 mr-2\" />\n          Start Group Planning\n        </Button>\n      )}\n       {/* Optional Share Button */}\n        {/* <Button variant=\"outline\" size=\"icon\">\n            <Share2 className=\"h-4 w-4\" />\n            <span className=\"sr-only\">Share</span>\n        </Button> */} \n    </div>\n  );\n};\n\nexport default ActionButtons;\n"
    },
    {
        "fileName": "src/components/destination_detail_itinerary_page/GroupInviteModal.tsx",
        "content": "import React, { useState } from 'react';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogDescription,\n  DialogFooter,\n  DialogClose,\n} from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Copy, Link, Mail, QrCode, UserPlus } from 'lucide-react';\nimport { Separator } from '@/components/ui/separator';\n\ninterface GroupInviteModalProps {\n  isOpen: boolean;\n  onOpenChange: (isOpen: boolean) => void;\n  tripName: string; // Name of the trip/destination being planned\n  onInvite: (emails: string[], message?: string) => void;\n}\n\nconst GroupInviteModal: React.FC<GroupInviteModalProps> = ({\n  isOpen,\n  onOpenChange,\n  tripName,\n  onInvite,\n}) => {\n  const [emails, setEmails] = useState<string>('');\n  const [message, setMessage] = useState<string>('');\n  const [inviteLink, setInviteLink] = useState<string>('https://example.com/invite/xyz123'); // Placeholder link\n\n  const handleInviteClick = () => {\n    const emailList = emails.split(/[,;\\s]+/).filter(email => email.trim() !== '');\n    if (emailList.length > 0) {\n      onInvite(emailList, message);\n      // Optionally close modal after invite: onOpenChange(false);\n      // Optionally clear fields\n      // setEmails('');\n      // setMessage('');\n    }\n    // Add error handling for invalid emails if needed\n  };\n\n  const handleCopyToClipboard = () => {\n    navigator.clipboard.writeText(inviteLink);\n    // Add toast notification for success\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[525px] bg-card border-border\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center text-xl text-primary\">\n            <Users className=\"h-6 w-6 mr-2\" />\n            Invite Friends to Plan '{tripName}'\n          </DialogTitle>\n          <DialogDescription className=\"text-muted-foreground\">\n            Collaborate on your itinerary and trip details with friends.\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"grid gap-4 py-4\">\n          {/* Email Invite Section */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"emails\" className=\"flex items-center\">\n              <Mail className=\"h-4 w-4 mr-2 text-muted-foreground\"/>\n              Invite via Email\n            </Label>\n            <Input\n              id=\"emails\"\n              type=\"text\"\n              placeholder=\"Enter emails separated by commas or spaces\"\n              value={emails}\n              onChange={(e) => setEmails(e.target.value)}\n              className=\"bg-input border-input\"\n            />\n          </div>\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"message\">Optional Message</Label>\n            <Textarea\n              id=\"message\"\n              placeholder=\"Add a personal message (optional)\"\n              value={message}\n              onChange={(e) => setMessage(e.target.value)}\n              className=\"bg-input border-input\"\n              rows={3}\n            />\n          </div>\n           <Button onClick={handleInviteClick} disabled={!emails.trim()} className=\"w-full sm:w-auto\">\n              <UserPlus className=\"h-4 w-4 mr-2\"/> Send Invites\n           </Button>\n        </div>\n\n        <Separator className=\"my-4 bg-border\"/>\n\n        {/* Shareable Link Section */}\n        <div className=\"space-y-3\">\n            <Label htmlFor=\"invite-link\" className=\"flex items-center\">\n               <Link className=\"h-4 w-4 mr-2 text-muted-foreground\"/>\n                Shareable Invite Link\n            </Label>\n            <div className=\"flex items-center space-x-2\">\n               <Input\n                  id=\"invite-link\"\n                  value={inviteLink}\n                  readOnly\n                  className=\"flex-grow bg-input border-input\"\n                />\n                <Button variant=\"outline\" size=\"icon\" onClick={handleCopyToClipboard}>\n                  <Copy className=\"h-4 w-4\" />\n                  <span className=\"sr-only\">Copy link</span>\n                </Button>\n            </div>\n           {/* Placeholder for QR Code generation */}\n           {/* <Button variant=\"outline\" className=\"w-full sm:w-auto mt-2\">\n              <QrCode className=\"h-4 w-4 mr-2\"/> Generate QR Code\n           </Button> */} \n        </div>\n\n        <DialogFooter className=\"mt-6\">\n          <DialogClose asChild>\n            <Button type=\"button\" variant=\"secondary\">\n              Close\n            </Button>\n          </DialogClose>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nexport default GroupInviteModal;\n"
    },
    {
        "fileName": "src/components/hotel_details_booking_page/HotelImageGallery.tsx",
        "content": "import React, { useState, useCallback } from 'react';\nimport useEmblaCarousel from 'embla-carousel-react';\nimport Autoplay from 'embla-carousel-autoplay';\nimport { ChevronLeft, ChevronRight, X, Expand } from 'lucide-react';\nimport { Dialog, DialogContent, DialogTrigger } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { cn } from '@/lib/utils'; // Assuming utils for cn function exists\n\ninterface HotelImageGalleryProps {\n  images: string[];\n  videos?: string[]; // Placeholder for potential video integration\n}\n\nconst HotelImageGallery: React.FC<HotelImageGalleryProps> = ({ images = [], videos = [] }) => {\n  const [emblaRef, emblaApi] = useEmblaCarousel({ loop: true }, [Autoplay({ delay: 5000 })]);\n  const [selectedIndex, setSelectedIndex] = useState(0);\n  const [isLightboxOpen, setIsLightboxOpen] = useState(false);\n\n  const scrollPrev = useCallback(() => emblaApi?.scrollPrev(), [emblaApi]);\n  const scrollNext = useCallback(() => emblaApi?.scrollNext(), [emblaApi]);\n\n  React.useEffect(() => {\n    if (!emblaApi) return;\n    const onSelect = () => {\n      setSelectedIndex(emblaApi.selectedScrollSnap());\n    };\n    emblaApi.on('select', onSelect);\n    onSelect(); // Set initial index\n    return () => {\n      emblaApi.off('select', onSelect);\n    };\n  }, [emblaApi]);\n\n  // Combine images and video thumbnails if needed\n  const galleryItems = [...images]; // Add video thumbnails later if required\n\n  if (!galleryItems || galleryItems.length === 0) {\n    return <div className=\"aspect-video bg-muted rounded-lg center text-muted-foreground\">No images available</div>;\n  }\n\n  return (\n    <section className=\"relative group animate-fade-in\" aria-label=\"Hotel Image Gallery\">\n      <Dialog open={isLightboxOpen} onOpenChange={setIsLightboxOpen}>\n        <div className=\"overflow-hidden rounded-lg border bg-card\" ref={emblaRef}>\n          <div className=\"flex\">\n            {galleryItems.map((src, index) => (\n              <div className=\"flex-grow-0 flex-shrink-0 w-full min-w-0 relative\" key={index}>\n                <DialogTrigger asChild>\n                  <button\n                    className=\"block w-full aspect-video cursor-zoom-in relative\"\n                    onClick={() => setSelectedIndex(index)} // Open lightbox at clicked image\n                    aria-label={`View image ${index + 1} fullscreen`}\n                  >\n                    <img\n                      src={src}\n                      alt={`Hotel view ${index + 1}`}\n                      className=\"object-cover w-full h-full\"\n                      loading=\"lazy\"\n                    />\n                    <div className=\"absolute inset-0 bg-black/20 opacity-0 group-hover:opacity-100 transition-opacity duration-300 center\">\n                      <Expand className=\"w-8 h-8 text-white\" />\n                    </div>\n                  </button>\n                </DialogTrigger>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Carousel Controls */}\n        {galleryItems.length > 1 && (\n          <>\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              className=\"absolute left-2 top-1/2 -translate-y-1/2 rounded-full opacity-0 group-hover:opacity-100 transition-opacity duration-300 z-10 h-10 w-10 bg-background/80 hover:bg-background\"\n              onClick={scrollPrev}\n              aria-label=\"Previous image\"\n            >\n              <ChevronLeft className=\"h-5 w-5\" />\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              className=\"absolute right-2 top-1/2 -translate-y-1/2 rounded-full opacity-0 group-hover:opacity-100 transition-opacity duration-300 z-10 h-10 w-10 bg-background/80 hover:bg-background\"\n              onClick={scrollNext}\n              aria-label=\"Next image\"\n            >\n              <ChevronRight className=\"h-5 w-5\" />\n            </Button>\n            <div className=\"absolute bottom-4 left-1/2 -translate-x-1/2 z-10 flex space-x-2\">\n                {galleryItems.map((_, index) => (\n                  <button\n                    key={index}\n                    onClick={() => emblaApi?.scrollTo(index)}\n                    className={cn(\n                      'h-2 w-2 rounded-full transition-colors duration-200',\n                      index === selectedIndex ? 'bg-primary' : 'bg-muted hover:bg-muted-foreground/50'\n                    )}\n                    aria-label={`Go to image ${index + 1}`}\n                    aria-current={index === selectedIndex}\n                  />\n                ))}\n            </div>\n          </>\n        )}\n\n        {/* Lightbox Content */}\n        <DialogContent className=\"max-w-none w-[95vw] h-[90vh] p-0 border-0 bg-transparent flex items-center justify-center\">\n          <div className=\"relative w-full h-full\">\n            <img\n              src={galleryItems[selectedIndex]}\n              alt={`Hotel view ${selectedIndex + 1} fullscreen`}\n              className=\"object-contain w-full h-full\"\n            />\n             {/* Ideally, Lightbox would have its own carousel controls */}\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"absolute top-4 right-4 rounded-full bg-black/50 text-white hover:bg-black/75\"\n              onClick={() => setIsLightboxOpen(false)}\n              aria-label=\"Close lightbox\"\n            >\n              <X className=\"h-6 w-6\" />\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </section>\n  );\n};\n\nexport default HotelImageGallery;\n"
    },
    {
        "fileName": "src/components/hotel_details_booking_page/HotelPrimaryInfo.tsx",
        "content": "import React from 'react';\nimport { Star } from 'lucide-react';\n\ninterface HotelPrimaryInfoProps {\n  name: string;\n  starRating: number; // e.g., 4 or 5\n  averageRating: number; // e.g., 4.5\n  reviewCount: number;\n}\n\nconst HotelPrimaryInfo: React.FC<HotelPrimaryInfoProps> = ({\n  name,\n  starRating,\n  averageRating,\n  reviewCount,\n}) => {\n  const renderStars = (rating: number) => {\n    const fullStars = Math.floor(rating);\n    const stars = [];\n    for (let i = 0; i < 5; i++) {\n      stars.push(\n        <Star\n          key={i}\n          className={`w-4 h-4 ${i < fullStars ? 'text-yellow-400 fill-yellow-400' : 'text-muted-foreground/50'}`}\n        />\n      );\n    }\n    return stars;\n  };\n\n  return (\n    <div className=\"space-y-2 animate-fade-in\">\n      <h1 className=\"text-2xl md:text-3xl font-bold text-foreground\">{name}</h1>\n      <div className=\"flex flex-wrap items-center gap-x-4 gap-y-1 text-sm text-muted-foreground\">\n        <div className=\"flex items-center gap-1\" title={`${starRating}-star hotel`}>\n          {renderStars(starRating)}\n          <span className=\"ml-1\">{starRating}-Star Hotel</span>\n        </div>\n        <div className=\"flex items-center gap-1\">\n          <Star className=\"w-4 h-4 text-primary fill-primary\" />\n          <span className=\"font-semibold text-foreground\">{averageRating.toFixed(1)}</span>\n          <span>({reviewCount.toLocaleString()} reviews)</span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default HotelPrimaryInfo;\n"
    },
    {
        "fileName": "src/components/hotel_details_booking_page/PriceAvailabilityDisplay.tsx",
        "content": "import React from 'react';\nimport { Badge } from '@/components/ui/badge'; // Assuming Shadcn Badge component\n\ninterface PriceAvailabilityDisplayProps {\n  basePrice: number;\n  discount?: number; // Amount of discount\n  currency?: string;\n  isAvailable: boolean;\n  selectedDates?: { from?: Date; to?: Date }; // Optional: Show 'for selected dates' text\n  guestCount?: number; // Optional: Show context\n  roomType?: string; // Optional: Show context\n}\n\nconst PriceAvailabilityDisplay: React.FC<PriceAvailabilityDisplayProps> = ({\n  basePrice,\n  discount = 0,\n  currency = 'USD',\n  isAvailable,\n  selectedDates,\n  guestCount,\n  roomType,\n}) => {\n  const finalPrice = basePrice - discount;\n  const hasSelection = selectedDates?.from && selectedDates?.to && guestCount && roomType;\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-US', { style: 'currency', currency }).format(amount);\n  };\n\n  return (\n    <div className=\"p-4 border rounded-lg bg-card animate-fade-in\">\n      <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-2\">\n        <div className=\"flex items-baseline gap-2\">\n          <span className=\"text-2xl font-bold text-primary\">{formatCurrency(finalPrice)}</span>\n          {discount > 0 && (\n            <span className=\"text-sm line-through text-muted-foreground\">\n              {formatCurrency(basePrice)}\n            </span>\n          )}\n          <span className=\"text-sm text-muted-foreground\">per night</span>\n        </div>\n        {isAvailable ? (\n          <Badge variant=\"default\" className=\"bg-success hover:bg-success text-success-foreground w-fit\">\n            Available\n          </Badge>\n        ) : (\n          <Badge variant=\"destructive\" className=\"w-fit\">Not Available</Badge>\n        )}\n      </div>\n      {hasSelection && (\n         <p className=\"text-xs text-muted-foreground mt-2\">\n           Price based on selected dates, {guestCount} guest(s), and {roomType} room.\n         </p>\n      )}\n      {!isAvailable && hasSelection && (\n        <p className=\"text-xs text-destructive mt-1\">Try different dates or options.</p>\n      )}\n       {discount > 0 && (\n          <p className=\"text-xs text-success mt-1\">Discount applied!</p>\n      )}\n    </div>\n  );\n};\n\nexport default PriceAvailabilityDisplay;\n"
    },
    {
        "fileName": "src/components/hotel_details_booking_page/HotelAmenities.tsx",
        "content": "import React from 'react';\nimport * as LucideIcons from 'lucide-react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\n\n// Helper type for valid Lucide icon names\ntype LucideIconName = keyof typeof LucideIcons;\n\ninterface Amenity {\n  iconName: LucideIconName;\n  name: string;\n}\n\ninterface HotelAmenitiesProps {\n  amenities: Amenity[];\n}\n\n// Function to safely get a Lucide icon component\nconst getLucideIcon = (name: LucideIconName): React.ElementType => {\n  const IconComponent = LucideIcons[name];\n  // Return a fallback or default icon if the name is invalid\n  return IconComponent || LucideIcons.HelpCircle; // Default to HelpCircle if not found\n};\n\nconst HotelAmenities: React.FC<HotelAmenitiesProps> = ({ amenities = [] }) => {\n  if (!amenities || amenities.length === 0) {\n    return null; // Don't render the section if there are no amenities\n  }\n\n  return (\n    <Card className=\"animate-fade-in\">\n      <CardHeader>\n        <CardTitle className=\"text-lg font-semibold\">Amenities</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-x-4 gap-y-3\">\n          {amenities.map((amenity, index) => {\n            const Icon = getLucideIcon(amenity.iconName);\n            return (\n              <div key={index} className=\"flex items-center gap-2 stagger-item\">\n                <Icon className=\"w-5 h-5 text-primary flex-shrink-0\" aria-hidden=\"true\" />\n                <span className=\"text-sm text-muted-foreground\">{amenity.name}</span>\n              </div>\n            );\n          })}\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default HotelAmenities;\n"
    },
    {
        "fileName": "src/components/hotel_details_booking_page/LocationMap.tsx",
        "content": "import React from 'react';\nimport { MapPin } from 'lucide-react';\n\ninterface LocationMapProps {\n  latitude: number;\n  longitude: number;\n  zoomLevel?: number;\n  hotelName?: string;\n  // markers?: { lat: number; lng: number; label: string }[]; // For nearby attractions\n}\n\nconst LocationMap: React.FC<LocationMapProps> = ({\n  latitude,\n  longitude,\n  zoomLevel = 14,\n  hotelName = 'Hotel Location'\n  // markers = [],\n}) => {\n  // Placeholder component: In a real app, integrate a map library (e.g., react-leaflet, google-maps-react)\n  // using the provided latitude, longitude, zoomLevel, and markers.\n\n  // Example static image URL (replace with dynamic map library)\n  // Note: Requires configuring API keys and usage limits for production\n  const staticMapImageUrl = `https://via.placeholder.com/600x400.png?text=Map+Placeholder+(${latitude.toFixed(4)},${longitude.toFixed(4)})`;\n\n  return (\n    <div className=\"animate-fade-in\">\n      <h3 className=\"text-lg font-semibold mb-3 text-foreground\">Location</h3>\n      <div className=\"aspect-video w-full rounded-lg border bg-muted overflow-hidden relative center text-muted-foreground\">\n        {/* Replace this div with your actual map component */}\n        <div className='center flex-col p-4 text-center'>\n            <MapPin className='w-12 h-12 text-primary mb-4'/>\n            <p className='font-medium text-foreground'>{hotelName}</p>\n            <p className='text-sm mb-4'>Map library integration needed</p>\n            <p className='text-xs'>Lat: {latitude.toFixed(4)}, Lng: {longitude.toFixed(4)}</p>\n            {/* <img src={staticMapImageUrl} alt={`Map showing location of ${hotelName}`} className=\"object-cover w-full h-full\" /> */} \n        </div>\n         {/* Add map controls (zoom, pan) and markers if using an interactive library */} \n      </div>\n    </div>\n  );\n};\n\nexport default LocationMap;\n"
    },
    {
        "fileName": "src/components/hotel_details_booking_page/BookingOptionsForm.tsx",
        "content": "import React from 'react';\nimport { useForm, Controller } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport * as z from 'zod';\nimport { format } from 'date-fns';\nimport { Calendar as CalendarIcon, Plus, Minus } from 'lucide-react';\n\nimport { cn } from '@/lib/utils';\nimport { Button } from '@/components/ui/button';\nimport { Calendar } from '@/components/ui/calendar';\nimport { Label } from '@/components/ui/label';\nimport { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Input } from '@/components/ui/input'; // Used indirectly by number counter\n\n// Define Zod schema for validation\nconst bookingFormSchema = z.object({\n  dates: z.object({\n    from: z.date({ required_error: 'Check-in date is required.' }),\n    to: z.date({ required_error: 'Check-out date is required.' }),\n  }).refine(data => data.from < data.to, {\n    message: 'Check-out date must be after check-in date.',\n    path: ['to'], // Error attached to the 'to' date field\n  }),\n  roomType: z.string().min(1, 'Please select a room type.'),\n  guests: z.number().min(1, 'At least one guest is required.').max(10, 'Maximum 10 guests allowed.'), // Example range\n});\n\ntype BookingFormData = z.infer<typeof bookingFormSchema>;\n\ninterface BookingOptionsFormProps {\n  onSubmit: (data: BookingFormData) => void;\n  defaultValues?: Partial<BookingFormData>;\n  availableRoomTypes: { value: string; label: string }[];\n  isLoading?: boolean; // To disable form during submission\n}\n\nconst BookingOptionsForm: React.FC<BookingOptionsFormProps> = ({\n  onSubmit,\n  defaultValues,\n  availableRoomTypes = [],\n  isLoading = false,\n}) => {\n  const { register, handleSubmit, control, watch, setValue, formState: { errors } } = useForm<BookingFormData>({\n    resolver: zodResolver(bookingFormSchema),\n    defaultValues: {\n      guests: 1,\n      ...defaultValues,\n    },\n  });\n\n  const guests = watch('guests');\n\n  const handleGuestChange = (amount: number) => {\n    const currentGuests = guests || 0;\n    const newGuests = Math.max(1, Math.min(10, currentGuests + amount)); // Clamp between 1 and 10\n    setValue('guests', newGuests, { shouldValidate: true });\n  };\n\n  const handleFormSubmit = (data: BookingFormData) => {\n    onSubmit(data);\n  };\n\n  return (\n    <form onSubmit={handleSubmit(handleFormSubmit)} className=\"space-y-6 animate-fade-in\">\n      {/* Date Range Picker */}\n      <div className=\"space-y-2\">\n        <Label htmlFor=\"date-range\" className={cn(errors.dates && 'text-destructive')}>Dates</Label>\n        <Controller\n          name=\"dates\"\n          control={control}\n          render={({ field }) => (\n            <Popover>\n              <PopoverTrigger asChild>\n                <Button\n                  id=\"date-range\"\n                  variant={\"outline\"}\n                  className={cn(\n                    'w-full justify-start text-left font-normal',\n                    !field.value?.from && 'text-muted-foreground',\n                    errors.dates && 'border-destructive'\n                  )}\n                >\n                  <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                  {field.value?.from ? (\n                    field.value.to ? (\n                      <>{format(field.value.from, 'LLL dd, y')} - {format(field.value.to, 'LLL dd, y')}</>\n                    ) : (\n                      format(field.value.from, 'LLL dd, y')\n                    )\n                  ) : (\n                    <span>Pick a date range</span>\n                  )}\n                </Button>\n              </PopoverTrigger>\n              <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                <Calendar\n                  initialFocus\n                  mode=\"range\"\n                  defaultMonth={field.value?.from}\n                  selected={{ from: field.value?.from!, to: field.value?.to! }} // Use non-null assertion as Controller handles value\n                  onSelect={(range) => field.onChange(range)}\n                  numberOfMonths={2}\n                  disabled={(date) => date < new Date(new Date().setHours(0, 0, 0, 0))} // Disable past dates\n                />\n              </PopoverContent>\n            </Popover>\n          )}\n        />\n         {(errors.dates?.from || errors.dates?.to || errors.dates?.root) && (\n          <p className=\"text-sm text-destructive\">{errors.dates?.from?.message || errors.dates?.to?.message || errors.dates?.root?.message}</p>\n         )}\n      </div>\n\n      {/* Room Type Select */}\n      <div className=\"space-y-2\">\n        <Label htmlFor=\"roomType\" className={cn(errors.roomType && 'text-destructive')}>Room Type</Label>\n        <Controller\n          name=\"roomType\"\n          control={control}\n          render={({ field }) => (\n            <Select onValueChange={field.onChange} defaultValue={field.value} disabled={isLoading}>\n              <SelectTrigger id=\"roomType\" className={cn(errors.roomType && 'border-destructive')}>\n                <SelectValue placeholder=\"Select a room\" />\n              </SelectTrigger>\n              <SelectContent>\n                {availableRoomTypes.map((room) => (\n                  <SelectItem key={room.value} value={room.value}>\n                    {room.label}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          )}\n        />\n        {errors.roomType && <p className=\"text-sm text-destructive\">{errors.roomType.message}</p>}\n      </div>\n\n      {/* Guest Counter */}\n      <div className=\"space-y-2\">\n        <Label htmlFor=\"guests\" className={cn(errors.guests && 'text-destructive')}>Guests</Label>\n        <div className=\"flex items-center space-x-2\">\n          <Button type=\"button\" variant=\"outline\" size=\"icon\" onClick={() => handleGuestChange(-1)} disabled={guests <= 1 || isLoading} aria-label=\"Decrease guests\">\n            <Minus className=\"h-4 w-4\" />\n          </Button>\n          {/* Hidden input for react-hook-form registration */}\n          <input type=\"hidden\" {...register('guests', { valueAsNumber: true })} />\n          {/* Display div acting like an input */}\n          <div className=\"flex-1 text-center border border-input rounded-md px-3 py-2 text-sm bg-background\">\n            {guests} guest{guests !== 1 ? 's' : ''}\n          </div>\n          <Button type=\"button\" variant=\"outline\" size=\"icon\" onClick={() => handleGuestChange(1)} disabled={guests >= 10 || isLoading} aria-label=\"Increase guests\">\n            <Plus className=\"h-4 w-4\" />\n          </Button>\n        </div>\n        {errors.guests && <p className=\"text-sm text-destructive\">{errors.guests.message}</p>}\n      </div>\n\n      {/* Submit Button - Often placed outside this form in a parent structure, but included here for completeness */}\n      {/* <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n        {isLoading ? 'Checking...' : 'Check Availability / Update Price'}\n      </Button> */}\n    </form>\n  );\n};\n\nexport default BookingOptionsForm;\n"
    },
    {
        "fileName": "src/components/hotel_details_booking_page/BookingCostSummary.tsx",
        "content": "import React from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Separator } from '@/components/ui/separator';\n\ninterface BookingCostSummaryProps {\n  subtotal: number;\n  taxes?: number;\n  fees?: number;\n  discountAmount?: number;\n  discountLabel?: string;\n  total: number;\n  currency?: string;\n  nights?: number; // Optional: to display price per night breakdown\n}\n\nconst BookingCostSummary: React.FC<BookingCostSummaryProps> = ({\n  subtotal,\n  taxes = 0,\n  fees = 0,\n  discountAmount = 0,\n  discountLabel = 'Discount',\n  total,\n  currency = 'USD',\n  nights,\n}) => {\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-US', { style: 'currency', currency }).format(amount);\n  };\n\n  return (\n    <Card className=\"animate-scale-in\">\n      <CardHeader>\n        <CardTitle className=\"text-lg font-semibold\">Booking Summary</CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-3\">\n        {nights && subtotal > 0 && (\n           <div className=\"flex justify-between text-sm text-muted-foreground\">\n            <span>{formatCurrency(subtotal / nights)} x {nights} night{nights !== 1 ? 's' : ''}</span>\n            <span>{formatCurrency(subtotal)}</span>\n          </div>\n        )}\n        {!nights && subtotal > 0 && (\n             <div className=\"flex justify-between text-sm text-muted-foreground\">\n                <span>Room Subtotal</span>\n                <span>{formatCurrency(subtotal)}</span>\n             </div>\n        )}\n\n        {(taxes > 0 || fees > 0) && (\n          <div className=\"flex justify-between text-sm text-muted-foreground\">\n            <span>Taxes & Fees</span>\n            <span>{formatCurrency(taxes + fees)}</span>\n          </div>\n        )}\n\n        {discountAmount > 0 && (\n          <div className=\"flex justify-between text-sm text-success\">\n            <span>{discountLabel}</span>\n            <span>-{formatCurrency(discountAmount)}</span>\n          </div>\n        )}\n\n        <Separator className=\"my-2\" />\n\n        <div className=\"flex justify-between text-base font-semibold text-foreground\">\n          <span>Total Price</span>\n          <span>{formatCurrency(total)}</span>\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default BookingCostSummary;\n"
    },
    {
        "fileName": "src/components/hotel_details_booking_page/BookingFeedbackDisplay.tsx",
        "content": "import React from 'react';\nimport { AlertCircle, CheckCircle, Info, TriangleAlert } from 'lucide-react';\nimport { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert'; // Assuming Shadcn Alert\nimport { cn } from '@/lib/utils';\n\ntype FeedbackType = 'error' | 'success' | 'info' | 'warning';\n\ninterface BookingFeedbackDisplayProps {\n  message: string | null;\n  type: FeedbackType;\n  title?: string;\n}\n\nconst icons: Record<FeedbackType, React.ElementType> = {\n  error: AlertCircle,\n  success: CheckCircle,\n  info: Info,\n  warning: TriangleAlert,\n};\n\nconst alertVariants: Record<FeedbackType, 'default' | 'destructive'> = {\n  error: 'destructive',\n  success: 'default', // Use default styling, maybe add specific success colors later if needed\n  info: 'default',\n  warning: 'default', // Use default styling, maybe add specific warning colors later if needed\n};\n\nconst colorClasses: Record<FeedbackType, string> = {\n    error: 'border-destructive text-destructive',\n    success: 'border-success text-success',\n    info: 'border-blue-500 text-blue-600 dark:border-blue-400 dark:text-blue-400', // Example info colors\n    warning: 'border-warning text-warning',\n}\n\nconst iconColorClasses: Record<FeedbackType, string> = {\n    error: 'text-destructive',\n    success: 'text-success',\n    info: 'text-blue-600 dark:text-blue-400',\n    warning: 'text-warning',\n}\n\nconst BookingFeedbackDisplay: React.FC<BookingFeedbackDisplayProps> = ({ message, type, title }) => {\n  if (!message) {\n    return null;\n  }\n\n  const Icon = icons[type];\n  const variant = alertVariants[type];\n\n  // Determine default title if not provided\n  const defaultTitles: Record<FeedbackType, string> = {\n    error: 'Error',\n    success: 'Success',\n    info: 'Information',\n    warning: 'Warning',\n  };\n  const alertTitle = title || defaultTitles[type];\n\n  return (\n    <Alert\n        variant={variant} // Primarily for destructive variant\n        className={cn(\n            'animate-fade-in',\n            colorClasses[type], // Apply specific border/text colors\n            variant !== 'destructive' && 'bg-background' // Ensure non-destructive variants have appropriate background\n        )}\n    >\n      <Icon className={cn(\"h-4 w-4\", iconColorClasses[type])} />\n      <AlertTitle>{alertTitle}</AlertTitle>\n      <AlertDescription>{message}</AlertDescription>\n    </Alert>\n  );\n};\n\nexport default BookingFeedbackDisplay;\n"
    },
    {
        "fileName": "src/components/hotel_details_booking_page/BookingActions.tsx",
        "content": "import React from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Bookmark, Users, Loader2 } from 'lucide-react';\n\ninterface BookingActionsProps {\n  onBook: () => void;\n  onSaveToWishlist: () => void;\n  onAddToGroup: () => void;\n  isBookingLoading?: boolean;\n  isWishlistLoading?: boolean;\n  isGroupLoading?: boolean;\n  canBook?: boolean; // e.g., based on form validity or availability\n}\n\nconst BookingActions: React.FC<BookingActionsProps> = ({\n  onBook,\n  onSaveToWishlist,\n  onAddToGroup,\n  isBookingLoading = false,\n  isWishlistLoading = false,\n  isGroupLoading = false,\n  canBook = true,\n}) => {\n  return (\n    <div className=\"flex flex-col sm:flex-row gap-3 animate-fade-in\">\n      <Button\n        size=\"lg\"\n        className=\"w-full sm:flex-1\" // Takes full width on small screens, distributes space on larger\n        onClick={onBook}\n        disabled={isBookingLoading || isWishlistLoading || isGroupLoading || !canBook}\n      >\n        {isBookingLoading ? (\n          <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n        ) : null}\n        {isBookingLoading ? 'Processing...' : 'Book / Reserve Now'}\n      </Button>\n      <div className=\"flex gap-3\">\n        <Button\n          variant=\"outline\"\n          size=\"lg\"\n          className=\"flex-1\"\n          onClick={onSaveToWishlist}\n          disabled={isBookingLoading || isWishlistLoading || isGroupLoading}\n          aria-label=\"Save to Wishlist\"\n        >\n          {isWishlistLoading ? (\n            <Loader2 className=\"h-4 w-4 animate-spin\" />\n          ) : (\n            <Bookmark className=\"h-4 w-4\" />\n          )}\n           <span className=\"ml-2 hidden sm:inline\">Wishlist</span>\n        </Button>\n        <Button\n          variant=\"outline\"\n          size=\"lg\"\n          className=\"flex-1\"\n          onClick={onAddToGroup}\n          disabled={isBookingLoading || isWishlistLoading || isGroupLoading}\n           aria-label=\"Add to Group Itinerary\"\n        >\n          {isGroupLoading ? (\n            <Loader2 className=\"h-4 w-4 animate-spin\" />\n          ) : (\n            <Users className=\"h-4 w-4\" />\n          )}\n          <span className=\"ml-2 hidden sm:inline\">Group</span>\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default BookingActions;\n"
    },
    {
        "fileName": "src/components/hotel_details_booking_page/HotelReviews.tsx",
        "content": "import React, { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Separator } from '@/components/ui/separator';\nimport { Button } from '@/components/ui/button';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Star, Loader2 } from 'lucide-react';\nimport { format } from 'date-fns';\n\ninterface Review {\n  id: string;\n  author: string;\n  avatarUrl?: string;\n  rating: number; // e.g., 4\n  date: string | Date;\n  title?: string;\n  text: string;\n}\n\ninterface HotelReviewsProps {\n  reviews: Review[];\n  averageRating: number;\n  totalReviews: number;\n  onLoadMore?: () => void;\n  isLoadingMore?: boolean;\n  hasMore?: boolean;\n  onSortChange?: (sortBy: string) => void;\n  initialSort?: string;\n}\n\nconst StarRating: React.FC<{ rating: number }> = ({ rating }) => {\n  const fullStars = Math.floor(rating);\n  const halfStar = rating % 1 >= 0.5;\n  const emptyStars = 5 - fullStars - (halfStar ? 1 : 0);\n\n  return (\n    <div className=\"flex items-center\">\n      {[...Array(fullStars)].map((_, i) => (\n        <Star key={`full-${i}`} className=\"w-4 h-4 text-yellow-400 fill-yellow-400\" />\n      ))}\n      {/* Placeholder for half star logic if needed */}\n      {/* {halfStar && <StarHalf key=\"half\" className=\"w-4 h-4 text-yellow-400 fill-yellow-400\" />} */}\n      {[...Array(emptyStars)].map((_, i) => (\n        <Star key={`empty-${i}`} className=\"w-4 h-4 text-muted-foreground/30\" />\n      ))}\n    </div>\n  );\n};\n\nconst HotelReviews: React.FC<HotelReviewsProps> = ({\n  reviews = [],\n  averageRating,\n  totalReviews,\n  onLoadMore,\n  isLoadingMore = false,\n  hasMore = false,\n  onSortChange,\n  initialSort = 'newest',\n}) => {\n  const [sortBy, setSortBy] = useState<string>(initialSort);\n\n  const handleSortChange = (value: string) => {\n    setSortBy(value);\n    onSortChange?.(value);\n  };\n\n  return (\n    <Card className=\"animate-fade-in\">\n      <CardHeader className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n        <div>\n          <CardTitle className=\"text-xl font-semibold\">Reviews & Ratings</CardTitle>\n          <div className=\"flex items-center gap-2 mt-1 text-sm text-muted-foreground\">\n             <StarRating rating={averageRating} />\n             <span className=\"font-medium text-foreground\">{averageRating.toFixed(1)} out of 5</span>\n             <span>({totalReviews.toLocaleString()} reviews)</span>\n          </div>\n        </div>\n        <Select value={sortBy} onValueChange={handleSortChange}>\n          <SelectTrigger className=\"w-full sm:w-[180px]\">\n            <SelectValue placeholder=\"Sort by\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"newest\">Newest</SelectItem>\n            <SelectItem value=\"highest\">Highest Rated</SelectItem>\n            <SelectItem value=\"lowest\">Lowest Rated</SelectItem>\n          </SelectContent>\n        </Select>\n      </CardHeader>\n      <CardContent>\n        {reviews.length === 0 ? (\n          <p className=\"text-muted-foreground text-center py-4\">No reviews yet.</p>\n        ) : (\n          <div className=\"space-y-6\">\n            {reviews.map((review, index) => (\n              <React.Fragment key={review.id}>\n                <div className=\"flex gap-4 stagger-item\">\n                  <Avatar className=\"h-10 w-10 border\">\n                    <AvatarImage src={review.avatarUrl} alt={review.author} />\n                    <AvatarFallback>{review.author.charAt(0).toUpperCase()}</AvatarFallback>\n                  </Avatar>\n                  <div className=\"flex-1\">\n                    <div className=\"flex flex-col sm:flex-row justify-between sm:items-center mb-1\">\n                      <p className=\"font-semibold text-foreground\">{review.author}</p>\n                      <span className=\"text-xs text-muted-foreground\">\n                        {format(new Date(review.date), 'PPP')} {/* Pretty date format */}\n                      </span>\n                    </div>\n                    <div className=\"flex items-center gap-2 mb-2\">\n                        <StarRating rating={review.rating} />\n                        {review.title && <p className='font-medium text-sm text-foreground'>{review.title}</p>}\n                    </div>\n                    <p className=\"text-sm text-foreground/90 leading-relaxed text-pretty\">\n                      {review.text}\n                    </p>\n                  </div>\n                </div>\n                {index < reviews.length - 1 && <Separator />}\n              </React.Fragment>\n            ))}\n          </div>\n        )}\n\n        {hasMore && onLoadMore && (\n          <div className=\"mt-6 text-center\">\n            <Button\n              variant=\"outline\"\n              onClick={onLoadMore}\n              disabled={isLoadingMore}\n            >\n              {isLoadingMore ? (\n                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n              ) : null}\n              {isLoadingMore ? 'Loading...' : 'Load More Reviews'}\n            </Button>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default HotelReviews;\n"
    },
    {
        "fileName": "src/components/group_booking_trip_management_page/GroupBookingStepper.tsx",
        "content": "import React, { useState } from 'react';\nimport { cn } from \"@/lib/utils\"; // Assuming lib/utils for cn\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { CheckCircle, Circle } from 'lucide-react';\n\n// Define the steps for the wizard\nconst steps = [\n  { id: 1, name: 'Create/Join Group', description: 'Start a new group or join an existing one.' },\n  { id: 2, name: 'Invite Members', description: 'Send invites via email or link.' },\n  { id: 3, name: 'Plan Itinerary', description: 'Collaboratively decide on activities.' },\n  { id: 4, name: 'Confirm Participants', description: 'Finalize the group list.' },\n  { id: 5, name: 'Group Payment', description: 'Manage costs and payments.' },\n];\n\ninterface GroupBookingStepperProps {\n  initialStep?: number;\n}\n\nconst GroupBookingStepper: React.FC<GroupBookingStepperProps> = ({ initialStep = 1 }) => {\n  const [currentStep, setCurrentStep] = useState<number>(initialStep);\n\n  const handleNext = () => {\n    setCurrentStep((prev) => Math.min(prev + 1, steps.length));\n  };\n\n  const handlePrev = () => {\n    setCurrentStep((prev) => Math.max(prev - 1, 1));\n  };\n\n  return (\n    <Card className=\"w-full max-w-3xl mx-auto my-8 animate-fade-in\">\n      <CardHeader>\n        <CardTitle className=\"text-center text-xl md:text-2xl font-semibold text-primary\">Group Booking Progress</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"flex flex-col md:flex-row items-start md:items-center justify-between space-y-4 md:space-y-0 md:space-x-4 mb-8 overflow-x-auto pb-4 no-scrollbar\">\n          {steps.map((step, index) => {\n            const stepIndex = index + 1;\n            const isActive = stepIndex === currentStep;\n            const isCompleted = stepIndex < currentStep;\n\n            return (\n              <div key={step.id} className=\"flex items-center space-x-2 flex-shrink-0\">\n                <div\n                  className={cn(\n                    'flex items-center justify-center w-8 h-8 rounded-full border-2 transition-colors duration-300',\n                    isCompleted ? 'bg-primary border-primary text-primary-foreground'\n                      : isActive ? 'border-primary text-primary'\n                      : 'border-border text-muted-foreground'\n                  )}\n                >\n                  {isCompleted ? <CheckCircle size={16} /> : <span className=\"font-medium text-sm\">{step.id}</span>}\n                </div>\n                <div className=\"flex flex-col\">\n                  <span className={cn(\n                    'text-sm font-medium transition-colors duration-300',\n                    isCompleted ? 'text-primary'\n                      : isActive ? 'text-foreground'\n                      : 'text-muted-foreground'\n                  )}>\n                    {step.name}\n                  </span>\n                  {/* Optional: Show description on hover or always */}\n                  {/* <span className=\"text-xs text-muted-foreground hidden md:block\">{step.description}</span> */}\n                </div>\n                {stepIndex < steps.length && (\n                  <div className=\"hidden md:block h-px w-8 bg-border flex-grow mx-2\"></div>\n                )}\n              </div>\n            );\n          })}\n        </div>\n\n        {/* Placeholder for the content of the current step */}\n        <div className=\"mt-6 p-4 border border-border rounded-lg min-h-[150px] animate-slide-up bg-card\">\n          <h3 className=\"text-lg font-semibold mb-2\">{steps[currentStep - 1].name}</h3>\n          <p className=\"text-muted-foreground\">{steps[currentStep - 1].description}</p>\n          <p className=\"mt-4\">Content for step {currentStep} goes here...</p>\n        </div>\n\n        {/* Navigation Buttons */}\n        <div className=\"mt-8 flex justify-between\">\n          <Button onClick={handlePrev} disabled={currentStep === 1} variant=\"outline\">\n            Previous\n          </Button>\n          <Button onClick={handleNext} disabled={currentStep === steps.length}>\n            Next\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default GroupBookingStepper;\n"
    },
    {
        "fileName": "src/components/group_booking_trip_management_page/InviteControls.tsx",
        "content": "import React, { useState } from 'react';\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/components/ui/use-toast\"; // Assuming Shadcn's useToast hook\nimport { Mail, Link, Send, Copy } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\ninterface InviteControlsProps {\n  groupId?: string; // Example prop\n}\n\nconst InviteControls: React.FC<InviteControlsProps> = ({ groupId }) => {\n  const [email, setEmail] = useState<string>('');\n  const [inviteLink, setInviteLink] = useState<string>('');\n  const [isGeneratingLink, setIsGeneratingLink] = useState<boolean>(false);\n  const [isSendingEmail, setIsSendingEmail] = useState<boolean>(false);\n  const { toast } = useToast();\n\n  const handleSendEmailInvite = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!email) {\n      toast({ title: \"Error\", description: \"Please enter an email address.\", variant: \"destructive\" });\n      return;\n    }\n    setIsSendingEmail(true);\n    // Simulate API call\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    console.log(`Sending invite to ${email} for group ${groupId}`);\n    setIsSendingEmail(false);\n    setEmail('');\n    toast({ title: \"Success\", description: `Invite sent to ${email}.` });\n  };\n\n  const handleGenerateLink = async () => {\n    setIsGeneratingLink(true);\n    // Simulate API call to generate a link\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    const generatedLink = `https://example.com/join?group=${groupId || 'demo123'}&token=${Math.random().toString(36).substring(7)}`;\n    setInviteLink(generatedLink);\n    setIsGeneratingLink(false);\n    toast({ title: \"Link Generated\", description: \"Shareable invite link created.\" });\n  };\n\n  const handleCopyLink = () => {\n    navigator.clipboard.writeText(inviteLink)\n      .then(() => {\n        toast({ title: \"Copied!\", description: \"Invite link copied to clipboard.\" });\n      })\n      .catch(err => {\n        console.error('Failed to copy:', err);\n        toast({ title: \"Error\", description: \"Failed to copy link.\", variant: \"destructive\" });\n      });\n  };\n\n  return (\n    <Card className=\"w-full animate-scale-in\">\n      <CardHeader>\n        <CardTitle>Invite Members</CardTitle>\n        <CardDescription>Add people to your trip group.</CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        {/* Email Invite Form */}\n        <form onSubmit={handleSendEmailInvite} className=\"space-y-3\">\n          <Label htmlFor=\"email-invite\" className=\"flex items-center\">\n            <Mail className=\"mr-2 h-4 w-4 text-muted-foreground\" />\n            Invite via Email\n          </Label>\n          <div className=\"flex space-x-2\">\n            <Input\n              id=\"email-invite\"\n              type=\"email\"\n              placeholder=\"friend@example.com\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              disabled={isSendingEmail}\n              required\n              className=\"flex-grow\"\n            />\n            <Button type=\"submit\" disabled={isSendingEmail} className=\"whitespace-nowrap\">\n              <Send className=\"mr-2 h-4 w-4\" />\n              {isSendingEmail ? 'Sending...' : 'Send Invite'}\n            </Button>\n          </div>\n        </form>\n\n        {/* Invite Link Section */}\n        <div className=\"space-y-3\">\n          <Label htmlFor=\"invite-link-input\" className=\"flex items-center\">\n            <Link className=\"mr-2 h-4 w-4 text-muted-foreground\" />\n            Invite via Link\n          </Label>\n          {inviteLink ? (\n            <div className=\"flex space-x-2\">\n              <Input\n                id=\"invite-link-input\"\n                type=\"text\"\n                readOnly\n                value={inviteLink}\n                className=\"flex-grow bg-muted\"\n              />\n              <Button variant=\"outline\" size=\"icon\" onClick={handleCopyLink} title=\"Copy link\">\n                <Copy className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          ) : (\n            <Button onClick={handleGenerateLink} disabled={isGeneratingLink} variant=\"secondary\" className=\"w-full md:w-auto\">\n              <Link className=\"mr-2 h-4 w-4\" />\n              {isGeneratingLink ? 'Generating...' : 'Generate Invite Link'}\n            </Button>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default InviteControls;\n"
    },
    {
        "fileName": "src/components/group_booking_trip_management_page/GroupStatusTracker.tsx",
        "content": "import React from 'react';\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { UserCheck, UserX, UserClock, MailWarning } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\n// Define member status types\ntype MemberStatus = 'accepted' | 'pending' | 'declined';\n\n// Define the structure for a group member\ninterface GroupMember {\n  id: string;\n  name: string;\n  avatarUrl?: string;\n  status: MemberStatus;\n}\n\ninterface GroupStatusTrackerProps {\n  members: GroupMember[];\n  onRemind?: (memberId: string) => void; // Optional callback for reminding\n}\n\n// Helper to get initials from name\nconst getInitials = (name: string): string => {\n  return name\n    .split(' ')\n    .map(n => n[0])\n    .slice(0, 2)\n    .join('')\n    .toUpperCase();\n};\n\n// Helper to get status styles and icon\nconst getStatusAttributes = (status: MemberStatus) => {\n  switch (status) {\n    case 'accepted':\n      return {\n        icon: <UserCheck className=\"h-4 w-4 mr-1\" />,\n        badgeVariant: 'success' as const, // Use specific literal type\n        text: 'Accepted',\n      };\n    case 'pending':\n      return {\n        icon: <UserClock className=\"h-4 w-4 mr-1\" />,\n        badgeVariant: 'secondary' as const,\n        text: 'Pending',\n      };\n    case 'declined':\n      return {\n        icon: <UserX className=\"h-4 w-4 mr-1\" />,\n        badgeVariant: 'destructive' as const,\n        text: 'Declined',\n      };\n    default:\n      return {\n        icon: null,\n        badgeVariant: 'outline' as const,\n        text: 'Unknown',\n      };\n  }\n};\n\nconst GroupStatusTracker: React.FC<GroupStatusTrackerProps> = ({ members, onRemind }) => {\n  return (\n    <Card className=\"w-full animate-fade-in\">\n      <CardHeader>\n        <CardTitle>Group Members & Status</CardTitle>\n        <CardDescription>Track who has joined the trip group.</CardDescription>\n      </CardHeader>\n      <CardContent>\n        {members.length === 0 ? (\n          <p className=\"text-muted-foreground text-center py-4\">No members invited yet.</p>\n        ) : (\n          <ul className=\"space-y-4\">\n            {members.map((member) => {\n              const { icon, badgeVariant, text } = getStatusAttributes(member.status);\n              return (\n                <li\n                  key={member.id}\n                  className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between p-3 bg-card border border-border rounded-lg stagger-item\"\n                >\n                  <div className=\"flex items-center space-x-3 mb-2 sm:mb-0\">\n                    <Avatar className=\"h-9 w-9\">\n                      <AvatarImage src={member.avatarUrl} alt={member.name} />\n                      <AvatarFallback>{getInitials(member.name)}</AvatarFallback>\n                    </Avatar>\n                    <span className=\"font-medium text-foreground\">{member.name}</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2 w-full sm:w-auto justify-end\">\n                    <Badge variant={badgeVariant} className=\"flex items-center capitalize text-xs px-2 py-1\">\n                      {icon}\n                      {text}\n                    </Badge>\n                    {member.status === 'pending' && onRemind && (\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => onRemind(member.id)}\n                        className=\"text-xs text-primary hover:text-primary/80\"\n                      >\n                        <MailWarning className=\"h-4 w-4 mr-1\" />\n                        Remind\n                      </Button>\n                    )}\n                  </div>\n                </li>\n              );\n            })}\n          </ul>\n        )}\n      </CardContent>\n    </Card>\n  );\n};\n\n// Example Usage Data (replace with actual props)\nconst exampleMembers: GroupMember[] = [\n  { id: '1', name: 'Alice Wonderland', avatarUrl: '/avatars/alice.png', status: 'accepted' },\n  { id: '2', name: 'Bob The Builder', avatarUrl: '/avatars/bob.png', status: 'pending' },\n  { id: '3', name: 'Charlie Chaplin', status: 'declined' },\n  { id: '4', name: 'Diana Prince', avatarUrl: '/avatars/diana.png', status: 'pending' },\n];\n\n// Example parent component providing the handler\n/*\nconst ParentComponent = () => {\n  const handleRemind = (memberId: string) => {\n    console.log(`Reminding member ${memberId}...`);\n    // Add logic to send reminder\n  };\n\n  return <GroupStatusTracker members={exampleMembers} onRemind={handleRemind} />;\n}\n*/\n\nexport default GroupStatusTracker;\n"
    },
    {
        "fileName": "src/components/group_booking_trip_management_page/GroupChatWidget.tsx",
        "content": "import React, { useState, useRef, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Send, Paperclip, User } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\n// Define the structure for a chat message\ninterface ChatMessage {\n  id: string;\n  senderId: string;\n  senderName: string;\n  senderAvatar?: string;\n  text: string;\n  timestamp: Date;\n}\n\ninterface GroupChatWidgetProps {\n  messages: ChatMessage[];\n  currentUserId: string; // To differentiate user's messages\n  onSendMessage: (text: string, file?: File) => void;\n  isLoading?: boolean; // To show loading state\n}\n\n// Helper to get initials\nconst getInitials = (name: string): string => {\n    return name.split(' ').map(n => n[0]).slice(0, 2).join('').toUpperCase();\n};\n\nconst GroupChatWidget: React.FC<GroupChatWidgetProps> = ({\n  messages,\n  currentUserId,\n  onSendMessage,\n  isLoading = false,\n}) => {\n  const [newMessage, setNewMessage] = useState<string>('');\n  const [attachment, setAttachment] = useState<File | null>(null);\n  const scrollAreaRef = useRef<HTMLDivElement>(null);\n\n  // Scroll to bottom when new messages arrive\n  useEffect(() => {\n    if (scrollAreaRef.current) {\n      const scrollViewport = scrollAreaRef.current.querySelector('[data-radix-scroll-area-viewport]');\n      if (scrollViewport) {\n         scrollViewport.scrollTop = scrollViewport.scrollHeight;\n      }\n    }\n  }, [messages]);\n\n  const handleSend = () => {\n    if (newMessage.trim() || attachment) {\n      onSendMessage(newMessage.trim(), attachment || undefined);\n      setNewMessage('');\n      setAttachment(null);\n      // Clear the file input visually if needed (requires input ref)\n    }\n  };\n\n  const handleKeyPress = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === 'Enter' && !event.shiftKey) {\n      event.preventDefault(); // Prevent newline\n      handleSend();\n    }\n  };\n\n  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n     if (event.target.files && event.target.files[0]) {\n        setAttachment(event.target.files[0]);\n        // Optionally display file name or preview\n     }\n  };\n\n  return (\n    <Card className=\"w-full h-[500px] flex flex-col animate-slide-up\">\n      <CardHeader className=\"border-b border-border\">\n        <CardTitle>Group Chat</CardTitle>\n        <CardDescription>Coordinate with your trip members.</CardDescription>\n      </CardHeader>\n      <CardContent className=\"flex-grow p-0 overflow-hidden\">\n        <ScrollArea className=\"h-full p-4\" ref={scrollAreaRef}>\n          <div className=\"space-y-4\">\n            {messages.map((msg) => {\n              const isCurrentUser = msg.senderId === currentUserId;\n              return (\n                <div\n                  key={msg.id}\n                  className={cn(\n                    'flex items-start space-x-3',\n                    isCurrentUser ? 'justify-end' : 'justify-start'\n                  )}\n                >\n                  {!isCurrentUser && (\n                    <Avatar className=\"h-8 w-8 flex-shrink-0\">\n                      <AvatarImage src={msg.senderAvatar} />\n                      <AvatarFallback>{getInitials(msg.senderName)}</AvatarFallback>\n                    </Avatar>\n                  )}\n                  <div\n                    className={cn(\n                      'max-w-[75%] rounded-lg px-3 py-2 text-sm',\n                      isCurrentUser\n                        ? 'bg-primary text-primary-foreground'\n                        : 'bg-muted text-foreground'\n                    )}\n                  >\n                    {!isCurrentUser && <p className=\"font-semibold text-xs mb-1\">{msg.senderName}</p>}\n                    <p className=\"whitespace-pre-wrap\">{msg.text}</p>\n                    <p className=\"text-xs opacity-70 mt-1 text-right\">\n                      {msg.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\n                    </p>\n                  </div>\n                  {isCurrentUser && (\n                     <Avatar className=\"h-8 w-8 flex-shrink-0\">\n                       {/* Assuming current user avatar logic exists */}\n                       <AvatarFallback><User size={16}/></AvatarFallback>\n                     </Avatar>\n                  )}\n                </div>\n              );\n            })}\n             {isLoading && <p className=\"text-center text-muted-foreground text-sm animate-pulse-gentle\">Loading messages...</p>}\n             {messages.length === 0 && !isLoading && <p className=\"text-center text-muted-foreground text-sm\">No messages yet. Start the conversation!</p>}\n          </div>\n        </ScrollArea>\n      </CardContent>\n      <CardFooter className=\"p-4 border-t border-border\">\n         {attachment && (\n            <div className=\"text-xs text-muted-foreground mb-2\">Attached: {attachment.name}</div>\n         )}\n        <div className=\"flex w-full items-center space-x-2\">\n          <Input\n            placeholder=\"Type your message...\"\n            value={newMessage}\n            onChange={(e) => setNewMessage(e.target.value)}\n            onKeyPress={handleKeyPress}\n            className=\"flex-grow\"\n            disabled={isLoading}\n          />\n           <label htmlFor=\"file-upload\" className=\"cursor-pointer\">\n              <Button variant=\"ghost\" size=\"icon\" asChild disabled={isLoading}>\n                 <span><Paperclip className=\"h-5 w-5\" /></span>\n              </Button>\n           </label>\n           <input id=\"file-upload\" type=\"file\" className=\"hidden\" onChange={handleFileChange} disabled={isLoading}/>\n          <Button onClick={handleSend} size=\"icon\" disabled={isLoading || (!newMessage.trim() && !attachment)}>\n            <Send className=\"h-5 w-5\" />\n          </Button>\n        </div>\n         {/* Optional: Typing indicator area */}\n         {/* <p className=\"text-xs text-muted-foreground mt-1\">Alice is typing...</p> */}\n      </CardFooter>\n    </Card>\n  );\n};\n\nexport default GroupChatWidget;\n"
    },
    {
        "fileName": "src/components/group_booking_trip_management_page/ItineraryEditor.tsx",
        "content": "import React, { useState } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\"; // Assuming Shadcn's Textarea\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogFooter, DialogClose } from \"@/components/ui/dialog\"; // Assuming Shadcn's Dialog\nimport { Calendar, Clock, MapPin, PlusCircle, Edit, Trash2, MessageSquare, ThumbsUp } from 'lucide-react';\nimport { format } from 'date-fns'; // From date-fns library\nimport { cn } from '@/lib/utils';\n\n// Define the structure for an itinerary item\ninterface ItineraryItem {\n  id: string;\n  title: string;\n  date: Date;\n  time?: string; // Optional time\n  location?: string;\n  description?: string;\n  suggestedBy?: string; // For collaborative suggestions\n  votes?: number; // For voting mechanism\n}\n\ninterface ItineraryEditorProps {\n  items: ItineraryItem[];\n  onAddItem: (item: Omit<ItineraryItem, 'id'>) => void;\n  onUpdateItem: (item: ItineraryItem) => void;\n  onDeleteItem: (itemId: string) => void;\n  // Add props for voting, commenting if needed\n}\n\nconst ItineraryEditor: React.FC<ItineraryEditorProps> = ({\n  items,\n  onAddItem,\n  onUpdateItem,\n  onDeleteItem,\n}) => {\n  const [isAdding, setIsAdding] = useState(false);\n  const [editingItem, setEditingItem] = useState<ItineraryItem | null>(null);\n\n  // Form state for adding/editing\n  const [newItemTitle, setNewItemTitle] = useState('');\n  const [newItemDate, setNewItemDate] = useState<Date | undefined>(new Date());\n  const [newItemTime, setNewItemTime] = useState('');\n  const [newItemLocation, setNewItemLocation] = useState('');\n  const [newItemDescription, setNewItemDescription] = useState('');\n\n  const resetForm = () => {\n    setNewItemTitle('');\n    setNewItemDate(new Date());\n    setNewItemTime('');\n    setNewItemLocation('');\n    setNewItemDescription('');\n    setIsAdding(false);\n    setEditingItem(null);\n  };\n\n  const handleAddSubmit = () => {\n    if (!newItemTitle || !newItemDate) return; // Basic validation\n    onAddItem({\n      title: newItemTitle,\n      date: newItemDate,\n      time: newItemTime,\n      location: newItemLocation,\n      description: newItemDescription,\n      // suggestedBy: 'currentUser' // Add user context if needed\n    });\n    resetForm();\n  };\n\n  const handleEditSubmit = () => {\n    if (!editingItem || !newItemTitle || !newItemDate) return;\n    onUpdateItem({\n      ...editingItem,\n      title: newItemTitle,\n      date: newItemDate,\n      time: newItemTime,\n      location: newItemLocation,\n      description: newItemDescription,\n    });\n    resetForm();\n  };\n\n  const openEditDialog = (item: ItineraryItem) => {\n    setEditingItem(item);\n    setNewItemTitle(item.title);\n    setNewItemDate(item.date);\n    setNewItemTime(item.time || '');\n    setNewItemLocation(item.location || '');\n    setNewItemDescription(item.description || '');\n    // Trigger dialog manually if not using DialogTrigger\n  };\n\n  const ItineraryForm = (\n    <div className=\"space-y-4\">\n      <Input placeholder=\"Activity Title\" value={newItemTitle} onChange={e => setNewItemTitle(e.target.value)} />\n      {/* Replace with Shadcn DatePicker if available */}\n      <Input type=\"date\" value={newItemDate ? format(newItemDate, 'yyyy-MM-dd') : ''} onChange={e => setNewItemDate(new Date(e.target.value))} />\n      <Input type=\"time\" placeholder=\"Time (optional)\" value={newItemTime} onChange={e => setNewItemTime(e.target.value)} />\n      <Input placeholder=\"Location (optional)\" value={newItemLocation} onChange={e => setNewItemLocation(e.target.value)} />\n      <Textarea placeholder=\"Description (optional)\" value={newItemDescription} onChange={e => setNewItemDescription(e.target.value)} />\n    </div>\n  );\n\n  return (\n    <Card className=\"w-full animate-fade-in\">\n      <CardHeader className=\"flex flex-row justify-between items-center\">\n        <div>\n          <CardTitle>Group Itinerary</CardTitle>\n          <CardDescription>Plan your trip activities together.</CardDescription>\n        </div>\n        <Dialog open={isAdding || !!editingItem} onOpenChange={(open) => !open && resetForm()}>\n          <DialogTrigger asChild>\n            <Button onClick={() => setIsAdding(true)}>\n              <PlusCircle className=\"mr-2 h-4 w-4\" /> Add Activity\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"sm:max-w-[425px]\">\n            <DialogHeader>\n              <DialogTitle>{editingItem ? 'Edit Activity' : 'Add New Activity'}</DialogTitle>\n            </DialogHeader>\n            {ItineraryForm}\n            <DialogFooter>\n              <DialogClose asChild>\n                 <Button variant=\"outline\">Cancel</Button>\n              </DialogClose>\n              <Button onClick={editingItem ? handleEditSubmit : handleAddSubmit}> {editingItem ? 'Save Changes' : 'Add Activity'}</Button>\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n      </CardHeader>\n      <CardContent>\n        {items.length === 0 ? (\n          <p className=\"text-muted-foreground text-center py-4\">No itinerary items added yet.</p>\n        ) : (\n          <ul className=\"space-y-4 stagger-container\">\n            {items.sort((a,b) => a.date.getTime() - b.date.getTime()).map((item) => (\n              <li key={item.id} className=\"p-4 border border-border rounded-lg bg-card stagger-item\">\n                <div className=\"flex justify-between items-start mb-2\">\n                  <h4 className=\"font-semibold text-lg text-foreground\">{item.title}</h4>\n                  <div className=\"flex space-x-1\">\n                     <Dialog>\n                        <DialogTrigger asChild>\n                            <Button variant=\"ghost\" size=\"icon\" className=\"h-7 w-7\" onClick={() => openEditDialog(item)}><Edit className=\"h-4 w-4\" /></Button>\n                        </DialogTrigger>\n                        {/* Reuse DialogContent structure if needed, controlled by editingItem state */} \n                     </Dialog>\n                    <Button variant=\"ghost\" size=\"icon\" className=\"h-7 w-7 text-destructive hover:text-destructive/80\" onClick={() => onDeleteItem(item.id)}><Trash2 className=\"h-4 w-4\" /></Button>\n                  </div>\n                </div>\n                <div className=\"text-sm text-muted-foreground space-y-1\">\n                  <div className=\"flex items-center\"><Calendar className=\"mr-2 h-4 w-4\" /> {format(item.date, 'PPP')}</div>\n                  {item.time && <div className=\"flex items-center\"><Clock className=\"mr-2 h-4 w-4\" /> {item.time}</div>}\n                  {item.location && <div className=\"flex items-center\"><MapPin className=\"mr-2 h-4 w-4\" /> {item.location}</div>}\n                </div>\n                {item.description && <p className=\"mt-2 text-sm text-pretty text-foreground/90\">{item.description}</p>}\n                 {/* Optional: Collaborative features */}\n                 <div className=\"mt-3 pt-3 border-t border-border/50 flex justify-between items-center text-xs text-muted-foreground\">\n                    {item.suggestedBy && <span>Suggested by: {item.suggestedBy}</span>}\n                    <div className=\"flex space-x-3\">\n                        {/* Example vote/comment buttons */} \n                        <button className=\"flex items-center hover:text-primary transition-colors\"><ThumbsUp size={14} className=\"mr-1\"/> ({item.votes ?? 0})</button>\n                        <button className=\"flex items-center hover:text-primary transition-colors\"><MessageSquare size={14} className=\"mr-1\"/> Comment</button>\n                    </div>\n                 </div>\n              </li>\n            ))}\n          </ul>\n        )}\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default ItineraryEditor;\n"
    },
    {
        "fileName": "src/components/group_booking_trip_management_page/HotelSelectionPanel.tsx",
        "content": "import React, { useState } from 'react';\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { AspectRatio } from \"@/components/ui/aspect-ratio\"; // Assuming Shadcn's AspectRatio\nimport {\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselNext,\n  CarouselPrevious,\n} from \"@/components/ui/carousel\"; // Assuming Shadcn's Carousel\nimport { Star, MapPin, Wifi, Utensils, ThumbsUp, MessageSquare } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\n// Define the structure for a hotel option\ninterface HotelOption {\n  id: string;\n  name: string;\n  imageUrl: string;\n  rating: number; // e.g., 4.5\n  pricePerNight: number;\n  currency?: string; // e.g., 'USD'\n  amenities: string[];\n  location: string;\n  isSelected?: boolean; // Indicates if this is the group's final choice\n  votes?: number; // For voting\n}\n\ninterface HotelSelectionPanelProps {\n  hotelOptions: HotelOption[];\n  selectedHotelId?: string | null;\n  onSelectHotel?: (hotelId: string) => void;\n  onVote?: (hotelId: string) => void;\n  onComment?: (hotelId: string) => void;\n}\n\nconst HotelSelectionPanel: React.FC<HotelSelectionPanelProps> = ({\n  hotelOptions,\n  selectedHotelId,\n  onSelectHotel,\n  onVote,\n  onComment,\n}) => {\n  // Example amenity icons map\n  const amenityIcons: { [key: string]: React.ElementType } = {\n    wifi: Wifi,\n    restaurant: Utensils,\n    // Add more mappings\n  };\n\n  return (\n    <Card className=\"w-full animate-fade-in\">\n      <CardHeader>\n        <CardTitle>Hotel Selection</CardTitle>\n        <CardDescription>Review and choose the accommodation for the group.</CardDescription>\n      </CardHeader>\n      <CardContent>\n        {hotelOptions.length === 0 ? (\n          <p className=\"text-muted-foreground text-center py-4\">No hotel options added yet.</p>\n        ) : (\n          <Carousel\n            opts={{ align: \"start\", loop: hotelOptions.length > 1 }}\n            className=\"w-full max-w-xs sm:max-w-md md:max-w-xl lg:max-w-4xl mx-auto\"\n          >\n            <CarouselContent>\n              {hotelOptions.map((hotel) => (\n                <CarouselItem key={hotel.id} className=\"md:basis-1/2 lg:basis-1/3 p-2\">\n                  <Card className={cn(\n                      \"overflow-hidden h-full flex flex-col card-hover-basic\",\n                      selectedHotelId === hotel.id && \"ring-2 ring-primary border-primary\"\n                    )}\n                  >\n                    <AspectRatio ratio={16 / 9}>\n                      <img\n                        src={hotel.imageUrl || '/placeholder-image.jpg'} // Provide a fallback image\n                        alt={`Image of ${hotel.name}`}\n                        className=\"object-cover w-full h-full\"\n                      />\n                    </AspectRatio>\n                    <CardHeader className=\"pb-2\">\n                      <CardTitle className=\"text-lg font-semibold truncate\">{hotel.name}</CardTitle>\n                      <div className=\"flex items-center text-sm text-muted-foreground\">\n                        <MapPin size={14} className=\"mr-1 flex-shrink-0\" />\n                        <span className=\"truncate\">{hotel.location}</span>\n                      </div>\n                    </CardHeader>\n                    <CardContent className=\"flex-grow space-y-2 py-2\">\n                      <div className=\"flex items-center justify-between text-sm\">\n                        <div className=\"flex items-center text-amber-500\">\n                          <Star size={16} className=\"mr-1 fill-current\" /> {hotel.rating.toFixed(1)}\n                        </div>\n                        <div className=\"font-semibold text-foreground\">\n                          {hotel.currency || '$'}{hotel.pricePerNight}\n                          <span className=\"text-xs text-muted-foreground\"> / night</span>\n                        </div>\n                      </div>\n                      <div className=\"text-xs space-x-1\">\n                        {hotel.amenities.slice(0, 3).map((amenity) => {\n                          const Icon = amenityIcons[amenity.toLowerCase()] || Star; // Default icon\n                          return (\n                            <Badge key={amenity} variant=\"secondary\" className=\"capitalize\">\n                              <Icon size={12} className=\"mr-1\" /> {amenity}\n                            </Badge>\n                          );\n                        })}\n                        {hotel.amenities.length > 3 && <Badge variant=\"outline\">...</Badge>}\n                      </div>\n                    </CardContent>\n                    <CardFooter className=\"flex flex-col items-stretch pt-3 border-t\">\n                       {/* Collaborative Actions */} \n                       <div className=\"flex justify-between items-center text-xs text-muted-foreground mb-2\">\n                            <span>Votes: {hotel.votes ?? 0}</span>\n                            <div className=\"flex space-x-2\">\n                                {onVote && (\n                                    <Button variant=\"ghost\" size=\"sm\" className=\"h-auto px-2 py-1 text-xs\" onClick={() => onVote(hotel.id)}>\n                                        <ThumbsUp size={14} className=\"mr-1\" /> Vote\n                                    </Button>\n                                )}\n                                {onComment && (\n                                    <Button variant=\"ghost\" size=\"sm\" className=\"h-auto px-2 py-1 text-xs\" onClick={() => onComment(hotel.id)}>\n                                        <MessageSquare size={14} className=\"mr-1\" /> Comment\n                                    </Button>\n                                )}\n                            </div>\n                       </div>\n                       {/* Selection Button */}\n                      {onSelectHotel && (\n                        <Button\n                          variant={selectedHotelId === hotel.id ? 'default' : 'outline'}\n                          className=\"w-full mt-auto\"\n                          onClick={() => onSelectHotel(hotel.id)}\n                          disabled={selectedHotelId === hotel.id}\n                        >\n                          {selectedHotelId === hotel.id ? 'Selected' : 'Select this Hotel'}\n                        </Button>\n                      )}\n                    </CardFooter>\n                  </Card>\n                </CarouselItem>\n              ))}\n            </CarouselContent>\n            {hotelOptions.length > 1 && (\n                <>\n                    <CarouselPrevious className=\"absolute left-[-10px] top-1/2 -translate-y-1/2 z-10 bg-background/80 hover:bg-background\" />\n                    <CarouselNext className=\"absolute right-[-10px] top-1/2 -translate-y-1/2 z-10 bg-background/80 hover:bg-background\" />\n                </>\n            )}\n          </Carousel>\n        )}\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default HotelSelectionPanel;\n"
    },
    {
        "fileName": "src/components/group_booking_trip_management_page/GroupDiscountProgress.tsx",
        "content": "import React, { useEffect, useState } from 'react';\nimport { Progress } from \"@/components/ui/progress\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Users, Percent, Target } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\ninterface GroupDiscountProgressProps {\n  currentGroupSize: number;\n  requiredSizeForDiscount: number;\n  discountPercentage?: number; // Optional: Show the discount % if achieved\n  discountDescription?: string; // e.g., \"Group Rate Unlocked!\"\n}\n\nconst GroupDiscountProgress: React.FC<GroupDiscountProgressProps> = ({\n  currentGroupSize,\n  requiredSizeForDiscount,\n  discountPercentage,\n  discountDescription = \"Group Discount\",\n}) => {\n  const [progressValue, setProgressValue] = useState(0);\n\n  const progress = Math.min((currentGroupSize / requiredSizeForDiscount) * 100, 100);\n  const discountAchieved = currentGroupSize >= requiredSizeForDiscount;\n\n  // Animate progress bar on load or update\n  useEffect(() => {\n    // Set a timeout to trigger the animation shortly after mount/update\n    const timer = setTimeout(() => setProgressValue(progress), 100);\n    return () => clearTimeout(timer);\n  }, [progress]);\n\n  return (\n    <Card className=\"w-full animate-scale-in\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center\">\n          <Target className=\"mr-2 h-5 w-5 text-primary\" />\n          {discountDescription}\n        </CardTitle>\n        <CardDescription>\n          Reach the required group size to unlock special rates or benefits.\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-3\">\n        <div className=\"flex justify-between items-center text-sm font-medium mb-1\">\n          <span className=\"flex items-center text-muted-foreground\">\n            <Users className=\"mr-1.5 h-4 w-4\" />\n            Current Group Size\n          </span>\n          <span className=\"text-foreground font-semibold\">{currentGroupSize} / {requiredSizeForDiscount}</span>\n        </div>\n\n        <Progress\n           value={progressValue}\n           className={cn(\n             \"h-3 transition-all duration-500 ease-out\",\n             discountAchieved ? \"[&>div]:bg-success\" : \"[&>div]:bg-primary\"\n           )}\n           aria-label={`${discountDescription} progress`}\n        />\n\n        <div className=\"text-center text-sm mt-2\">\n          {discountAchieved ? (\n            <p className=\"text-success font-semibold flex items-center justify-center\">\n              <Percent className=\"mr-1 h-4 w-4\" />\n              {discountPercentage ? `${discountPercentage}% Discount Unlocked!` : 'Group Discount Achieved!'}\n            </p>\n          ) : (\n            <p className=\"text-muted-foreground\">\n              {requiredSizeForDiscount - currentGroupSize} more participant(s) needed for the discount.\n            </p>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default GroupDiscountProgress;\n"
    },
    {
        "fileName": "src/components/group_booking_trip_management_page/CostSplitPaymentTable.tsx",
        "content": "import React from 'react';\nimport {\n  Table,\n  TableBody,\n  TableCaption,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Checkbox } from \"@/components/ui/checkbox\"; // Assuming Shadcn Checkbox\nimport { DollarSign, CreditCard, CheckCircle, Clock } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\n// Define the structure for a participant's cost and payment status\ninterface ParticipantCost {\n  id: string;\n  name: string;\n  role?: string; // e.g., 'Group Leader'\n  shareAmount: number;\n  paidAmount: number;\n  paymentMethod?: string;\n  isPaymentConfirmed: boolean;\n}\n\ninterface CostSplitPaymentTableProps {\n  participants: ParticipantCost[];\n  totalCost: number;\n  currency?: string; // e.g., 'USD'\n  onUpdatePayment: (participantId: string, paidAmount: number, paymentMethod?: string) => void;\n  onConfirmPayment: (participantId: string, isConfirmed: boolean) => void;\n}\n\nconst CostSplitPaymentTable: React.FC<CostSplitPaymentTableProps> = ({\n  participants,\n  totalCost,\n  currency = '$',\n  onUpdatePayment,\n  onConfirmPayment,\n}) => {\n  const totalPaid = participants.reduce((sum, p) => sum + p.paidAmount, 0);\n  const remainingBalance = totalCost - totalPaid;\n\n  const handleAmountChange = (participantId: string, value: string) => {\n    const amount = parseFloat(value) || 0;\n    // Potentially find the participant and call onUpdatePayment with existing method\n    const participant = participants.find(p => p.id === participantId);\n    if (participant) {\n       onUpdatePayment(participantId, amount, participant.paymentMethod);\n    }\n  };\n\n  const handleConfirmationChange = (participantId: string, checked: boolean | 'indeterminate') => {\n      if (typeof checked === 'boolean') {\n          onConfirmPayment(participantId, checked);\n      }\n  };\n\n  return (\n    <Card className=\"w-full animate-fade-in\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center\">\n           <DollarSign className=\"mr-2 h-5 w-5 text-primary\" />\n           Cost Split & Payments\n        </CardTitle>\n        <CardDescription>Manage individual shares and track payment status.</CardDescription>\n      </CardHeader>\n      <CardContent>\n        <div className=\"mb-6 p-4 border border-border rounded-lg bg-muted/50 flex flex-col sm:flex-row justify-between items-center space-y-2 sm:space-y-0\">\n          <div className=\"text-center sm:text-left\">\n            <p className=\"text-sm font-medium text-muted-foreground\">Total Trip Cost</p>\n            <p className=\"text-xl font-semibold text-foreground\">{currency}{totalCost.toFixed(2)}</p>\n          </div>\n          <div className=\"text-center sm:text-left\">\n            <p className=\"text-sm font-medium text-muted-foreground\">Total Paid</p>\n            <p className=\"text-xl font-semibold text-success\">{currency}{totalPaid.toFixed(2)}</p>\n          </div>\n          <div className=\"text-center sm:text-left\">\n            <p className=\"text-sm font-medium text-muted-foreground\">Remaining Balance</p>\n            <p className={cn(\"text-xl font-semibold\", remainingBalance > 0 ? \"text-destructive\" : \"text-success\")}>{currency}{remainingBalance.toFixed(2)}</p>\n          </div>\n        </div>\n\n        <Table>\n          <TableHeader>\n            <TableRow>\n              <TableHead>Participant</TableHead>\n              <TableHead className=\"text-right\">Share ({currency})</TableHead>\n              <TableHead className=\"text-right\">Paid ({currency})</TableHead>\n              <TableHead className=\"text-center\">Status</TableHead>\n              <TableHead className=\"text-center\">Confirm</TableHead> { /* Optional Confirm Check */}\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n            {participants.map((p) => (\n              <TableRow key={p.id} className=\"stagger-item\">\n                <TableCell className=\"font-medium\">\n                  {p.name}\n                  {p.role && <Badge variant=\"secondary\" className=\"ml-2 text-xs\">{p.role}</Badge>}\n                </TableCell>\n                <TableCell className=\"text-right\">{p.shareAmount.toFixed(2)}</TableCell>\n                <TableCell className=\"text-right\">\n                   {/* Simplified: Directly show paid amount. Could be an input for leader */} \n                   {p.paidAmount.toFixed(2)}\n                   {/* Example Input for Leader: */}\n                   {/* <Input type=\"number\" value={p.paidAmount} onChange={(e) => handleAmountChange(p.id, e.target.value)} className=\"h-8 text-right max-w-[100px] inline-block\"/> */} \n                </TableCell>\n                <TableCell className=\"text-center\">\n                  {p.paidAmount >= p.shareAmount ? (\n                    <Badge variant=\"success\" className=\"text-xs\">\n                      <CheckCircle className=\"mr-1 h-3 w-3\" /> Paid\n                    </Badge>\n                  ) : p.paidAmount > 0 ? (\n                     <Badge variant=\"warning\" className=\"text-xs\">\n                       <Clock className=\"mr-1 h-3 w-3\" /> Partially Paid\n                     </Badge>\n                  ) : (\n                    <Badge variant=\"outline\" className=\"text-xs\">\n                      <Clock className=\"mr-1 h-3 w-3\" /> Pending\n                    </Badge>\n                  )}\n                </TableCell>\n                <TableCell className=\"text-center\">\n                   <Checkbox\n                     checked={p.isPaymentConfirmed}\n                     onCheckedChange={(checked) => handleConfirmationChange(p.id, checked)}\n                     aria-label={`Confirm payment for ${p.name}`}\n                     className=\"data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\"\n                   />\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n           <TableCaption>Summary of costs and payment status per participant.</TableCaption>\n        </Table>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default CostSplitPaymentTable;\n"
    },
    {
        "fileName": "src/components/group_booking_trip_management_page/RoleAssignmentDisplay.tsx",
        "content": "import React from 'react';\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { UserCog, Users, ShieldCheck } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\n// Define the structure for a member with a role\ninterface RoleMember {\n  id: string;\n  name: string;\n  avatarUrl?: string;\n  role: string; // e.g., 'Group Leader', 'Planner', 'Member'\n  permissions?: string[]; // Optional list of specific permissions\n}\n\ninterface RoleAssignmentDisplayProps {\n  members: RoleMember[];\n  groupLeaderId?: string; // Optionally highlight the group leader\n}\n\n// Helper to get initials\nconst getInitials = (name: string): string => {\n  return name\n    .split(' ')\n    .map(n => n[0])\n    .slice(0, 2)\n    .join('')\n    .toUpperCase();\n};\n\nconst RoleAssignmentDisplay: React.FC<RoleAssignmentDisplayProps> = ({ members, groupLeaderId }) => {\n\n  const getRoleBadgeVariant = (role: string) => {\n      if (role.toLowerCase().includes('leader')) return 'default';\n      if (role.toLowerCase().includes('admin') || role.toLowerCase().includes('planner')) return 'secondary';\n      return 'outline';\n  }\n\n  const getRoleIcon = (role: string) => {\n      if (role.toLowerCase().includes('leader')) return <ShieldCheck className=\"h-4 w-4 mr-1 text-primary-foreground\" />;\n      if (role.toLowerCase().includes('admin') || role.toLowerCase().includes('planner')) return <UserCog className=\"h-4 w-4 mr-1 text-secondary-foreground\" />;\n      return <Users className=\"h-4 w-4 mr-1 text-muted-foreground\" />;\n  }\n\n  return (\n    <Card className=\"w-full animate-fade-in\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center\">\n           <UserCog className=\"mr-2 h-5 w-5 text-primary\" />\n           Group Roles & Permissions\n        </CardTitle>\n        <CardDescription>Identify roles and responsibilities within the group.</CardDescription>\n      </CardHeader>\n      <CardContent>\n        {members.length === 0 ? (\n          <p className=\"text-muted-foreground text-center py-4\">No members with assigned roles.</p>\n        ) : (\n          <ul className=\"space-y-3\">\n            {members.sort((a, b) => (a.id === groupLeaderId ? -1 : b.id === groupLeaderId ? 1 : 0)) // Bring leader to top\n              .map((member) => (\n              <li\n                key={member.id}\n                className={cn(\n                  \"flex flex-col sm:flex-row items-start sm:items-center justify-between p-3 border border-border rounded-lg bg-card stagger-item\",\n                  member.id === groupLeaderId && \"bg-primary/10 border-primary/30\"\n                )}\n              >\n                <div className=\"flex items-center space-x-3 mb-2 sm:mb-0 flex-grow\">\n                  <Avatar className=\"h-9 w-9\">\n                    <AvatarImage src={member.avatarUrl} alt={member.name} />\n                    <AvatarFallback>{getInitials(member.name)}</AvatarFallback>\n                  </Avatar>\n                  <span className=\"font-medium text-foreground\">{member.name}</span>\n                </div>\n                <Badge variant={getRoleBadgeVariant(member.role)} className=\"flex items-center self-start sm:self-center text-xs px-2 py-1 whitespace-nowrap\">\n                   {getRoleIcon(member.role)}\n                   {member.role}\n                </Badge>\n                {/* Optionally display permissions */}\n                {/* {member.permissions && member.permissions.length > 0 && (\n                  <div className=\"mt-2 text-xs text-muted-foreground pl-12 sm:pl-0 sm:ml-4\">\n                    Permissions: {member.permissions.join(', ')}\n                  </div>\n                )} */} \n              </li>\n            ))}\n          </ul>\n        )}\n      </CardContent>\n    </Card>\n  );\n};\n\n// Example Usage Data\nconst exampleRoleMembers: RoleMember[] = [\n  { id: 'leader-1', name: 'Alice Leader', avatarUrl: '/avatars/alice.png', role: 'Group Leader' },\n  { id: 'member-2', name: 'Bob Member', avatarUrl: '/avatars/bob.png', role: 'Member' },\n  { id: 'planner-3', name: 'Charlie Planner', role: 'Trip Planner', permissions: ['Edit Itinerary', 'Add Hotels'] },\n  { id: 'member-4', name: 'Diana Viewer', role: 'Member' },\n];\n\n/* Example Parent Component\nconst ParentComponent = () => {\n    return <RoleAssignmentDisplay members={exampleRoleMembers} groupLeaderId=\"leader-1\" />\n}\n*/\n\nexport default RoleAssignmentDisplay;\n"
    },
    {
        "fileName": "src/components/group_booking_trip_management_page/ParticipationControl.tsx",
        "content": "import React, { useState } from 'react';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\"; // Assuming Shadcn RadioGroup\nimport { Label } from \"@/components/ui/label\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\"; // Assuming Shadcn AlertDialog\nimport { CheckCircle, XCircle, HelpCircle } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\n// Define participation status types\ntype ParticipationStatus = 'confirmed' | 'pending' | 'declined';\n\ninterface ParticipationControlProps {\n  currentStatus: ParticipationStatus;\n  onStatusChange: (newStatus: ParticipationStatus) => void;\n  isLoading?: boolean; // For async operations\n  tripName?: string; // Optional: for confirmation messages\n}\n\nconst ParticipationControl: React.FC<ParticipationControlProps> = ({\n  currentStatus,\n  onStatusChange,\n  isLoading = false,\n  tripName = 'the trip'\n}) => {\n  const [selectedStatus, setSelectedStatus] = useState<ParticipationStatus>(currentStatus);\n\n  const handleConfirm = () => {\n    onStatusChange(selectedStatus);\n    // AlertDialog will close automatically via AlertDialogAction\n  };\n\n  const getStatusInfo = (status: ParticipationStatus) => {\n    switch (status) {\n      case 'confirmed':\n        return { icon: <CheckCircle className=\"h-5 w-5 text-success mr-2\" />, text: 'You have confirmed your participation.', color: 'text-success' };\n      case 'declined':\n        return { icon: <XCircle className=\"h-5 w-5 text-destructive mr-2\" />, text: 'You have declined to participate.', color: 'text-destructive' };\n      case 'pending':\n      default:\n        return { icon: <HelpCircle className=\"h-5 w-5 text-muted-foreground mr-2\" />, text: 'Your participation status is pending.', color: 'text-muted-foreground' };\n    }\n  };\n\n  const statusInfo = getStatusInfo(currentStatus);\n\n  return (\n    <Card className=\"w-full animate-scale-in\">\n      <CardHeader>\n        <CardTitle>Confirm Your Participation</CardTitle>\n        <CardDescription>Let the group know if you'll be joining {tripName}.</CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div className={cn(\"flex items-center p-3 rounded-md border\", statusInfo.color === 'text-success' ? 'border-success/30 bg-success/10' : statusInfo.color === 'text-destructive' ? 'border-destructive/30 bg-destructive/10' : 'border-border bg-muted/50')}>\n          {statusInfo.icon}\n          <span className={cn(\"text-sm font-medium\", statusInfo.color)}>{statusInfo.text}</span>\n        </div>\n\n        <RadioGroup\n          value={selectedStatus}\n          onValueChange={(value: ParticipationStatus) => setSelectedStatus(value)}\n          className=\"space-y-2\"\n          disabled={isLoading}\n        >\n          <div className=\"flex items-center space-x-2\">\n            <RadioGroupItem value=\"confirmed\" id=\"status-confirmed\" />\n            <Label htmlFor=\"status-confirmed\" className=\"font-medium\">Yes, I'm going!</Label>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <RadioGroupItem value=\"declined\" id=\"status-declined\" />\n            <Label htmlFor=\"status-declined\" className=\"font-medium\">No, I can't make it.</Label>\n          </div>\n           {/* Maybe a 'Maybe' option if needed */}\n           {/* <div className=\"flex items-center space-x-2\">\n            <RadioGroupItem value=\"pending\" id=\"status-pending\" />\n            <Label htmlFor=\"status-pending\">Maybe / Deciding</Label>\n           </div> */} \n        </RadioGroup>\n      </CardContent>\n      <CardFooter>\n        <AlertDialog>\n          <AlertDialogTrigger asChild>\n            <Button disabled={isLoading || selectedStatus === currentStatus} className=\"w-full sm:w-auto\">\n              {isLoading ? 'Updating...' : 'Update Status'}\n            </Button>\n          </AlertDialogTrigger>\n          <AlertDialogContent>\n            <AlertDialogHeader>\n              <AlertDialogTitle>Confirm Status Change</AlertDialogTitle>\n              <AlertDialogDescription>\n                Are you sure you want to set your participation status for {tripName} to{' '}\n                <span className={cn(\"font-semibold\", selectedStatus === 'confirmed' ? 'text-success' : 'text-destructive')}>\n                  {selectedStatus === 'confirmed' ? 'Confirmed' : 'Declined'}\n                </span>?\n                This will notify the group leader.\n              </AlertDialogDescription>\n            </AlertDialogHeader>\n            <AlertDialogFooter>\n              <AlertDialogCancel disabled={isLoading}>Cancel</AlertDialogCancel>\n              <AlertDialogAction onClick={handleConfirm} disabled={isLoading} className={selectedStatus === 'confirmed' ? 'bg-success hover:bg-success/90' : 'bg-destructive hover:bg-destructive/90'}>\n                {isLoading ? 'Confirming...' : 'Confirm'}\n              </AlertDialogAction>\n            </AlertDialogFooter>\n          </AlertDialogContent>\n        </AlertDialog>\n      </CardFooter>\n    </Card>\n  );\n};\n\nexport default ParticipationControl;\n"
    },
    {
        "fileName": "src/components/group_booking_trip_management_page/BookingHistoryList.tsx",
        "content": "import React from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { CalendarDays, CheckCircle, XCircle, Clock, ExternalLink, Eye } from 'lucide-react';\nimport { format } from 'date-fns';\nimport { cn } from '@/lib/utils';\n\n// Define booking status types\ntype BookingStatus = 'ongoing' | 'completed' | 'cancelled' | 'pending';\n\n// Define the structure for a booking history item\ninterface BookingHistoryItem {\n  id: string;\n  tripName: string;\n  destination: string;\n  startDate: Date;\n  endDate: Date;\n  status: BookingStatus;\n  bookingReference?: string; // Optional booking ref\n  viewDetailsLink?: string; // Link to the specific trip page\n}\n\ninterface BookingHistoryListProps {\n  bookings: BookingHistoryItem[];\n}\n\n// Helper to get status attributes\nconst getStatusAttributes = (status: BookingStatus) => {\n  switch (status) {\n    case 'ongoing':\n      return { icon: <Clock className=\"h-3 w-3 mr-1\" />, variant: 'secondary' as const, text: 'Ongoing' };\n    case 'completed':\n      return { icon: <CheckCircle className=\"h-3 w-3 mr-1\" />, variant: 'success' as const, text: 'Completed' };\n    case 'cancelled':\n      return { icon: <XCircle className=\"h-3 w-3 mr-1\" />, variant: 'destructive' as const, text: 'Cancelled' };\n    case 'pending':\n       return { icon: <Clock className=\"h-3 w-3 mr-1\" />, variant: 'warning' as const, text: 'Pending Confirmation' };\n    default:\n      return { icon: null, variant: 'outline' as const, text: 'Unknown' };\n  }\n};\n\nconst BookingHistoryList: React.FC<BookingHistoryListProps> = ({ bookings }) => {\n  return (\n    <Card className=\"w-full animate-fade-in\">\n      <CardHeader>\n        <CardTitle>Group Trip History</CardTitle>\n        <CardDescription>Review past and current group bookings.</CardDescription>\n      </CardHeader>\n      <CardContent>\n        {bookings.length === 0 ? (\n          <p className=\"text-muted-foreground text-center py-6\">No booking history found.</p>\n        ) : (\n          <ScrollArea className=\"h-[300px] pr-3\">\n            <ul className=\"space-y-4\">\n              {bookings.map((booking) => {\n                const statusAttrs = getStatusAttributes(booking.status);\n                return (\n                  <li key={booking.id} className=\"p-4 border border-border rounded-lg bg-card flex flex-col sm:flex-row justify-between items-start stagger-item\">\n                    <div className=\"flex-grow mb-3 sm:mb-0 sm:mr-4\">\n                      <h4 className=\"font-semibold text-md text-foreground mb-1\">{booking.tripName} - {booking.destination}</h4>\n                      <div className=\"flex items-center text-sm text-muted-foreground mb-2\">\n                        <CalendarDays className=\"h-4 w-4 mr-1.5 flex-shrink-0\" />\n                        <span>{format(booking.startDate, 'MMM d, yyyy')}</span>\n                        <span className=\"mx-1\">-</span>\n                        <span>{format(booking.endDate, 'MMM d, yyyy')}</span>\n                      </div>\n                      <Badge variant={statusAttrs.variant} className=\"text-xs px-2 py-0.5\">\n                        {statusAttrs.icon}\n                        {statusAttrs.text}\n                      </Badge>\n                      {booking.bookingReference && (\n                         <p className=\"text-xs text-muted-foreground mt-1\">Ref: {booking.bookingReference}</p>\n                      )}\n                    </div>\n                    {booking.viewDetailsLink && (\n                      <Button\n                         variant=\"outline\"\n                         size=\"sm\"\n                         className=\"w-full sm:w-auto self-start sm:self-center\"\n                         asChild // Use asChild if linking with react-router-dom Link\n                      >\n                        {/* Replace <a> with <Link> from react-router-dom if using it */}\n                        <a href={booking.viewDetailsLink} target=\"_blank\" rel=\"noopener noreferrer\">\n                           <Eye className=\"h-4 w-4 mr-2\" />\n                           View Details\n                        </a>\n                      </Button>\n                    )}\n                  </li>\n                );\n              })}\n            </ul>\n          </ScrollArea>\n        )}\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default BookingHistoryList;\n"
    },
    {
        "fileName": "src/components/group_booking_trip_management_page/NotificationCenter.tsx",
        "content": "import React from 'react';\nimport { Bell, Info, CheckCircle, XCircle, AlertTriangle } from 'lucide-react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { cn } from '@/lib/utils';\n\n// Note: This component acts as a visual placeholder or display area for notifications.\n// Actual toast notifications are typically triggered globally using a library like `sonner`.\n// You would call `toast('Message')` from other components/logic.\n// Include <Toaster /> from 'sonner' in your main layout (e.g., App.tsx).\n\ntype NotificationType = 'info' | 'success' | 'warning' | 'error' | 'update';\n\ninterface NotificationItem {\n  id: string;\n  type: NotificationType;\n  message: string;\n  timestamp: Date;\n  read?: boolean;\n}\n\ninterface NotificationCenterProps {\n  notifications: NotificationItem[]; // Prop to potentially display recent notifications in a panel\n  maxDisplayCount?: number;\n}\n\nconst getNotificationIcon = (type: NotificationType) => {\n  switch (type) {\n    case 'success':\n      return <CheckCircle className=\"h-5 w-5 text-success flex-shrink-0\" />;\n    case 'warning':\n      return <AlertTriangle className=\"h-5 w-5 text-warning flex-shrink-0\" />;\n    case 'error':\n      return <XCircle className=\"h-5 w-5 text-destructive flex-shrink-0\" />;\n    case 'update':\n       return <Bell className=\"h-5 w-5 text-primary flex-shrink-0\" />;\n    case 'info':\n    default:\n      return <Info className=\"h-5 w-5 text-blue-500 flex-shrink-0\" />;\n  }\n};\n\nconst NotificationCenter: React.FC<NotificationCenterProps> = ({ notifications = [], maxDisplayCount = 5 }) => {\n\n  const displayedNotifications = notifications\n    .sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime())\n    .slice(0, maxDisplayCount);\n\n  return (\n    <Card className=\"w-full animate-fade-in\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center\">\n          <Bell className=\"mr-2 h-5 w-5 text-primary\" />\n          Notifications & Updates\n        </CardTitle>\n        <CardDescription>\n          Recent activity and updates for your group trip.\n          (Real-time toasts provided by Sonner)\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        {displayedNotifications.length === 0 ? (\n          <p className=\"text-muted-foreground text-center py-4\">No recent notifications.</p>\n        ) : (\n          <ScrollArea className=\"h-[250px] pr-3\">\n            <ul className=\"space-y-3\">\n              {displayedNotifications.map((notification) => (\n                <li\n                  key={notification.id}\n                  className={cn(\n                    \"flex items-start space-x-3 p-3 border border-border rounded-md bg-card stagger-item\",\n                    !notification.read && \"bg-muted/50 font-medium\"\n                  )}\n                >\n                  {getNotificationIcon(notification.type)}\n                  <div className=\"flex-grow\">\n                    <p className=\"text-sm text-foreground\">{notification.message}</p>\n                    <p className=\"text-xs text-muted-foreground mt-1\">\n                      {notification.timestamp.toLocaleTimeString()} - {notification.timestamp.toLocaleDateString()}\n                    </p>\n                  </div>\n                   {!notification.read && (\n                       <div className=\"h-2 w-2 rounded-full bg-primary mt-1 flex-shrink-0\" title=\"Unread\"></div>\n                   )}\n                </li>\n              ))}\n            </ul>\n          </ScrollArea>\n        )}\n      </CardContent>\n       {/* Reminder Comment */}\n       {/* <CardFooter className=\"text-xs text-muted-foreground\">\n         Remember to include &lt;Toaster richColors position=\"top-right\" /&gt; in your main layout for real-time pop-up notifications.\n       </CardFooter> */} \n    </Card>\n  );\n};\n\n// Example Usage Data (if displaying a list)\n/*\nconst exampleNotifications: NotificationItem[] = [\n  { id: '1', type: 'success', message: 'Jane Doe accepted the invite!', timestamp: new Date(Date.now() - 60000 * 5), read: false },\n  { id: '2', type: 'update', message: 'Itinerary updated: Added Museum Visit.', timestamp: new Date(Date.now() - 60000 * 15), read: false },\n  { id: '3', type: 'info', message: 'Payment reminder sent to Bob.', timestamp: new Date(Date.now() - 60000 * 60), read: true },\n  { id: '4', type: 'warning', message: 'Hotel option A is filling up fast!', timestamp: new Date(Date.now() - 60000 * 120), read: true },\n];\n\nconst ParentComponent = () => {\n  return <NotificationCenter notifications={exampleNotifications} />;\n}\n*/\n\nexport default NotificationCenter;\n"
    },
    {
        "fileName": "src/components/user_dashboard_account_profile_management/UserProfileCard.tsx",
        "content": "import React from 'react';\nimport { Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter } from \"@/components/ui/card\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Edit, KeyRound, Settings, User } from 'lucide-react';\n\ninterface UserProfile {\n  name: string;\n  email: string;\n  imageUrl?: string;\n  contactInfo?: string;\n}\n\ninterface UserProfileCardProps {\n  user: UserProfile;\n  onEditProfile: () => void;\n  onResetPassword: () => void;\n  onGoToPreferences: () => void;\n}\n\nconst UserProfileCard: React.FC<UserProfileCardProps> = ({ user, onEditProfile, onResetPassword, onGoToPreferences }) => {\n  const getInitials = (name: string) => {\n    const names = name.split(' ');\n    if (names.length === 1) return names[0][0].toUpperCase();\n    return (names[0][0] + names[names.length - 1][0]).toUpperCase();\n  };\n\n  return (\n    <Card className=\"w-full max-w-md animate-scale-in\">\n      <CardHeader className=\"flex flex-row items-center space-x-4 pb-4\">\n        <Avatar className=\"h-16 w-16\">\n          <AvatarImage src={user.imageUrl} alt={`${user.name}'s profile picture`} />\n          <AvatarFallback className=\"bg-muted text-muted-foreground\">\n            {user.imageUrl ? <User className=\"h-8 w-8\" /> : getInitials(user.name)}\n          </AvatarFallback>\n        </Avatar>\n        <div className=\"flex-1\">\n          <CardTitle className=\"text-xl font-semibold text-foreground\">{user.name}</CardTitle>\n          <CardDescription className=\"text-muted-foreground\">{user.email}</CardDescription>\n          {user.contactInfo && <p className=\"text-sm text-muted-foreground mt-1\">{user.contactInfo}</p>}\n        </div>\n      </CardHeader>\n      <CardContent className=\"pt-0 pb-4\">\n        {/* Additional profile details could go here if needed */}\n      </CardContent>\n      <CardFooter className=\"flex flex-col sm:flex-row justify-between items-center gap-2 pt-4 border-t border-border\">\n        <Button variant=\"outline\" size=\"sm\" onClick={onEditProfile} className=\"w-full sm:w-auto\">\n          <Edit className=\"mr-2 h-4 w-4\" /> Edit Profile\n        </Button>\n        <div className=\"flex gap-2 w-full sm:w-auto\">\n          <Button variant=\"ghost\" size=\"sm\" onClick={onResetPassword} className=\"flex-1 sm:flex-none\">\n            <KeyRound className=\"mr-2 h-4 w-4\" /> Password\n          </Button>\n          <Button variant=\"ghost\" size=\"sm\" onClick={onGoToPreferences} className=\"flex-1 sm:flex-none\">\n            <Settings className=\"mr-2 h-4 w-4\" /> Preferences\n          </Button>\n        </div>\n      </CardFooter>\n    </Card>\n  );\n};\n\nexport default UserProfileCard;\n"
    },
    {
        "fileName": "src/components/user_dashboard_account_profile_management/DashboardTabs.tsx",
        "content": "import React from 'react';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n\ninterface DashboardTabsProps {\n  defaultTab?: string;\n  bookingsComponent: React.ReactNode;\n  itinerariesComponent: React.ReactNode;\n  groupTripsComponent: React.ReactNode;\n  historyComponent: React.ReactNode;\n  paymentsComponent: React.ReactNode;\n  preferencesComponent?: React.ReactNode;\n  rewardsComponent?: React.ReactNode;\n}\n\nconst DashboardTabs: React.FC<DashboardTabsProps> = ({\n  defaultTab = \"bookings\",\n  bookingsComponent,\n  itinerariesComponent,\n  groupTripsComponent,\n  historyComponent,\n  paymentsComponent,\n  preferencesComponent,\n  rewardsComponent,\n}) => {\n  const tabs = [\n    { value: \"bookings\", label: \"Bookings\", content: bookingsComponent },\n    { value: \"itineraries\", label: \"Itineraries\", content: itinerariesComponent },\n    { value: \"group_trips\", label: \"Group Trips\", content: groupTripsComponent },\n    { value: \"history\", label: \"History\", content: historyComponent },\n    { value: \"payments\", label: \"Payments\", content: paymentsComponent },\n  ];\n\n  if (preferencesComponent) {\n    tabs.push({ value: \"preferences\", label: \"Preferences\", content: preferencesComponent });\n  }\n  if (rewardsComponent) {\n    tabs.push({ value: \"rewards\", label: \"Rewards\", content: rewardsComponent });\n  }\n\n  return (\n    <Tabs defaultValue={defaultTab} className=\"w-full animate-fade-in\">\n      <TabsList className=\"grid w-full grid-cols-3 sm:grid-cols-4 md:grid-cols-5 lg:grid-cols-7 mb-4\">\n        {tabs.map((tab) => (\n          <TabsTrigger key={tab.value} value={tab.value}>{tab.label}</TabsTrigger>\n        ))}\n      </TabsList>\n      {tabs.map((tab) => (\n        <TabsContent key={tab.value} value={tab.value} className=\"mt-4\">\n          {tab.content}\n        </TabsContent>\n      ))}\n    </Tabs>\n  );\n};\n\nexport default DashboardTabs;\n"
    },
    {
        "fileName": "src/components/user_dashboard_account_profile_management/DashboardMetrics.tsx",
        "content": "import React from 'react';\nimport { Card, CardHeader, CardTitle, CardContent } from \"@/components/ui/card\";\nimport { Calendar, Plane, History, Award, CreditCard, Bell, Users, AlertCircle } from 'lucide-react';\n\ninterface MetricsData {\n  currentBookings?: number;\n  upcomingTrips?: number;\n  pastTravels?: number;\n  totalRewards?: number | string; // Could be points or amount\n  pendingPayments?: number;\n  unreadNotifications?: number;\n  groupInvitations?: number;\n}\n\ninterface DashboardMetricsProps {\n  metrics: MetricsData;\n}\n\nconst MetricCard: React.FC<{ title: string; value: number | string | undefined; icon: React.ElementType, delay: number }> = ({ title, value, icon: Icon, delay }) => {\n  if (value === undefined || value === null) return null;\n\n  return (\n    <Card className=\"stagger-item shadow-sm\" style={{ animationDelay: `${delay * 0.05}s` }}>\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n        <CardTitle className=\"text-sm font-medium text-muted-foreground\">{title}</CardTitle>\n        <Icon className=\"h-4 w-4 text-muted-foreground\" />\n      </CardHeader>\n      <CardContent>\n        <div className=\"text-2xl font-bold text-foreground\">{value}</div>\n      </CardContent>\n    </Card>\n  );\n};\n\nconst DashboardMetrics: React.FC<DashboardMetricsProps> = ({ metrics }) => {\n  const metricItems = [\n    { title: 'Current Bookings', value: metrics.currentBookings, icon: Calendar },\n    { title: 'Upcoming Trips', value: metrics.upcomingTrips, icon: Plane },\n    { title: 'Past Travels', value: metrics.pastTravels, icon: History },\n    { title: 'Rewards/Coupons', value: metrics.totalRewards, icon: Award },\n    { title: 'Pending Payments', value: metrics.pendingPayments, icon: CreditCard, alert: metrics.pendingPayments && metrics.pendingPayments > 0 },\n    { title: 'Unread Notifications', value: metrics.unreadNotifications, icon: Bell, alert: metrics.unreadNotifications && metrics.unreadNotifications > 0 },\n    { title: 'Group Invitations', value: metrics.groupInvitations, icon: Users, alert: metrics.groupInvitations && metrics.groupInvitations > 0 },\n  ].filter(item => item.value !== undefined && item.value !== null);\n\n  return (\n    <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 stagger-container mb-6\">\n      {metricItems.map((item, index) => (\n          <MetricCard\n            key={item.title}\n            title={item.title}\n            value={item.value}\n            icon={item.alert ? AlertCircle : item.icon} // Use AlertCircle if there's an alert condition\n            delay={index}\n          />\n      ))}\n    </div>\n  );\n};\n\nexport default DashboardMetrics;\n"
    },
    {
        "fileName": "src/components/user_dashboard_account_profile_management/BookingList.tsx",
        "content": "import React, { useState } from 'react';\nimport { Card, CardContent, CardFooter, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Eye, Repeat, XCircle, Share2, Filter } from 'lucide-react';\n\ntype BookingStatus = 'active' | 'upcoming' | 'completed' | 'cancelled';\n\ninterface Booking {\n  id: string;\n  destination: string;\n  startDate: string; // Consider using Date objects in real implementation\n  endDate: string;\n  status: BookingStatus;\n  imageUrl?: string; // Optional image for visual flair\n}\n\ninterface BookingListProps {\n  bookings: Booking[];\n  onView: (id: string) => void;\n  onRepeat: (id: string) => void;\n  onCancel: (id: string) => void;\n  onShare: (id: string) => void;\n}\n\nconst BookingList: React.FC<BookingListProps> = ({ bookings, onView, onRepeat, onCancel, onShare }) => {\n  const [filter, setFilter] = useState<BookingStatus | 'all'>('all');\n\n  const filteredBookings = filter === 'all'\n    ? bookings\n    : bookings.filter(booking => booking.status === filter);\n\n  const getStatusBadgeVariant = (status: BookingStatus): 'default' | 'secondary' | 'destructive' | 'outline' => {\n    switch (status) {\n      case 'active': return 'default'; // Or maybe success\n      case 'upcoming': return 'secondary';\n      case 'completed': return 'outline';\n      case 'cancelled': return 'destructive';\n      default: return 'secondary';\n    }\n  };\n\n  return (\n    <div className=\"space-y-6 animate-fade-in\">\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-xl font-semibold text-foreground\">Your Bookings</h2>\n        <Select onValueChange={(value) => setFilter(value as BookingStatus | 'all')} defaultValue=\"all\">\n          <SelectTrigger className=\"w-[180px]\">\n             <Filter className=\"mr-2 h-4 w-4\" />\n            <SelectValue placeholder=\"Filter by status\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">All Statuses</SelectItem>\n            <SelectItem value=\"active\">Active</SelectItem>\n            <SelectItem value=\"upcoming\">Upcoming</SelectItem>\n            <SelectItem value=\"completed\">Completed</SelectItem>\n            <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n\n      {filteredBookings.length === 0 ? (\n        <p className=\"text-muted-foreground text-center py-8\">No bookings match the current filter.</p>\n      ) : (\n        <div className=\"space-y-4\">\n          {filteredBookings.map((booking) => (\n            <Card key={booking.id} className=\"overflow-hidden card-hover-basic animate-slide-up\">\n              <CardHeader className=\"flex flex-row items-start gap-4 space-y-0 p-4\">\n                 {/* Optional image could go here */}\n                 {/* {booking.imageUrl && <img src={booking.imageUrl} alt={booking.destination} className=\"w-24 h-24 object-cover rounded-md\" />} */}\n                <div className=\"flex-1\">\n                  <CardTitle className=\"text-lg\">{booking.destination}</CardTitle>\n                  <CardDescription>{booking.startDate} - {booking.endDate}</CardDescription>\n                </div>\n                <Badge variant={getStatusBadgeVariant(booking.status)} className=\"capitalize\">{booking.status}</Badge>\n              </CardHeader>\n              <CardFooter className=\"flex flex-wrap justify-end gap-2 p-4 border-t border-border bg-muted/50\">\n                <Button variant=\"outline\" size=\"sm\" onClick={() => onView(booking.id)}><Eye className=\"mr-1 h-4 w-4\" /> View</Button>\n                {(booking.status === 'completed' || booking.status === 'active') && (\n                   <Button variant=\"outline\" size=\"sm\" onClick={() => onRepeat(booking.id)}><Repeat className=\"mr-1 h-4 w-4\" /> Repeat</Button>\n                )}\n                {(booking.status === 'active' || booking.status === 'upcoming') && (\n                   <Button variant=\"outline\" size=\"sm\" onClick={() => onCancel(booking.id)}><XCircle className=\"mr-1 h-4 w-4\" /> Cancel</Button>\n                )}\n                 <Button variant=\"outline\" size=\"sm\" onClick={() => onShare(booking.id)}><Share2 className=\"mr-1 h-4 w-4\" /> Share</Button>\n              </CardFooter>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default BookingList;\n"
    },
    {
        "fileName": "src/components/user_dashboard_account_profile_management/SavedTripsGroup.tsx",
        "content": "import React from 'react';\nimport { Card, CardContent, CardFooter, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { AspectRatio } from \"@/components/ui/aspect-ratio\";\nimport { Edit, Share2, Trash2, Users, MapPin } from 'lucide-react';\n\ninterface Participant {\n  name: string;\n  imageUrl?: string;\n}\n\ninterface SavedTrip {\n  id: string;\n  title: string;\n  imageUrl?: string;\n  type: 'itinerary' | 'group' | 'destination';\n  participants?: Participant[];\n  description?: string; // Short description or dates\n}\n\ninterface SavedTripsGroupProps {\n  savedTrips: SavedTrip[];\n  onEdit: (id: string) => void;\n  onShare: (id: string) => void;\n  onRemove: (id: string) => void;\n}\n\nconst SavedTripsGroup: React.FC<SavedTripsGroupProps> = ({ savedTrips, onEdit, onShare, onRemove }) => {\n  const getInitials = (name: string) => {\n    const names = name.split(' ');\n    if (names.length === 1) return names[0][0].toUpperCase();\n    return (names[0][0] + names[names.length - 1][0]).toUpperCase();\n  };\n\n  return (\n    <div className=\"animate-fade-in\">\n      <h2 className=\"text-xl font-semibold text-foreground mb-4\">Saved Itineraries & Trips</h2>\n      {savedTrips.length === 0 ? (\n        <p className=\"text-muted-foreground text-center py-8\">You haven't saved any trips or itineraries yet.</p>\n      ) : (\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 stagger-container\">\n          {savedTrips.map((trip, index) => (\n            <Card key={trip.id} className=\"overflow-hidden card-hover-basic stagger-item\" style={{ animationDelay: `${index * 0.05}s` }}>\n              {trip.imageUrl && (\n                <AspectRatio ratio={16 / 9}>\n                  <img\n                    src={trip.imageUrl}\n                    alt={trip.title}\n                    className=\"object-cover w-full h-full\"\n                  />\n                </AspectRatio>\n              )}\n              <CardHeader className=\"p-4\">\n                <CardTitle className=\"text-lg flex items-center\">\n                   {trip.type === 'group' ? <Users className=\"mr-2 h-5 w-5 text-primary\" /> : <MapPin className=\"mr-2 h-5 w-5 text-primary\" />} {trip.title}\n                </CardTitle>\n                {trip.description && <CardDescription className=\"mt-1\">{trip.description}</CardDescription>}\n              </CardHeader>\n              {trip.type === 'group' && trip.participants && trip.participants.length > 0 && (\n                 <CardContent className=\"p-4 pt-0 flex items-center space-x-2\">\n                  <span className=\"text-sm text-muted-foreground\">With:</span>\n                  <div className=\"flex -space-x-2 overflow-hidden\">\n                    {trip.participants.slice(0, 3).map((p, idx) => (\n                        <Avatar key={idx} className=\"h-6 w-6 border-2 border-background\">\n                          <AvatarImage src={p.imageUrl} alt={p.name} />\n                          <AvatarFallback className=\"text-xs bg-muted text-muted-foreground\">{getInitials(p.name)}</AvatarFallback>\n                        </Avatar>\n                    ))}\n                    {trip.participants.length > 3 && (\n                       <Avatar className=\"h-6 w-6 border-2 border-background\">\n                          <AvatarFallback className=\"text-xs bg-muted text-muted-foreground\">+{trip.participants.length - 3}</AvatarFallback>\n                        </Avatar>\n                    )}\n                    </div>\n                 </CardContent>\n              )}\n              <CardFooter className=\"flex justify-end gap-2 p-4 border-t border-border bg-muted/50\">\n                <Button variant=\"outline\" size=\"sm\" onClick={() => onEdit(trip.id)}><Edit className=\"mr-1 h-4 w-4\" /> Edit</Button>\n                <Button variant=\"outline\" size=\"sm\" onClick={() => onShare(trip.id)}><Share2 className=\"mr-1 h-4 w-4\" /> Share</Button>\n                <Button variant=\"ghost\" size=\"sm\" className=\"text-destructive hover:text-destructive hover:bg-destructive/10\" onClick={() => onRemove(trip.id)}><Trash2 className=\"mr-1 h-4 w-4\" /> Remove</Button>\n              </CardFooter>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SavedTripsGroup;\n"
    },
    {
        "fileName": "src/components/user_dashboard_account_profile_management/SupportWidget.tsx",
        "content": "import React from 'react';\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter, DialogTrigger, DialogClose } from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { MessageCircle, Send, LifeBuoy } from 'lucide-react';\n// Assuming react-hook-form is set up for form handling\n// import { useForm } from 'react-hook-form';\n\ninterface SupportWidgetProps {\n  onOpenChat?: () => void; // Optional: if chat is handled externally\n  onSubmitSupportRequest: (data: { subject: string; message: string }) => Promise<void>;\n}\n\nconst SupportWidget: React.FC<SupportWidgetProps> = ({ onOpenChat, onSubmitSupportRequest }) => {\n  // Placeholder form state handling. Replace with react-hook-form if complex validation is needed.\n  const [subject, setSubject] = React.useState('');\n  const [message, setMessage] = React.useState('');\n  const [isSubmitting, setIsSubmitting] = React.useState(false);\n  const [isDialogOpen, setIsDialogOpen] = React.useState(false);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsSubmitting(true);\n    try {\n      await onSubmitSupportRequest({ subject, message });\n      // Optionally clear form or show success message\n      setSubject('');\n      setMessage('');\n      setIsDialogOpen(false); // Close dialog on success\n      // Consider showing a toast notification here (using Sonner if available)\n    } catch (error) {\n      console.error(\"Support request failed:\", error);\n      // Show error message to user\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <Card className=\"animate-scale-in\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2 text-lg\">\n          <LifeBuoy className=\"h-5 w-5 text-primary\" />\n          Need Help?\n        </CardTitle>\n        <CardDescription>Get support via chat or submit a request.</CardDescription>\n      </CardHeader>\n      <CardContent className=\"flex flex-col sm:flex-row gap-3\">\n        {onOpenChat && (\n          <Button onClick={onOpenChat} className=\"flex-1\">\n            <MessageCircle className=\"mr-2 h-4 w-4\" /> Start Chat\n          </Button>\n        )}\n\n        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <DialogTrigger asChild>\n            <Button variant=\"outline\" className=\"flex-1\">\n              <Send className=\"mr-2 h-4 w-4\" /> Contact Support\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"sm:max-w-[425px]\">\n            <DialogHeader>\n              <DialogTitle>Contact Support</DialogTitle>\n              <DialogDescription>\n                Fill out the form below and we'll get back to you as soon as possible.\n              </DialogDescription>\n            </DialogHeader>\n            <form onSubmit={handleSubmit} className=\"grid gap-4 py-4\">\n              <div className=\"grid grid-cols-4 items-center gap-4\">\n                <Label htmlFor=\"subject\" className=\"text-right\">\n                  Subject\n                </Label>\n                <Input\n                  id=\"subject\"\n                  value={subject}\n                  onChange={(e) => setSubject(e.target.value)}\n                  className=\"col-span-3\"\n                  placeholder=\"e.g., Issue with booking #123\"\n                  required\n                />\n              </div>\n              <div className=\"grid grid-cols-4 items-start gap-4\">\n                <Label htmlFor=\"message\" className=\"text-right pt-2\">\n                  Message\n                </Label>\n                <Textarea\n                  id=\"message\"\n                  value={message}\n                  onChange={(e) => setMessage(e.target.value)}\n                  className=\"col-span-3 min-h-[100px]\"\n                  placeholder=\"Describe your issue in detail...\"\n                  required\n                />\n              </div>\n              <DialogFooter>\n                <DialogClose asChild>\n                    <Button type=\"button\" variant=\"outline\" disabled={isSubmitting}>Cancel</Button>\n                </DialogClose>\n                <Button type=\"submit\" disabled={isSubmitting}>\n                  {isSubmitting ? 'Sending...' : 'Send Message'}\n                </Button>\n              </DialogFooter>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default SupportWidget;\n"
    },
    {
        "fileName": "src/components/user_dashboard_account_profile_management/NotificationList.tsx",
        "content": "import React from 'react';\nimport { Button } from \"@/components/ui/button\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuLabel, DropdownMenuSeparator, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Bell, CheckCheck, Trash } from 'lucide-react';\nimport { formatDistanceToNow } from 'date-fns'; // Using date-fns from package.json\n\ninterface Notification {\n  id: string;\n  message: string;\n  read: boolean;\n  timestamp: Date | string; // Allow string for initial data, convert to Date\n  link?: string; // Optional link for the notification\n}\n\ninterface NotificationListProps {\n  notifications: Notification[];\n  onMarkRead: (id: string | 'all') => void;\n  onClearAll: () => void;\n}\n\nconst NotificationList: React.FC<NotificationListProps> = ({ notifications, onMarkRead, onClearAll }) => {\n  const unreadCount = notifications.filter(n => !n.read).length;\n\n  const handleMarkRead = (e: Event, id: string) => {\n      e.preventDefault(); // Prevent dropdown from closing\n      onMarkRead(id);\n  }\n\n  const handleMarkAllRead = (e: Event) => {\n      e.preventDefault();\n      onMarkRead('all');\n  }\n\n   const handleClearAll = (e: Event) => {\n      e.preventDefault();\n      onClearAll();\n  }\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button variant=\"outline\" size=\"icon\" className=\"relative rounded-full\">\n          <Bell className=\"h-5 w-5\" />\n          {unreadCount > 0 && (\n            <Badge variant=\"destructive\" className=\"absolute -top-2 -right-2 h-5 w-5 p-0 flex items-center justify-center rounded-full text-xs\">\n              {unreadCount}\n            </Badge>\n          )}\n          <span className=\"sr-only\">View Notifications</span>\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\" className=\"w-80 sm:w-96\">\n        <DropdownMenuLabel className=\"flex justify-between items-center\">\n          <span>Notifications</span>\n          {notifications.length > 0 && (\n            <div className='flex gap-1'>\n             <Button variant=\"ghost\" size=\"sm\" onClick={handleMarkAllRead} className=\"h-auto p-1 text-xs text-primary hover:bg-primary/10\" disabled={unreadCount === 0}>\n                <CheckCheck className='h-3 w-3 mr-1'/> Mark all read\n            </Button>\n             <Button variant=\"ghost\" size=\"sm\" onClick={handleClearAll} className=\"h-auto p-1 text-xs text-destructive hover:bg-destructive/10\">\n                 <Trash className='h-3 w-3 mr-1'/> Clear all\n             </Button>\n             </div>\n          )}\n        </DropdownMenuLabel>\n        <DropdownMenuSeparator />\n        <ScrollArea className=\"h-[300px]\">\n          {notifications.length === 0 ? (\n            <div className=\"text-center text-sm text-muted-foreground py-4 px-2\">No new notifications</div>\n          ) : (\n            notifications.map((notification) => (\n              <DropdownMenuItem\n                key={notification.id}\n                className={`flex items-start gap-3 p-3 ${!notification.read ? 'bg-muted/50' : ''} cursor-pointer`}\n                onSelect={(e) => { if(notification.link) window.location.href = notification.link; else e.preventDefault(); }}\n              >\n                <div className={`mt-1 h-2 w-2 rounded-full ${!notification.read ? 'bg-primary' : 'bg-transparent'}`}></div>\n                <div className=\"flex-1\">\n                  <p className=\"text-sm text-foreground mb-1\">{notification.message}</p>\n                  <p className=\"text-xs text-muted-foreground\">\n                    {formatDistanceToNow(new Date(notification.timestamp), { addSuffix: true })}\n                  </p>\n                </div>\n                {!notification.read && (\n                    <Button variant=\"ghost\" size=\"icon\" className=\"h-6 w-6\" onClick={(e) => handleMarkRead(e, notification.id)} title=\"Mark as read\">\n                        <CheckCheck className=\"h-4 w-4 text-muted-foreground hover:text-primary\"/>\n                    </Button>\n                )}\n              </DropdownMenuItem>\n            ))\n          )}\n        </ScrollArea>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n};\n\nexport default NotificationList;\n"
    },
    {
        "fileName": "src/components/user_dashboard_account_profile_management/PaymentHistoryTable.tsx",
        "content": "import React, { useState, useMemo } from 'react';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { DropdownMenu, DropdownMenuCheckboxItem, DropdownMenuContent, DropdownMenuLabel, DropdownMenuSeparator, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { Input } from \"@/components/ui/input\";\nimport { Download, ArrowUpDown, Filter } from 'lucide-react';\nimport { format } from 'date-fns'; // Using date-fns\n\ntype PaymentStatus = 'paid' | 'pending' | 'failed';\n\ninterface Payment {\n  id: string;\n  date: Date | string;\n  amount: number;\n  method: string; // e.g., 'Visa **** 1234'\n  status: PaymentStatus;\n  receiptUrl?: string;\n}\n\ninterface PaymentHistoryTableProps {\n  payments: Payment[];\n}\n\ntype SortKey = 'date' | 'amount' | 'status';\ntype SortDirection = 'asc' | 'desc';\n\nconst PaymentHistoryTable: React.FC<PaymentHistoryTableProps> = ({ payments }) => {\n  const [sortConfig, setSortConfig] = useState<{ key: SortKey; direction: SortDirection } | null>(null);\n  const [statusFilter, setStatusFilter] = useState<PaymentStatus[]>([]);\n  const [dateFilter, setDateFilter] = useState<string>(''); // Simple date string filter (e.g., YYYY-MM)\n\n  const handleSort = (key: SortKey) => {\n    let direction: SortDirection = 'asc';\n    if (sortConfig?.key === key && sortConfig.direction === 'asc') {\n      direction = 'desc';\n    }\n    setSortConfig({ key, direction });\n  };\n\n  const filteredAndSortedPayments = useMemo(() => {\n    let filtered = [...payments];\n\n    if (statusFilter.length > 0) {\n      filtered = filtered.filter(p => statusFilter.includes(p.status));\n    }\n\n    if (dateFilter) {\n       filtered = filtered.filter(p => format(new Date(p.date), 'yyyy-MM').startsWith(dateFilter));\n    }\n\n    if (sortConfig !== null) {\n      filtered.sort((a, b) => {\n        let aValue: string | number | Date = a[sortConfig.key];\n        let bValue: string | number | Date = b[sortConfig.key];\n\n        // Handle date sorting\n        if (sortConfig.key === 'date') {\n            aValue = new Date(aValue);\n            bValue = new Date(bValue);\n        }\n\n        if (aValue < bValue) {\n          return sortConfig.direction === 'asc' ? -1 : 1;\n        }\n        if (aValue > bValue) {\n          return sortConfig.direction === 'asc' ? 1 : -1;\n        }\n        return 0;\n      });\n    }\n    return filtered;\n  }, [payments, sortConfig, statusFilter, dateFilter]);\n\n  const getStatusBadgeVariant = (status: PaymentStatus): 'default' | 'secondary' | 'destructive' | 'outline' => {\n    switch (status) {\n      case 'paid': return 'default'; // Or success\n      case 'pending': return 'secondary';\n      case 'failed': return 'destructive';\n      default: return 'outline';\n    }\n  };\n\n  return (\n    <div className=\"w-full animate-fade-in\">\n       <h2 className=\"text-xl font-semibold text-foreground mb-4\">Payment History</h2>\n      <div className=\"flex items-center gap-2 mb-4\">\n         <Input\n            placeholder=\"Filter by Date (YYYY-MM)...\"\n            value={dateFilter}\n            onChange={(e) => setDateFilter(e.target.value)}\n            className=\"max-w-sm\"\n            type=\"month\"\n         />\n         <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button variant=\"outline\">\n                <Filter className=\"mr-2 h-4 w-4\" /> Filter Status\n                {statusFilter.length > 0 && ` (${statusFilter.length})`}\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\">\n              <DropdownMenuLabel>Filter by Status</DropdownMenuLabel>\n              <DropdownMenuSeparator />\n              {(['paid', 'pending', 'failed'] as PaymentStatus[]).map((status) => (\n                <DropdownMenuCheckboxItem\n                  key={status}\n                  checked={statusFilter.includes(status)}\n                  onCheckedChange={(checked) => {\n                    setStatusFilter(prev =>\n                      checked ? [...prev, status] : prev.filter(s => s !== status)\n                    );\n                  }}\n                  className=\"capitalize\"\n                >\n                  {status}\n                </DropdownMenuCheckboxItem>\n              ))}\n            </DropdownMenuContent>\n          </DropdownMenu>\n      </div>\n      <div className=\"rounded-md border\">\n        <Table>\n          <TableHeader>\n            <TableRow>\n              <TableHead className=\"cursor-pointer\" onClick={() => handleSort('date')}>\n                 Date <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n              </TableHead>\n              <TableHead className=\"cursor-pointer\" onClick={() => handleSort('amount')}>\n                 Amount <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n              </TableHead>\n              <TableHead>Method</TableHead>\n              <TableHead className=\"cursor-pointer\" onClick={() => handleSort('status')}>\n                 Status <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" />\n              </TableHead>\n              <TableHead className=\"text-right\">Actions</TableHead>\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n            {filteredAndSortedPayments.length > 0 ? (\n              filteredAndSortedPayments.map((payment) => (\n                <TableRow key={payment.id}>\n                  <TableCell>{format(new Date(payment.date), 'PPP')}</TableCell>\n                  <TableCell>${payment.amount.toFixed(2)}</TableCell>\n                  <TableCell>{payment.method}</TableCell>\n                  <TableCell>\n                    <Badge variant={getStatusBadgeVariant(payment.status)} className=\"capitalize\">{payment.status}</Badge>\n                  </TableCell>\n                  <TableCell className=\"text-right\">\n                    {payment.receiptUrl ? (\n                      <Button variant=\"outline\" size=\"sm\" asChild>\n                        <a href={payment.receiptUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n                          <Download className=\"mr-2 h-4 w-4\" /> Receipt\n                        </a>\n                      </Button>\n                    ) : (\n                       <span className=\"text-xs text-muted-foreground\">No Receipt</span>\n                    )}\n                  </TableCell>\n                </TableRow>\n              ))\n            ) : (\n              <TableRow>\n                <TableCell colSpan={5} className=\"h-24 text-center text-muted-foreground\">\n                  No payment history found or matches filters.\n                </TableCell>\n              </TableRow>\n            )}\n          </TableBody>\n        </Table>\n      </div>\n    </div>\n  );\n};\n\nexport default PaymentHistoryTable;\n"
    },
    {
        "fileName": "src/components/user_dashboard_account_profile_management/DashboardActionButtons.tsx",
        "content": "import React from 'react';\nimport { Button } from \"@/components/ui/button\";\nimport { UserPlus, Share2, Users, Award, Repeat } from 'lucide-react';\n\ninterface DashboardActionButtonsProps {\n  onInviteFriends?: () => void;\n  onShareProfile?: () => void;\n  onManageInvites?: () => void;\n  onRedeemRewards?: () => void;\n  onRepeatBooking?: () => void; // Might need booking ID context\n}\n\nconst DashboardActionButtons: React.FC<DashboardActionButtonsProps> = ({\n  onInviteFriends,\n  onShareProfile,\n  onManageInvites,\n  onRedeemRewards,\n  onRepeatBooking,\n}) => {\n  const actions = [\n    { handler: onInviteFriends, label: 'Invite Friends', icon: UserPlus, condition: !!onInviteFriends },\n    { handler: onShareProfile, label: 'Share Profile', icon: Share2, condition: !!onShareProfile },\n    { handler: onManageInvites, label: 'Manage Invites', icon: Users, condition: !!onManageInvites },\n    { handler: onRedeemRewards, label: 'Redeem Rewards', icon: Award, condition: !!onRedeemRewards },\n    { handler: onRepeatBooking, label: 'Repeat Last Booking', icon: Repeat, condition: !!onRepeatBooking }, // Simplified label\n  ].filter(action => action.condition);\n\n  if (actions.length === 0) {\n      return null;\n  }\n\n  return (\n    <div className=\"flex flex-wrap gap-2 my-6 animate-fade-in\">\n      {actions.map((action) => (\n        <Button key={action.label} variant=\"default\" onClick={action.handler}>\n          <action.icon className=\"mr-2 h-4 w-4\" />\n          {action.label}\n        </Button>\n      ))}\n    </div>\n  );\n};\n\nexport default DashboardActionButtons;\n"
    },
    {
        "fileName": "src/components/user_dashboard_account_profile_management/UserSettingsForm.tsx",
        "content": "import React from 'react';\nimport { useForm, Controller } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport * as z from 'zod';\n\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from \"@/components/ui/card\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\"; // Assuming Input is needed for payment methods or privacy\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\"; // Assuming Form components are available\nimport { Save, Palette, Languages, BellRing, CreditCard, ShieldCheck } from 'lucide-react';\n// Import useTheme if using next-themes\n// import { useTheme } from 'next-themes';\n\n// Define Zod schema for validation\nconst settingsSchema = z.object({\n  theme: z.enum(['light', 'dark', 'system']).optional(),\n  language: z.string().optional(),\n  emailNotifications: z.boolean().optional(),\n  pushNotifications: z.boolean().optional(),\n  // Add fields for saved payment methods and privacy options as needed\n  // savedPaymentMethod: z.string().optional(),\n  // dataSharingConsent: z.boolean().optional(),\n});\n\ntype SettingsFormData = z.infer<typeof settingsSchema>;\n\ninterface UserSettingsFormProps {\n  defaultSettings: SettingsFormData;\n  onSubmit: (data: SettingsFormData) => Promise<void>;\n}\n\nconst UserSettingsForm: React.FC<UserSettingsFormProps> = ({ defaultSettings, onSubmit }) => {\n  // If using next-themes, get setTheme function\n  // const { setTheme } = useTheme();\n\n  const form = useForm<SettingsFormData>({\n    resolver: zodResolver(settingsSchema),\n    defaultValues: defaultSettings,\n  });\n\n  const { handleSubmit, control, formState: { isSubmitting } } = form;\n\n  const handleFormSubmit = async (data: SettingsFormData) => {\n    // If using next-themes, apply theme immediately\n    // if (data.theme) {\n    //   setTheme(data.theme);\n    // }\n    await onSubmit(data);\n    // Optionally reset form or show success message\n    form.reset(data); // Reset with submitted data to reflect changes\n    // Consider showing a toast notification (Sonner)\n  };\n\n  return (\n    <Card className=\"w-full max-w-2xl animate-scale-in\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2 text-xl\">\n            <ShieldCheck className=\"h-6 w-6 text-primary\" />\n            Account Settings & Preferences\n        </CardTitle>\n        <CardDescription>Manage your theme, language, notifications, and privacy settings.</CardDescription>\n      </CardHeader>\n      <Form {...form}>\n        <form onSubmit={handleSubmit(handleFormSubmit)}>\n          <CardContent className=\"space-y-6\">\n            {/* Theme Preference - Example using Select */}\n            <FormField\n              control={control}\n              name=\"theme\"\n              render={({ field }) => (\n                <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                   <div className=\"space-y-0.5\">\n                     <FormLabel className=\"text-base flex items-center gap-2\"><Palette className=\"h-4 w-4\"/> Theme</FormLabel>\n                     <FormDescription>Select your preferred interface theme.</FormDescription>\n                   </div>\n                   <FormControl>\n                      <Select onValueChange={field.onChange} defaultValue={field.value || 'system'}>\n                        <SelectTrigger className=\"w-[180px]\">\n                          <SelectValue placeholder=\"Select theme\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"light\">Light</SelectItem>\n                          <SelectItem value=\"dark\">Dark</SelectItem>\n                          <SelectItem value=\"system\">System</SelectItem>\n                        </SelectContent>\n                      </Select>\n                   </FormControl>\n                </FormItem>\n              )}\n            />\n\n            {/* Language Preference - Example */}\n            <FormField\n              control={control}\n              name=\"language\"\n              render={({ field }) => (\n                <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                  <div className=\"space-y-0.5\">\n                    <FormLabel className=\"text-base flex items-center gap-2\"><Languages className=\"h-4 w-4\"/> Language</FormLabel>\n                    <FormDescription>Choose your display language.</FormDescription>\n                  </div>\n                   <FormControl>\n                        <Select onValueChange={field.onChange} defaultValue={field.value || 'en'}>\n                            <SelectTrigger className=\"w-[180px]\">\n                                <SelectValue placeholder=\"Select language\" />\n                            </SelectTrigger>\n                            <SelectContent>\n                                <SelectItem value=\"en\">English</SelectItem>\n                                <SelectItem value=\"es\">Español</SelectItem>\n                                <SelectItem value=\"fr\">Français</SelectItem>\n                                {/* Add more languages as needed */}\n                            </SelectContent>\n                        </Select>\n                    </FormControl>\n                </FormItem>\n              )}\n            />\n\n            {/* Notification Preferences - Example */}\n             <div className='rounded-lg border p-4 space-y-4'>\n                 <FormLabel className=\"text-base flex items-center gap-2\"><BellRing className=\"h-4 w-4\"/> Notification Preferences</FormLabel>\n                <FormField\n                  control={control}\n                  name=\"emailNotifications\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex flex-row items-center justify-between\">\n                      <FormDescription>Receive email notifications</FormDescription>\n                      <FormControl>\n                        <Switch checked={field.value} onCheckedChange={field.onChange} />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n                 <FormField\n                  control={control}\n                  name=\"pushNotifications\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex flex-row items-center justify-between\">\n                      <FormDescription>Enable push notifications</FormDescription>\n                       <FormControl>\n                        <Switch checked={field.value} onCheckedChange={field.onChange} />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n             </div>\n\n             {/* Placeholder sections for Payment Methods and Privacy */}\n             <div className='rounded-lg border p-4'>\n                  <FormLabel className=\"text-base flex items-center gap-2\"><CreditCard className=\"h-4 w-4\"/> Saved Payment Methods</FormLabel>\n                  <FormDescription className='mt-2'>Manage your saved payment details here. (Feature coming soon)</FormDescription>\n                  {/* Add form fields for payment methods later */}\n             </div>\n\n              <div className='rounded-lg border p-4'>\n                  <FormLabel className=\"text-base flex items-center gap-2\"><ShieldCheck className=\"h-4 w-4\"/> Privacy Options</FormLabel>\n                  <FormDescription className='mt-2'>Control your data sharing and privacy settings. (Feature coming soon)</FormDescription>\n                  {/* Add form fields for privacy options later */}\n             </div>\n\n          </CardContent>\n          <CardFooter className=\"border-t px-6 py-4\">\n            <Button type=\"submit\" disabled={isSubmitting}>\n              <Save className=\"mr-2 h-4 w-4\" /> {isSubmitting ? 'Saving...' : 'Save Preferences'}\n            </Button>\n          </CardFooter>\n        </form>\n      </Form>\n    </Card>\n  );\n};\n\nexport default UserSettingsForm;\n"
    },
    {
        "fileName": "src/pages/HomePage.tsx",
        "content": "import React from 'react';\nimport Header from '@/components/layout/Header';\nimport Footer from '@/components/layout/Footer';\n\n// Import UI Components for the Homepage\nimport DestinationSearchBar from '@/components/homepage_destination_discovery/DestinationSearchBar';\nimport TrendingDestinationsCarousel from '@/components/homepage_destination_discovery/TrendingDestinationsCarousel';\nimport FeaturedDestinationGrid from '@/components/homepage_destination_discovery/FeaturedDestinationGrid';\nimport JourneyPreviewCarousel from '@/components/homepage_destination_discovery/JourneyPreviewCarousel';\nimport GroupDealsSection from '@/components/homepage_destination_discovery/GroupDealsSection';\nimport PlanTripCtaButton from '@/components/homepage_destination_discovery/PlanTripCtaButton';\nimport OffersBanner from '@/components/homepage_destination_discovery/OffersBanner';\nimport DestinationFilterGroup from '@/components/homepage_destination_discovery/DestinationFilterGroup';\nimport IntroductoryTextBlock from '@/components/homepage_destination_discovery/IntroductoryTextBlock';\n\n// Placeholder Data for UI Components\n\n// Data for Introductory Text Block (ID: 9)\nconst introHeadline = \"Discover Exotic India\";\nconst introTagline = \"Like Never Before.\";\n\n// Data for Offers Banner (ID: 7)\nconst mockOffers = [\n  { id: 'offer1', text: 'Early Bird Special: 10% off all Kerala backwater tours booked this month!', link: '/offers/kerala-early' },\n  { id: 'offer2', text: 'Group Discount: Save 15% on Ladakh adventures for groups of 6+.', link: '/group' },\n];\n\n// Data for Search Bar (ID: 1) - Primarily handles interaction via callback\nconst handleSearch = (query: string) => {\n  console.log('Search initiated for:', query);\n  // In a real app, navigate to a search results page or update state\n};\n\n// Data for Filter Group (ID: 8) - Using component defaults for available filters, providing callback\nconst handleFilterChange = (filters: any) => {\n  console.log('Filters updated:', filters);\n  // Apply filters to relevant components (e.g., carousels, grids)\n};\n\n// Data for Trending Destinations Carousel (ID: 2)\nconst mockTrendingDestinations = [\n  { id: 'trend1', name: 'Majuli Island, Assam', imageUrl: '/placeholder-majuli.jpg', description: 'World\\'s largest river island, unique culture.' },\n  { id: 'trend2', name: 'Valley of Flowers, Uttarakhand', imageUrl: '/placeholder-valleyofflowers.jpg', description: 'Alpine meadows vibrant with flora.' },\n  { id: 'trend3', name: 'Rann of Kutch, Gujarat', imageUrl: '/placeholder-kutch.jpg', description: 'Vast salt marsh, stunning sunsets.' },\n  { id: 'trend4', name: 'Gokarna Beaches, Karnataka', imageUrl: '/placeholder-gokarna.jpg', description: 'Laid-back beaches, spiritual vibe.' },\n  { id: 'trend5', name: 'Ziro Valley, Arunachal', imageUrl: '/placeholder-ziro.jpg', description: 'Lush landscapes, home to Apatani tribe.' },\n];\n\n// Data for Featured Destination Grid (ID: 3)\nconst mockFeaturedDestinations = [\n  { id: 'feat1', name: 'Andaman Islands', imageUrl: '/placeholder-andaman.jpg', summary: 'Pristine beaches, clear waters, coral reefs.', tags: ['Popular', 'Beach', 'Water Sports'] },\n  { id: 'feat2', name: 'Spiti Valley', imageUrl: '/placeholder-spiti.jpg', summary: 'Remote monasteries, stark mountains, adventure.', tags: ['Adventure', 'Exclusive', 'Mountains'] },\n  { id: 'feat3', name: 'Hampi Ruins', imageUrl: '/placeholder-hampi.jpg', summary: 'Explore ancient temples and unique boulder landscapes.', tags: ['History', 'Unique', 'Culture'] },\n  { id: 'feat4', name: 'Sundarbans Mangroves', imageUrl: '/placeholder-sundarbans.jpg', summary: 'Home of the Royal Bengal Tiger, dense mangrove forest.', tags: ['Wildlife', 'Nature', 'Boating'] },\n];\n\n// Data for Journey Preview Carousel (ID: 4)\nconst mockJourneys = [\n  { id: 'journey1', title: 'Kerala Backwaters Sojourn', theme: 'Relaxation', imageUrl: '/placeholder-journey-kerala.jpg', highlights: ['Houseboat Stay', 'Village Life', 'Ayurvedic Spa'] },\n  { id: 'journey2', title: 'Himalayan Heights Trek', theme: 'Adventure', imageUrl: '/placeholder-journey-himachal.jpg', highlights: ['High-Altitude Trekking', 'Monastery Visits', 'Panoramic Views'] },\n  { id: 'journey3', title: 'Rajasthan Royal Route', theme: 'Culture', imageUrl: '/placeholder-journey-rajasthan.jpg', highlights: ['Explore Forts & Palaces', 'Camel Safari', 'Cultural Shows'] },\n  { id: 'journey4', title: 'Goan Coastal Escape', theme: 'Beach & Party', imageUrl: '/placeholder-journey-goa.jpg', highlights: ['Beach Hopping', 'Water Sports', 'Vibrant Nightlife'] },\n];\n\n// Data for Group Deals Section (ID: 5)\nconst mockGroupDeals = [\n  { id: 'deal1', title: 'Golden Triangle Group Tour', destination: 'Delhi-Agra-Jaipur', discount: '10% Off for 4+', minGroupSize: 4, validUntil: 'Ends Oct 31st' },\n  { id: 'deal2', title: 'South India Cultural Trip', destination: 'Tamil Nadu & Kerala', discount: 'Book 8, Pay for 7', minGroupSize: 8 },\n];\n\n// Data for Plan Trip CTA Button (ID: 6) - Primarily handles interaction via callback\nconst handlePlanTripClick = () => {\n  console.log('Navigating to Plan Your Trip page...');\n  // Use react-router-dom navigate function here, e.g., navigate('/plan-trip');\n};\n\nconst HomePage: React.FC = () => {\n  return (\n    <div className=\"flex flex-col min-h-screen\">\n      <Header />\n      <main className=\"flex-1\">\n        {/* Render UI components in the specified order */}\n\n        {/* 9. Introductory Text Block */}\n        <IntroductoryTextBlock headline={introHeadline} tagline={introTagline} />\n\n        {/* 7. Offers Banner */}\n        <OffersBanner offers={mockOffers} variant=\"inline-section\" />\n\n        {/* 1. Search Bar */}\n        <DestinationSearchBar onSearch={handleSearch} />\n\n        {/* 8. Filter Group */}\n        <DestinationFilterGroup onFilterChange={handleFilterChange} /* Uses default availableFilters */ />\n\n        {/* 2. Trending Destinations Carousel (3-D) */}\n        <TrendingDestinationsCarousel destinations={mockTrendingDestinations} />\n\n        {/* 3. Featured Destination Grid */}\n        <FeaturedDestinationGrid destinations={mockFeaturedDestinations} />\n\n        {/* 4. Journey Preview Carousel */}\n        <JourneyPreviewCarousel journeys={mockJourneys} />\n\n        {/* 5. Group Deals Section Card */}\n        <GroupDealsSection deals={mockGroupDeals} />\n\n        {/* 6. Plan Your Trip CTA Button */}\n        <PlanTripCtaButton onClick={handlePlanTripClick} />\n\n      </main>\n      <Footer />\n    </div>\n  );\n};\n\nexport default HomePage;\n"
    },
    {
        "fileName": "src/pages/DestinationDetailItineraryPage.tsx",
        "content": "import React, { useState, useCallback } from 'react';\nimport Header from '@/components/layout/Header';\nimport BodySidebar from '@/components/layout/BodySidebar';\nimport Footer from '@/components/layout/Footer';\n\n// Import UI Components for the main content area\nimport ImageGallery from '@/components/destination_detail_itinerary_page/ImageGallery';\nimport DestinationProfileCard from '@/components/destination_detail_itinerary_page/DestinationProfileCard';\nimport DescriptiveTextBlock from '@/components/destination_detail_itinerary_page/DescriptiveTextBlock';\nimport InteractiveMap from '@/components/destination_detail_itinerary_page/InteractiveMap';\nimport ItineraryStepper from '@/components/destination_detail_itinerary_page/ItineraryStepper';\nimport CostOverview from '@/components/destination_detail_itinerary_page/CostOverview';\nimport AiSuggestionPanel from '@/components/destination_detail_itinerary_page/AiSuggestionPanel';\nimport AccommodationList from '@/components/destination_detail_itinerary_page/AccommodationList';\nimport AccommodationFilterGroup, { Filters as AccommodationFiltersType } from '@/components/destination_detail_itinerary_page/AccommodationFilterGroup';\nimport ActionButtons from '@/components/destination_detail_itinerary_page/ActionButtons';\nimport GroupInviteModal from '@/components/destination_detail_itinerary_page/GroupInviteModal';\n\n// Placeholder Data Generation\n\n// 1. Image Gallery Data\nconst mockImages = [\n  { src: 'https://via.placeholder.com/1200x600/0000FF/808080?text=Destination+View+1', alt: 'Scenic view of the destination' },\n  { src: 'https://via.placeholder.com/1200x600/FF0000/FFFFFF?text=Attraction+Highlight', alt: 'Highlight attraction' },\n  { src: 'https://via.placeholder.com/1200x600/00FF00/000000?text=Local+Culture', alt: 'Local cultural experience' },\n];\nconst mockDestinationName = 'Paris, France';\n\n// 2. Destination Profile Card Data\nconst mockDestinationProfile = {\n  name: 'Paris, France',\n  location: 'Western Europe',\n  description: 'The City of Light, renowned for its art, fashion, gastronomy, and culture. Iconic landmarks include the Eiffel Tower, Louvre Museum, and Notre-Dame Cathedral.',\n  keyAttractions: ['Eiffel Tower', 'Louvre Museum', 'Notre-Dame', 'Arc de Triomphe'],\n  bestSeasons: ['Spring (Apr-Jun)', 'Fall (Sep-Oct)'],\n  featuredHighlights: [\n    'World-class museums and art galleries.',\n    'Romantic Seine River cruises.',\n    'Charming neighborhoods like Montmartre.',\n    'Exquisite French cuisine and patisseries.',\n  ],\n};\n\n// 3. Descriptive Text Block Data\nconst mockDescriptiveContent = `\n  <p>Paris's history stretches back over 2,000 years. From its origins as a Roman town to its role as the epicenter of the French Revolution and the Belle Époque, the city has shaped global culture.</p>\n  <p>Explore the Marais district's historic architecture, wander through the Latin Quarter's intellectual haunts, or simply enjoy a coffee at a sidewalk café, soaking in the unique Parisian atmosphere. Each arrondissement offers a distinct flavor and experience.</p>\n  <strong>Cultural Etiquette:</strong> Saying <em>\"Bonjour\"</em> (Hello) and <em>\"Merci\"</em> (Thank you) is customary when entering shops or interacting with locals.\n`;\n\n// 4. Interactive Map Data (Placeholder - requires library integration)\nconst mockRouteData = [\n  {\n    id: 'route1',\n    stops: [\n      { id: 'stop1', name: 'Eiffel Tower', coordinates: [2.2945, 48.8584] },\n      { id: 'stop2', name: 'Louvre Museum', coordinates: [2.3376, 48.8606] },\n    ],\n  },\n];\n\n// 5. Itinerary Stepper Data\nconst mockItinerary = [\n  {\n    day: 1,\n    title: 'Arrival & Iconic Landmarks',\n    activities: [\n      { id: 'act1', name: 'Arrive in Paris & Check-in', description: 'Settle into your accommodation.', time: 'Afternoon', location: 'Hotel', cost: 0, isCustomizable: false },\n      { id: 'act2', name: 'Eiffel Tower Visit', description: 'Ascend the iconic tower for panoramic views.', time: 'Evening', location: 'Champ de Mars', cost: 25, isCustomizable: true },\n      { id: 'act3', name: 'Seine River Cruise', description: 'Enjoy a relaxing cruise.', time: 'Night', location: 'Seine River', cost: 15, isCustomizable: true },\n    ],\n  },\n  {\n    day: 2,\n    title: 'Art, History & Montmartre Charm',\n    activities: [\n      { id: 'act4', name: 'Louvre Museum Tour', description: 'Explore world-famous art collections.', time: 'Morning', location: 'Louvre', cost: 17, isCustomizable: true },\n      { id: 'act5', name: 'Walk through Tuileries Garden', description: 'Stroll towards Place de la Concorde.', time: 'Afternoon', location: 'Tuileries Garden', cost: 0, isCustomizable: false },\n      { id: 'act6', name: 'Explore Montmartre & Sacré-Cœur', description: 'Visit the artists\\' square and basilica.', time: 'Late Afternoon', location: 'Montmartre', cost: 5, isCustomizable: true },\n    ],\n  },\n];\n\n// 7. Cost Overview Data\nconst mockTotalCost = 1250;\nconst mockCostBreakdown = {\n  accommodation: 600,\n  activities: 150,\n  food: 350,\n  transport: 150,\n};\n\n// 8. AI Suggestion Panel Data\nconst mockSuggestions = [\n  { id: 'sug1', type: 'activity', title: 'Visit Musée d\\'Orsay', description: 'Focuses on Impressionist art.', reason: 'Similar to Louvre interest' },\n  { id: 'sug2', type: 'accommodation', title: 'Hotel Le Littré', description: '4-star hotel near Montparnasse.', reason: 'Matches budget, good reviews' },\n  { id: 'sug3', type: 'route', title: 'Day trip to Versailles', description: 'Explore the grand palace.', reason: 'Popular excursion from Paris' },\n];\n\n// 9. Accommodation List Data\nconst mockAccommodations = [\n  { id: 'acc1', name: 'Hotel Regina Louvre', imageUrl: 'https://via.placeholder.com/300x200/cccccc/000000?text=Hotel+Regina', rating: 4.8, pricePerNight: 450, currency: 'EUR', location: 'Opposite Louvre', type: 'Hotel', detailsUrl: '#' },\n  { id: 'acc2', name: 'Generator Paris Hostel', imageUrl: 'https://via.placeholder.com/300x200/cccccc/000000?text=Generator+Hostel', rating: 4.2, pricePerNight: 40, currency: 'EUR', location: '10th Arrondissement', type: 'Hostel', detailsUrl: '#' },\n  { id: 'acc3', name: 'Citadines Apart\\'hotel Saint-Germain-des-Prés', imageUrl: 'https://via.placeholder.com/300x200/cccccc/000000?text=Citadines+Apart', rating: 4.5, pricePerNight: 220, currency: 'EUR', location: 'Saint-Germain', type: 'Apartment', detailsUrl: '#' },\n];\n\n// Component Definition\n\nexport default function DestinationDetailItineraryPage() {\n  const [isInWishlist, setIsInWishlist] = useState(false);\n  const [isInviteModalOpen, setIsInviteModalOpen] = useState(false);\n  const [filters, setFilters] = useState<AccommodationFiltersType>({});\n  const [currentItinerary, setCurrentItinerary] = useState(mockItinerary);\n  const [currentSuggestions, setCurrentSuggestions] = useState(mockSuggestions);\n  const [currentTotalCost, setCurrentTotalCost] = useState(mockTotalCost);\n  const [currentCostBreakdown, setCurrentCostBreakdown] = useState(mockCostBreakdown);\n\n  // Handler Functions (Placeholders)\n  const handleToggleWishlist = useCallback(() => {\n    setIsInWishlist(prev => !prev);\n    console.log('Wishlist toggled');\n    // Add logic to update backend/state\n  }, []);\n\n  const handleBookNow = useCallback(() => {\n    console.log('Book Now clicked');\n    // Add logic to navigate to booking page or process\n  }, []);\n\n  const handleStartGroupPlanning = useCallback(() => {\n    console.log('Start Group Planning clicked');\n    setIsInviteModalOpen(true);\n  }, []);\n\n  const handleInvite = useCallback((emails: string[], message?: string) => {\n    console.log('Inviting emails:', emails, 'with message:', message);\n    // Add logic to send invites\n    setIsInviteModalOpen(false); // Close modal after sending\n  }, []);\n\n  const handleFilterChange = useCallback((newFilters: AccommodationFiltersType) => {\n    console.log('Filters changed:', newFilters);\n    setFilters(newFilters);\n    // Add logic to re-fetch or filter accommodations based on newFilters\n  }, []);\n\n  const handleResetFilters = useCallback(() => {\n    console.log('Resetting filters');\n    setFilters({});\n     // Add logic to reset accommodation list\n  }, []);\n\n  const handleRemoveActivity = useCallback((day: number, activityId: string) => {\n    console.log(`Removing activity ${activityId} from day ${day}`);\n    setCurrentItinerary(prevItinerary => {\n        // Recalculate cost/update state based on removal\n        // This is a simplified example\n        return prevItinerary.map(d => {\n            if (d.day === day) {\n                return { ...d, activities: d.activities.filter(a => a.id !== activityId) };\n            }\n            return d;\n        });\n    });\n    // Update cost overview\n    // setCurrentTotalCost(...);\n    // setCurrentCostBreakdown(...);\n  }, []);\n\n  const handleAddSuggestion = useCallback((suggestion: typeof mockSuggestions[0]) => {\n    console.log('Adding suggestion:', suggestion);\n    // Logic to add suggestion to itinerary or handle differently based on type\n    if (suggestion.type === 'activity') {\n        // Example: Add to day 1 for simplicity\n        const newActivity = { id: suggestion.id, name: suggestion.title, description: suggestion.description || '', time: 'TBD', isCustomizable: true };\n        setCurrentItinerary(prev => prev.map(d => d.day === 1 ? {...d, activities: [...d.activities, newActivity]} : d));\n    }\n    // Remove the suggestion from the list after adding\n    setCurrentSuggestions(prev => prev.filter(s => s.id !== suggestion.id));\n     // Update cost overview\n    // setCurrentTotalCost(...);\n    // setCurrentCostBreakdown(...);\n  }, []);\n\n  // Filter accommodations based on state (simple example)\n  const filteredAccommodations = mockAccommodations.filter(acc => {\n    if (filters.budget && (acc.pricePerNight < filters.budget[0] || acc.pricePerNight > filters.budget[1])) return false;\n    if (filters.rating && acc.rating < filters.rating) return false;\n    if (filters.type && acc.type !== filters.type) return false;\n    if (filters.amenities && filters.amenities.length > 0) {\n      // Placeholder: Assume accommodation object has an 'amenities' array\n      // const accAmenities = acc.amenities || [];\n      // if (!filters.amenities.every(fa => accAmenities.includes(fa))) return false;\n    }\n    return true;\n  });\n\n  return (\n    <div className=\"flex flex-col min-h-screen bg-background\">\n      <Header />\n      <div className=\"flex flex-1 container mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n        {/* Static Left Sidebar (as per layout key LSB(S)) */} \n        <BodySidebar className=\"w-64\" />\n\n        {/* Main Content Area (as per layout key B) */} \n        <main className=\"flex-1 lg:ml-6 grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          \n          {/* Main Content Column */} \n          <div className=\"lg:col-span-2 space-y-6\">\n            {/* Action Buttons (Component 11) */} \n            <ActionButtons\n              isInWishlist={isInWishlist}\n              onToggleWishlist={handleToggleWishlist}\n              onBookNow={handleBookNow}\n              onStartGroupPlanning={handleStartGroupPlanning}\n            />\n\n            {/* Image Gallery (Component 1) */} \n            <ImageGallery images={mockImages} destinationName={mockDestinationName} />\n\n            {/* Destination Profile Card (Component 2) */} \n            <DestinationProfileCard destination={mockDestinationProfile} />\n\n            {/* Descriptive Text Block (Component 3) */} \n            <DescriptiveTextBlock title=\"Discover More\" content={mockDescriptiveContent} />\n\n            {/* Interactive Map (Component 4) */} \n            <InteractiveMap routeData={mockRouteData} />\n\n            {/* Itinerary Stepper (Component 5) - Includes Customization (Component 6 internally) */} \n             <h2 className=\"text-2xl font-semibold mt-8 mb-0\">Proposed Itinerary</h2>\n            <ItineraryStepper \n                itinerary={currentItinerary} \n                onRemoveActivity={handleRemoveActivity} \n                // onAddActivity could be implemented here or via AI panel\n            />\n\n            {/* Accommodation List Section Title */} \n            <h2 className=\"text-2xl font-semibold mt-8 mb-4\">Accommodation Options</h2>\n            \n            {/* Accommodation List (Component 9) */} \n            <AccommodationList accommodations={filteredAccommodations} />\n\n          </div>\n\n          {/* Sidebar-like Column within Main Content */} \n          <div className=\"lg:col-span-1 space-y-6\">\n             {/* Accommodation Filter Group (Component 10) */} \n             <AccommodationFilterGroup \n                initialFilters={filters} \n                onFilterChange={handleFilterChange}\n                onResetFilters={handleResetFilters}\n                // Pass available amenities/types/maxPrice if needed from real data\n            />\n\n             {/* Cost Overview (Component 7) */} \n             <CostOverview \n                totalCost={currentTotalCost} \n                breakdown={currentCostBreakdown} \n                currency=\"EUR\"\n            />\n\n             {/* AI Suggestion Panel (Component 8) */} \n             <AiSuggestionPanel \n                suggestions={currentSuggestions} \n                onAddSuggestion={handleAddSuggestion} \n            />\n          </div>\n\n        </main>\n      </div>\n      <Footer />\n\n      {/* Group Invite Modal (Component 12) - Rendered outside layout flow */} \n      <GroupInviteModal\n        isOpen={isInviteModalOpen}\n        onOpenChange={setIsInviteModalOpen}\n        tripName={mockDestinationName}\n        onInvite={handleInvite}\n      />\n    </div>\n  );\n}\n"
    },
    {
        "fileName": "src/pages/HotelDetailsBookingPage.tsx",
        "content": "import React, { useState } from 'react';\nimport { useParams } from 'react-router-dom'; // Import useParams to potentially use the hotel ID\n\n// Layout Components\nimport Header from '@/components/layout/Header';\nimport Footer from '@/components/layout/Footer';\n\n// UI Components for Hotel Details Page\nimport HotelImageGallery from '@/components/hotel_details_booking_page/HotelImageGallery';\nimport HotelPrimaryInfo from '@/components/hotel_details_booking_page/HotelPrimaryInfo';\nimport PriceAvailabilityDisplay from '@/components/hotel_details_booking_page/PriceAvailabilityDisplay';\nimport HotelAmenities from '@/components/hotel_details_booking_page/HotelAmenities';\nimport LocationMap from '@/components/hotel_details_booking_page/LocationMap';\nimport BookingOptionsForm from '@/components/hotel_details_booking_page/BookingOptionsForm';\nimport BookingCostSummary from '@/components/hotel_details_booking_page/BookingCostSummary';\nimport BookingFeedbackDisplay from '@/components/hotel_details_booking_page/BookingFeedbackDisplay';\nimport BookingActions from '@/components/hotel_details_booking_page/BookingActions';\nimport HotelReviews from '@/components/hotel_details_booking_page/HotelReviews';\n\n// Placeholder Data\nconst mockHotelImages = [\n  'https://via.placeholder.com/1200x600/0000FF/FFFFFF?text=Hotel+Facade',\n  'https://via.placeholder.com/1200x600/FF0000/FFFFFF?text=Deluxe+Room',\n  'https://via.placeholder.com/1200x600/00FF00/FFFFFF?text=Pool+Area',\n  'https://via.placeholder.com/1200x600/FFFF00/000000?text=Restaurant',\n  'https://via.placeholder.com/1200x600/FFA500/FFFFFF?text=Lobby',\n];\n\nconst mockHotelInfo = {\n  name: 'The Grand Coastal Resort',\n  starRating: 5,\n  averageRating: 4.7,\n  reviewCount: 1258,\n};\n\nconst mockPriceInfo = {\n  basePrice: 250,\n  discount: 25, // Example discount\n  currency: 'USD',\n  isAvailable: true,\n};\n\nconst mockAmenities = [\n  { iconName: 'Wifi', name: 'Free Wi-Fi' },\n  { iconName: 'ParkingSquare', name: 'Valet Parking' },\n  { iconName: 'UtensilsCrossed', name: 'On-site Restaurant' },\n  { iconName: 'Dumbbell', name: 'Fitness Center' },\n  { iconName: 'Waves', name: 'Outdoor Pool' },\n  { iconName: 'ConciergeBell', name: 'Concierge Service' },\n  { iconName: 'AirVent', name: 'Air Conditioning' },\n  { iconName: 'Tv', name: 'Flat Screen TV' },\n];\n\nconst mockLocation = {\n  latitude: 34.0522,\n  longitude: -118.2437, // Example coordinates (Los Angeles)\n  hotelName: 'The Grand Coastal Resort',\n};\n\nconst mockRoomTypes = [\n  { value: 'standard', label: 'Standard Room' },\n  { value: 'deluxe', label: 'Deluxe Room (Ocean View)' },\n  { value: 'suite', label: 'Executive Suite' },\n];\n\nconst mockCost = {\n  subtotal: 450, // Example for 2 nights after discount\n  taxes: 50,\n  fees: 15,\n  discountAmount: 50, // Total discount for 2 nights\n  discountLabel: 'Early Bird Discount',\n  total: 465,\n  nights: 2,\n};\n\nconst mockReviews = [\n  {\n    id: 'r1', author: 'Alice B.', avatarUrl: 'https://via.placeholder.com/40x40/avatar1', rating: 5,\n    date: '2024-07-15T10:00:00Z', title: 'Absolutely Perfect!',\n    text: 'From check-in to check-out, everything was flawless. The room was spacious and clean, the views were incredible, and the staff went above and beyond. Highly recommend!'\n  },\n  {\n    id: 'r2', author: 'Charles D.', avatarUrl: 'https://via.placeholder.com/40x40/avatar2', rating: 4,\n    date: '2024-07-10T14:30:00Z', title: 'Great Stay, Minor Issue',\n    text: 'Loved the location and the amenities. The pool area was fantastic. Only minor issue was the Wi-Fi speed in the evenings, but overall a very enjoyable stay.'\n  },\n  {\n    id: 'r3', author: 'Eva F.', avatarUrl: 'https://via.placeholder.com/40x40/avatar3', rating: 5,\n    date: '2024-06-28T09:15:00Z', title: 'Family Vacation Heaven',\n    text: 'We traveled with two young kids and this resort was perfect. Plenty of activities, kid-friendly dining options, and the staff were so accommodating. We will be back!'\n  },\n];\n\nconst HotelDetailsBookingPage: React.FC = () => {\n  // const { id } = useParams(); // Get hotel ID from route, e.g., to fetch specific hotel data\n  // console.log('Hotel ID:', id);\n\n  // State for interactive elements (example)\n  const [bookingData, setBookingData] = useState<any>(null); // Store form data\n  const [feedback, setFeedback] = useState<{ message: string | null; type: 'error' | 'success' | 'info' | 'warning' }>({ message: null, type: 'info' });\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleBookingFormSubmit = (data: any) => {\n    console.log('Booking Options Submitted:', data);\n    setBookingData(data); // Update state with form selections\n    // Simulate updating price or checking availability\n    setFeedback({ message: 'Price updated based on your selection.', type: 'info' });\n    // In a real app, you'd likely trigger an API call here\n  };\n\n  const handleBookNow = () => {\n    if (!bookingData) {\n      setFeedback({ message: 'Please select your booking options first.', type: 'warning' });\n      return;\n    }\n    console.log('Attempting to book with data:', bookingData);\n    setIsLoading(true);\n    setFeedback({ message: null, type: 'info' }); // Clear previous feedback\n    // Simulate API call\n    setTimeout(() => {\n      setIsLoading(false);\n      // Simulate success or failure\n      const success = Math.random() > 0.2; // 80% chance of success\n      if (success) {\n        setFeedback({ message: 'Booking confirmed! Check your email for details.', type: 'success' });\n      } else {\n        setFeedback({ message: 'Booking failed. Please try again or contact support.', type: 'error' });\n      }\n    }, 2000);\n  };\n\n  const handleSaveToWishlist = () => {\n    console.log('Save to Wishlist clicked');\n    // Add wishlist logic here (e.g., API call)\n    setFeedback({ message: 'Hotel added to your wishlist!', type: 'success' });\n    setTimeout(() => setFeedback({ message: null, type: 'info'}), 3000); // Clear after 3s\n  };\n\n  const handleAddToGroup = () => {\n    console.log('Add to Group Itinerary clicked');\n    // Add group itinerary logic here (e.g., API call)\n     setFeedback({ message: 'Hotel added to group itinerary.', type: 'success' });\n     setTimeout(() => setFeedback({ message: null, type: 'info'}), 3000); // Clear after 3s\n  };\n\n  return (\n    <div className=\"flex flex-col min-h-screen bg-background\">\n      <Header />\n\n      <main className=\"flex-1 container mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Left Column (or Main Content on smaller screens) */}\n          <div className=\"lg:col-span-2 space-y-8\">\n            {/* Component 1: Gallery */}\n            <HotelImageGallery images={mockHotelImages} />\n\n            {/* Component 2: Key Metric Display */}\n            <HotelPrimaryInfo\n              name={mockHotelInfo.name}\n              starRating={mockHotelInfo.starRating}\n              averageRating={mockHotelInfo.averageRating}\n              reviewCount={mockHotelInfo.reviewCount}\n            />\n\n            {/* Component 4: Amenities List */}\n            <HotelAmenities amenities={mockAmenities} />\n\n            {/* Component 5: Embedded Map */}\n            <LocationMap\n              latitude={mockLocation.latitude}\n              longitude={mockLocation.longitude}\n              hotelName={mockLocation.hotelName}\n            />\n\n             {/* Component 10: Reviews & Ratings */}\n            <HotelReviews\n              reviews={mockReviews}\n              averageRating={mockHotelInfo.averageRating}\n              totalReviews={mockHotelInfo.reviewCount}\n              // Add handlers for onLoadMore, onSortChange if implementing those features\n            />\n\n          </div>\n\n          {/* Right Column (Booking/Actions - sticky potentially) */}\n          <div className=\"lg:col-span-1 space-y-6 lg:sticky lg:top-24 self-start\"> {/* sticky top matches header height + padding */}\n            {/* Component 3: Price & Availability Tracker */}\n            <PriceAvailabilityDisplay\n              basePrice={mockPriceInfo.basePrice}\n              discount={mockPriceInfo.discount}\n              currency={mockPriceInfo.currency}\n              isAvailable={mockPriceInfo.isAvailable}\n              // Pass dynamic data based on form state if needed\n              selectedDates={bookingData?.dates}\n              guestCount={bookingData?.guests}\n              roomType={bookingData?.roomType}\n            />\n\n            {/* Component 6: Booking Options Form */}\n            <BookingOptionsForm\n              onSubmit={handleBookingFormSubmit}\n              availableRoomTypes={mockRoomTypes}\n              isLoading={isLoading}\n              // Provide default values or sync with state\n            />\n\n             {/* Component 7: Cost Summary - Conditionally render if booking data exists? */}\n            {bookingData && (\n                <BookingCostSummary\n                  subtotal={mockCost.subtotal} // Should calculate dynamically based on bookingData\n                  taxes={mockCost.taxes}\n                  fees={mockCost.fees}\n                  discountAmount={mockCost.discountAmount}\n                  discountLabel={mockCost.discountLabel}\n                  total={mockCost.total} // Should calculate dynamically\n                  currency={mockPriceInfo.currency}\n                  nights={mockCost.nights} // Should calculate dynamically\n                />\n            )}\n\n            {/* Component 8: Validation & Feedback */}\n            <BookingFeedbackDisplay\n              message={feedback.message}\n              type={feedback.type}\n            />\n\n            {/* Component 9: Button Group */}\n            <BookingActions\n              onBook={handleBookNow}\n              onSaveToWishlist={handleSaveToWishlist}\n              onAddToGroup={handleAddToGroup}\n              isBookingLoading={isLoading}\n              canBook={!!bookingData && mockPriceInfo.isAvailable} // Example condition\n            />\n\n          </div>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n};\n\nexport default HotelDetailsBookingPage;\n"
    },
    {
        "fileName": "src/pages/GroupBookingPage.tsx",
        "content": "import React, { useState } from 'react';\nimport Header from '@/components/layout/Header';\nimport IntegratedSidebar from '@/components/layout/IntegratedSidebar';\nimport Footer from '@/components/layout/Footer';\nimport GroupBookingStepper from '@/components/group_booking_trip_management_page/GroupBookingStepper';\nimport InviteControls from '@/components/group_booking_trip_management_page/InviteControls';\nimport GroupStatusTracker from '@/components/group_booking_trip_management_page/GroupStatusTracker';\nimport GroupChatWidget from '@/components/group_booking_trip_management_page/GroupChatWidget';\nimport ItineraryEditor from '@/components/group_booking_trip_management_page/ItineraryEditor';\nimport HotelSelectionPanel from '@/components/group_booking_trip_management_page/HotelSelectionPanel';\nimport GroupDiscountProgress from '@/components/group_booking_trip_management_page/GroupDiscountProgress';\nimport CostSplitPaymentTable from '@/components/group_booking_trip_management_page/CostSplitPaymentTable';\nimport RoleAssignmentDisplay from '@/components/group_booking_trip_management_page/RoleAssignmentDisplay';\nimport ParticipationControl from '@/components/group_booking_trip_management_page/ParticipationControl';\nimport BookingHistoryList from '@/components/group_booking_trip_management_page/BookingHistoryList';\nimport NotificationCenter from '@/components/group_booking_trip_management_page/NotificationCenter';\nimport { useToast } from '@/components/ui/use-toast'; // For invite controls feedback\n\n// --- Mock Data Structures Definition ---\ninterface GroupMember { id: string; name: string; avatarUrl?: string; status: 'accepted' | 'pending' | 'declined'; }\ninterface ChatMessage { id: string; senderId: string; senderName: string; senderAvatar?: string; text: string; timestamp: Date; }\ninterface ItineraryItem { id: string; title: string; date: Date; time?: string; location?: string; description?: string; suggestedBy?: string; votes?: number; }\ninterface HotelOption { id: string; name: string; imageUrl: string; rating: number; pricePerNight: number; currency?: string; amenities: string[]; location: string; isSelected?: boolean; votes?: number; }\ninterface ParticipantCost { id: string; name: string; role?: string; shareAmount: number; paidAmount: number; paymentMethod?: string; isPaymentConfirmed: boolean; }\ninterface RoleMember { id: string; name: string; avatarUrl?: string; role: string; permissions?: string[]; }\ntype ParticipationStatus = 'confirmed' | 'pending' | 'declined';\ninterface BookingHistoryItem { id: string; tripName: string; destination: string; startDate: Date; endDate: Date; status: 'ongoing' | 'completed' | 'cancelled' | 'pending'; bookingReference?: string; viewDetailsLink?: string; }\ninterface NotificationItem { id: string; type: 'info' | 'success' | 'warning' | 'error' | 'update'; message: string; timestamp: Date; read?: boolean; }\n\n// --- Placeholder Data ---\n\nconst mockGroupMembers: GroupMember[] = [\n  { id: 'leader-alice', name: 'Alice Wonderland', avatarUrl: '/placeholder-avatar.png', status: 'accepted' },\n  { id: 'user-bob', name: 'Bob The Builder', avatarUrl: '/placeholder-avatar.png', status: 'pending' },\n  { id: 'user-charlie', name: 'Charlie Chaplin', status: 'declined' },\n  { id: 'user-diana', name: 'Diana Prince', avatarUrl: '/placeholder-avatar.png', status: 'pending' },\n];\n\nconst mockMessages: ChatMessage[] = [\n  { id: 'msg1', senderId: 'leader-alice', senderName: 'Alice', text: 'Hey team, excited for the Paris trip!', timestamp: new Date(Date.now() - 60000 * 10) },\n  { id: 'msg2', senderId: 'userMe', senderName: 'You', text: 'Me too! Can we discuss hotel options?', timestamp: new Date(Date.now() - 60000 * 5) },\n  { id: 'msg3', senderId: 'user-diana', senderName: 'Diana', text: 'Sounds good!', timestamp: new Date(Date.now() - 60000 * 2) },\n];\n\nconst mockItineraryItems: ItineraryItem[] = [\n  { id: 'iti1', title: 'Arrival & Check-in', date: new Date(2024, 10, 15), time: '14:00', location: 'Hotel Le Grand', description: 'Settle in and relax', votes: 3 },\n  { id: 'iti2', title: 'Eiffel Tower Visit', date: new Date(2024, 10, 16), time: '10:00', location: 'Champ de Mars', description: 'Iconic landmark tour', suggestedBy: 'Alice', votes: 5 },\n  { id: 'iti3', title: 'Louvre Museum', date: new Date(2024, 10, 17), time: '09:30', location: 'Louvre Museum', description: 'Explore world-class art', votes: 4 },\n];\n\nconst mockHotelOptions: HotelOption[] = [\n  { id: 'hotel1', name: 'Hotel Le Grand', imageUrl: '/placeholder-hotel1.jpg', rating: 4.5, pricePerNight: 150, currency: 'EUR', amenities: ['wifi', 'restaurant', 'gym'], location: 'Central Paris', votes: 3 },\n  { id: 'hotel2', name: 'Parisian Charm Inn', imageUrl: '/placeholder-hotel2.jpg', rating: 4.2, pricePerNight: 120, currency: 'EUR', amenities: ['wifi', 'breakfast'], location: 'Near Montmartre', votes: 1 },\n  { id: 'hotel3', name: 'Riverside Suites', imageUrl: '/placeholder-hotel3.jpg', rating: 4.8, pricePerNight: 180, currency: 'EUR', amenities: ['wifi', 'pool', 'spa'], location: 'Seine Riverfront', votes: 0 },\n];\n\nconst mockParticipantsCost: ParticipantCost[] = [\n  { id: 'leader-alice', name: 'Alice Wonderland', role: 'Group Leader', shareAmount: 375, paidAmount: 375, paymentMethod: 'Card', isPaymentConfirmed: true },\n  { id: 'user-bob', name: 'Bob The Builder', shareAmount: 375, paidAmount: 0, isPaymentConfirmed: false },\n  { id: 'user-diana', name: 'Diana Prince', shareAmount: 375, paidAmount: 100, paymentMethod: 'Bank Transfer', isPaymentConfirmed: false },\n  // Assuming Charlie declined, not in cost split\n];\n\nconst mockRoleMembers: RoleMember[] = [\n  { id: 'leader-alice', name: 'Alice Wonderland', avatarUrl: '/placeholder-avatar.png', role: 'Group Leader', permissions: ['Manage Invites', 'Edit Itinerary'] },\n  { id: 'user-bob', name: 'Bob The Builder', avatarUrl: '/placeholder-avatar.png', role: 'Member' },\n  { id: 'user-diana', name: 'Diana Prince', avatarUrl: '/placeholder-avatar.png', role: 'Member' },\n];\n\nconst mockBookingHistory: BookingHistoryItem[] = [\n  { id: 'hist1', tripName: 'Rome Getaway', destination: 'Rome, Italy', startDate: new Date(2023, 5, 10), endDate: new Date(2023, 5, 15), status: 'completed', bookingReference: 'ROM123', viewDetailsLink: '#' },\n  { id: 'hist2', tripName: 'Tokyo Exploration', destination: 'Tokyo, Japan', startDate: new Date(2024, 1, 20), endDate: new Date(2024, 1, 28), status: 'completed', viewDetailsLink: '#' },\n  { id: 'hist3', tripName: 'Paris Adventure', destination: 'Paris, France', startDate: new Date(2024, 10, 15), endDate: new Date(2024, 10, 20), status: 'ongoing' },\n];\n\nconst mockNotifications: NotificationItem[] = [\n    { id: 'n1', type: 'success', message: 'Diana Prince accepted the invite!', timestamp: new Date(Date.now() - 60000 * 5), read: false },\n    { id: 'n2', type: 'update', message: 'Itinerary updated: Added Louvre Museum.', timestamp: new Date(Date.now() - 60000 * 15), read: false },\n    { id: 'n3', type: 'info', message: 'Payment reminder sent to Bob The Builder.', timestamp: new Date(Date.now() - 60000 * 60), read: true },\n];\n\n\nconst GroupBookingPage: React.FC = () => {\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n  const { toast } = useToast();\n\n  // --- State Management for Interactive Components ---\n  const [groupMembers, setGroupMembers] = useState<GroupMember[]>(mockGroupMembers);\n  const [messages, setMessages] = useState<ChatMessage[]>(mockMessages);\n  const [itineraryItems, setItineraryItems] = useState<ItineraryItem[]>(mockItineraryItems);\n  const [selectedHotel, setSelectedHotel] = useState<string | null>(null);\n  const [hotelOptions, setHotelOptions] = useState<HotelOption[]>(mockHotelOptions);\n  const [participantsCost, setParticipantsCost] = useState<ParticipantCost[]>(mockParticipantsCost);\n  const [participationStatus, setParticipationStatus] = useState<ParticipationStatus>('pending'); // Example for current user\n\n  const toggleSidebar = () => {\n    setIsSidebarOpen(!isSidebarOpen);\n  };\n\n  // --- Placeholder Handlers ---\n  const handleRemind = (memberId: string) => {\n    console.log(`Reminding member ${memberId}...`);\n    toast({ title: 'Reminder Sent', description: `Reminder sent to ${groupMembers.find(m => m.id === memberId)?.name}.` });\n  };\n\n  const handleSendMessage = (text: string, file?: File) => {\n    console.log('Sending message:', text, file);\n    const newMessage: ChatMessage = {\n      id: `msg${Date.now()}`,\n      senderId: 'userMe',\n      senderName: 'You',\n      text: text,\n      timestamp: new Date(),\n    };\n    setMessages([...messages, newMessage]);\n  };\n\n  const handleAddItinerary = (item: Omit<ItineraryItem, 'id'>) => {\n    console.log('Adding itinerary item:', item);\n    const newItem = { ...item, id: `iti${Date.now()}`, votes: 0 };\n    setItineraryItems([...itineraryItems, newItem]);\n    toast({ title: 'Itinerary Updated', description: `Added: ${item.title}` });\n  };\n\n  const handleUpdateItinerary = (updatedItem: ItineraryItem) => {\n    console.log('Updating itinerary item:', updatedItem);\n    setItineraryItems(itineraryItems.map(item => item.id === updatedItem.id ? updatedItem : item));\n    toast({ title: 'Itinerary Updated', description: `Updated: ${updatedItem.title}` });\n  };\n\n  const handleDeleteItinerary = (itemId: string) => {\n    console.log('Deleting itinerary item:', itemId);\n    const deletedItem = itineraryItems.find(item => item.id === itemId);\n    setItineraryItems(itineraryItems.filter(item => item.id !== itemId));\n    if (deletedItem) {\n        toast({ title: 'Itinerary Updated', description: `Removed: ${deletedItem.title}`, variant: 'destructive' });\n    }\n  };\n\n  const handleSelectHotel = (hotelId: string) => {\n    console.log('Selecting hotel:', hotelId);\n    setSelectedHotel(hotelId);\n    toast({ title: 'Hotel Selected', description: `Group selection set to ${hotelOptions.find(h => h.id === hotelId)?.name}.` });\n  };\n\n  const handleVoteHotel = (hotelId: string) => {\n      console.log('Voting for hotel:', hotelId);\n      setHotelOptions(prevOptions =>\n        prevOptions.map(h => h.id === hotelId ? {...h, votes: (h.votes || 0) + 1} : h)\n      );\n      toast({ title: 'Vote Cast', description: `You voted for ${hotelOptions.find(h => h.id === hotelId)?.name}.` });\n  };\n\n   const handleCommentHotel = (hotelId: string) => {\n      console.log('Commenting on hotel:', hotelId);\n      // Add actual comment logic/UI trigger here\n      toast({ title: 'Comment Added (Placeholder)', description: `Comment added for ${hotelOptions.find(h => h.id === hotelId)?.name}.` });\n   };\n\n  const handleUpdatePayment = (participantId: string, paidAmount: number, paymentMethod?: string) => {\n    console.log(`Updating payment for ${participantId}: Amount ${paidAmount}, Method: ${paymentMethod}`);\n    setParticipantsCost(prevCosts =>\n      prevCosts.map(p =>\n        p.id === participantId ? { ...p, paidAmount, paymentMethod: paymentMethod || p.paymentMethod } : p\n      )\n    );\n    // Add toast feedback if needed\n  };\n\n  const handleConfirmPayment = (participantId: string, isConfirmed: boolean) => {\n    console.log(`Confirming payment for ${participantId}: ${isConfirmed}`);\n    setParticipantsCost(prevCosts =>\n      prevCosts.map(p => (p.id === participantId ? { ...p, isPaymentConfirmed: isConfirmed } : p))\n    );\n     toast({ title: 'Payment Confirmation Updated', description: `Payment for ${participantsCost.find(p => p.id === participantId)?.name} marked as ${isConfirmed ? 'confirmed' : 'unconfirmed'}.` });\n  };\n\n  const handleStatusChange = (newStatus: ParticipationStatus) => {\n    console.log('Updating participation status:', newStatus);\n    setParticipationStatus(newStatus);\n    toast({ title: 'Participation Status Updated', description: `Your status is now ${newStatus}.` });\n  };\n\n  const currentGroupSize = groupMembers.filter(m => m.status === 'accepted').length;\n  const requiredSizeForDiscount = 5; // Example threshold\n  const totalCost = 1500; // Example total cost\n\n  return (\n    <div className=\"flex flex-col min-h-screen bg-background\">\n      <Header toggleSidebar={toggleSidebar} hasCollapsibleSidebar={true} />\n      <div className=\"flex flex-1 overflow-hidden\">\n        <IntegratedSidebar isOpen={isSidebarOpen} onClose={toggleSidebar} />\n        <main className=\"flex-1 p-4 md:p-6 lg:p-8 overflow-y-auto space-y-6\">\n          {/* Render UI components in order specified in Page Data JSON */}\n          <GroupBookingStepper initialStep={1} />\n          <InviteControls groupId=\"paris2024\" />\n          <GroupStatusTracker members={groupMembers} onRemind={handleRemind} />\n          <GroupChatWidget\n            messages={messages}\n            currentUserId=\"userMe\" // Assume 'userMe' is the ID of the logged-in user\n            onSendMessage={handleSendMessage}\n          />\n          <ItineraryEditor\n            items={itineraryItems}\n            onAddItem={handleAddItinerary}\n            onUpdateItem={handleUpdateItinerary}\n            onDeleteItem={handleDeleteItinerary}\n          />\n          <HotelSelectionPanel\n             hotelOptions={hotelOptions}\n             selectedHotelId={selectedHotel}\n             onSelectHotel={handleSelectHotel}\n             onVote={handleVoteHotel}\n             onComment={handleCommentHotel}\n          />\n          <GroupDiscountProgress\n            currentGroupSize={currentGroupSize}\n            requiredSizeForDiscount={requiredSizeForDiscount}\n            discountPercentage={10} // Example discount\n            discountDescription=\"Paris Trip Group Discount\"\n          />\n          <CostSplitPaymentTable\n             participants={participantsCost}\n             totalCost={totalCost}\n             currency=\"EUR\"\n             onUpdatePayment={handleUpdatePayment}\n             onConfirmPayment={handleConfirmPayment}\n          />\n          <RoleAssignmentDisplay members={mockRoleMembers} groupLeaderId=\"leader-alice\" />\n          <ParticipationControl\n             currentStatus={participationStatus}\n             onStatusChange={handleStatusChange}\n             tripName=\"Paris Adventure\"\n          />\n          <BookingHistoryList bookings={mockBookingHistory} />\n          <NotificationCenter notifications={mockNotifications} />\n        </main>\n      </div>\n      <Footer />\n    </div>\n  );\n};\n\nexport default GroupBookingPage;\n"
    },
    {
        "fileName": "src/pages/UserDashboardPage.tsx",
        "content": "import React, { useState } from 'react';\nimport Header from '@/components/layout/Header';\nimport IntegratedSidebar from '@/components/layout/IntegratedSidebar';\nimport Footer from '@/components/layout/Footer';\nimport UserProfileCard from '@/components/user_dashboard_account_profile_management/UserProfileCard';\nimport DashboardTabs from '@/components/user_dashboard_account_profile_management/DashboardTabs';\nimport DashboardMetrics from '@/components/user_dashboard_account_profile_management/DashboardMetrics';\nimport BookingList from '@/components/user_dashboard_account_profile_management/BookingList';\nimport SavedTripsGroup from '@/components/user_dashboard_account_profile_management/SavedTripsGroup';\nimport SupportWidget from '@/components/user_dashboard_account_profile_management/SupportWidget';\nimport NotificationList from '@/components/user_dashboard_account_profile_management/NotificationList';\nimport PaymentHistoryTable from '@/components/user_dashboard_account_profile_management/PaymentHistoryTable';\nimport DashboardActionButtons from '@/components/user_dashboard_account_profile_management/DashboardActionButtons';\nimport UserSettingsForm from '@/components/user_dashboard_account_profile_management/UserSettingsForm';\n\n// --- Placeholder Data --- \n\nconst mockUser = {\n  name: 'Alex Johnson',\n  email: 'alex.j@example.com',\n  imageUrl: 'https://via.placeholder.com/150/0077CC/FFFFFF?text=AJ',\n  contactInfo: '+1 123-456-7890',\n};\n\nconst mockMetrics = {\n  currentBookings: 2,\n  upcomingTrips: 1,\n  pastTravels: 5,\n  totalRewards: '1250 pts',\n  pendingPayments: 0,\n  unreadNotifications: 3,\n  groupInvitations: 1,\n};\n\nconst mockBookings = [\n  { id: 'b1', destination: 'Paris Getaway', startDate: '2024-08-15', endDate: '2024-08-22', status: 'active' as const, imageUrl: 'https://via.placeholder.com/150/771796' },\n  { id: 'b2', destination: 'Tokyo Adventure', startDate: '2024-09-10', endDate: '2024-09-20', status: 'upcoming' as const, imageUrl: 'https://via.placeholder.com/150/FF6347' },\n  { id: 'b3', destination: 'Rome Weekend', startDate: '2024-05-01', endDate: '2024-05-04', status: 'completed' as const },\n  { id: 'b4', destination: 'London Business Trip', startDate: '2024-03-10', endDate: '2024-03-15', status: 'completed' as const },\n  { id: 'b5', destination: 'Berlin Exploration', startDate: '2024-01-20', endDate: '2024-01-25', status: 'cancelled' as const },\n];\n\nconst mockSavedTrips = [\n  {\n    id: 's1',\n    title: 'Summer Italy Road Trip',\n    type: 'itinerary' as const,\n    imageUrl: 'https://via.placeholder.com/300/FFD700/000000?text=Italy',\n    description: 'Plan for Aug 2025',\n  },\n  {\n    id: 's2',\n    title: 'Thailand Friends Trip',\n    type: 'group' as const,\n    imageUrl: 'https://via.placeholder.com/300/20B2AA/FFFFFF?text=Thailand',\n    description: 'Dec 2024 - Finalizing details',\n    participants: [\n      { name: 'Sarah Lee', imageUrl: 'https://via.placeholder.com/40/FF69B4/FFFFFF?text=SL' },\n      { name: 'Mike Brown', imageUrl: 'https://via.placeholder.com/40/1E90FF/FFFFFF?text=MB' },\n      { name: 'Chloe Davis', imageUrl: 'https://via.placeholder.com/40/32CD32/FFFFFF?text=CD' },\n      { name: 'Ben Evans' }, // No image, fallback to initials\n    ],\n  },\n  {\n    id: 's3',\n    title: 'Kyoto Cherry Blossoms',\n    type: 'destination' as const,\n    imageUrl: 'https://via.placeholder.com/300/FFC0CB/000000?text=Kyoto',\n    description: 'Saved for future planning',\n  },\n];\n\nconst mockNotifications = [\n  { id: 'n1', message: 'Your booking for Paris is confirmed!', read: false, timestamp: new Date(Date.now() - 1000 * 60 * 5), link: '#' },\n  { id: 'n2', message: 'Reminder: Payment due for Tokyo trip.', read: false, timestamp: new Date(Date.now() - 1000 * 60 * 60 * 2), link: '#' },\n  { id: 'n3', message: 'Mike Brown accepted your invite to Thailand Friends Trip.', read: false, timestamp: new Date(Date.now() - 1000 * 60 * 60 * 24), link: '#' },\n  { id: 'n4', message: 'Welcome to Ascendion! Explore your dashboard.', read: true, timestamp: new Date(Date.now() - 1000 * 60 * 60 * 24 * 3) },\n];\n\nconst mockPayments = [\n  { id: 'p1', date: new Date(Date.now() - 1000 * 60 * 60 * 24 * 30), amount: 1250.00, method: 'Visa **** 1234', status: 'paid' as const, receiptUrl: '#' },\n  { id: 'p2', date: new Date(Date.now() - 1000 * 60 * 60 * 24 * 60), amount: 800.50, method: 'Mastercard **** 5678', status: 'paid' as const, receiptUrl: '#' },\n  { id: 'p3', date: new Date(Date.now() - 1000 * 60 * 60 * 24 * 90), amount: 350.00, method: 'PayPal', status: 'paid' as const },\n  { id: 'p4', date: new Date(Date.now() - 1000 * 60 * 60 * 24 * 5), amount: 50.00, method: 'Visa **** 1234', status: 'failed' as const },\n];\n\nconst mockDefaultSettings = {\n  theme: 'system' as const,\n  language: 'en',\n  emailNotifications: true,\n  pushNotifications: false,\n};\n\n// --- Handler Functions (Placeholders) ---\n\nconst handleEditProfile = () => alert('Edit Profile clicked');\nconst handleResetPassword = () => alert('Reset Password clicked');\nconst handleGoToPreferences = () => alert('Go To Preferences clicked (likely scroll or tab switch)');\nconst handleViewBooking = (id: string) => alert(`View Booking ${id}`);\nconst handleRepeatBooking = (id: string) => alert(`Repeat Booking ${id}`);\nconst handleCancelBooking = (id: string) => alert(`Cancel Booking ${id}`);\nconst handleShareBooking = (id: string) => alert(`Share Booking ${id}`);\nconst handleEditSavedTrip = (id: string) => alert(`Edit Saved Trip ${id}`);\nconst handleShareSavedTrip = (id: string) => alert(`Share Saved Trip ${id}`);\nconst handleRemoveSavedTrip = (id: string) => alert(`Remove Saved Trip ${id}`);\nconst handleOpenChat = () => alert('Open Chat clicked');\nconst handleSubmitSupportRequest = async (data: { subject: string; message: string }) => {\n  alert(`Support Request Submitted: ${JSON.stringify(data)}`);\n  // Simulate API call delay\n  await new Promise(resolve => setTimeout(resolve, 1000));\n};\nconst handleMarkReadNotification = (id: string | 'all') => alert(`Mark Notification Read: ${id}`);\nconst handleClearAllNotifications = () => alert('Clear All Notifications');\nconst handleInviteFriends = () => alert('Invite Friends clicked');\nconst handleShareProfile = () => alert('Share Profile clicked');\nconst handleManageInvites = () => alert('Manage Invites clicked');\nconst handleRedeemRewards = () => alert('Redeem Rewards clicked');\nconst handleSubmitSettings = async (data: typeof mockDefaultSettings) => {\n  alert(`Settings Submitted: ${JSON.stringify(data)}`);\n  // Simulate API call delay\n  await new Promise(resolve => setTimeout(resolve, 1000));\n};\n\n// --- Page Component --- \n\nexport default function UserDashboardPage() {\n  const [isSidebarOpen, setSidebarOpen] = useState(false);\n  // State for notifications (in a real app, this would come from context or state management)\n  const [notifications, setNotifications] = useState(mockNotifications);\n\n  const toggleSidebar = () => setSidebarOpen(!isSidebarOpen);\n\n   // Example handler logic that modifies state\n  const handleMarkRead = (id: string | 'all') => {\n    setNotifications(prev =>\n      prev.map(n => (id === 'all' || n.id === id ? { ...n, read: true } : n))\n    );\n    console.log(`Mark Notification Read: ${id}`);\n  };\n\n  const handleClearAll = () => {\n    setNotifications([]);\n    console.log('Clear All Notifications');\n  };\n\n\n  return (\n    <div className=\"flex flex-col min-h-screen bg-background\">\n      <Header toggleSidebar={toggleSidebar} hasCollapsibleSidebar={true} />\n      <div className=\"flex flex-1\">\n        <IntegratedSidebar isOpen={isSidebarOpen} onClose={() => setSidebarOpen(false)} />\n        <main className=\"flex-1 p-4 md:p-6 lg:p-8 overflow-y-auto\">\n          {/* Row 1: Profile, Metrics, Actions, Support, Notifications */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 mb-6\">\n            <div className=\"lg:col-span-1 flex flex-col space-y-6\">\n              <UserProfileCard\n                user={mockUser}\n                onEditProfile={handleEditProfile}\n                onResetPassword={handleResetPassword}\n                onGoToPreferences={handleGoToPreferences} // Could trigger tab switch later\n              />\n              <SupportWidget\n                  onOpenChat={handleOpenChat}\n                  onSubmitSupportRequest={handleSubmitSupportRequest}\n              />\n            </div>\n            <div className=\"lg:col-span-2 space-y-6\">\n              <DashboardMetrics metrics={mockMetrics} />\n              <div className=\"flex flex-wrap items-center gap-2\">\n                <DashboardActionButtons\n                  onInviteFriends={handleInviteFriends}\n                  onShareProfile={handleShareProfile}\n                  onManageInvites={handleManageInvites}\n                  onRedeemRewards={handleRedeemRewards}\n                  onRepeatBooking={() => handleRepeatBooking('b3')} // Example: repeat last completed\n                />\n                <NotificationList\n                  notifications={notifications}\n                  onMarkRead={handleMarkRead} // Use state-modifying handler\n                  onClearAll={handleClearAll} // Use state-modifying handler\n                />\n              </div>\n            </div>\n          </div>\n\n          {/* Row 2: Tabs and Content */}\n          <DashboardTabs\n            defaultTab=\"bookings\"\n            bookingsComponent={\n              <BookingList\n                bookings={mockBookings}\n                onView={handleViewBooking}\n                onRepeat={handleRepeatBooking}\n                onCancel={handleCancelBooking}\n                onShare={handleShareBooking}\n              />\n            }\n            itinerariesComponent={\n              <SavedTripsGroup\n                savedTrips={mockSavedTrips.filter(t => t.type === 'itinerary' || t.type === 'destination')}\n                onEdit={handleEditSavedTrip}\n                onShare={handleShareSavedTrip}\n                onRemove={handleRemoveSavedTrip}\n              />\n            }\n            groupTripsComponent={\n              // You might reuse SavedTripsGroup filtered differently or use a dedicated component\n              <SavedTripsGroup\n                 savedTrips={mockSavedTrips.filter(t => t.type === 'group')}\n                 onEdit={handleEditSavedTrip}\n                 onShare={handleShareSavedTrip}\n                 onRemove={handleRemoveSavedTrip}\n              />\n              // Or a placeholder:\n              // <div className=\"text-center p-8 bg-muted rounded-md\"><p className=\"text-muted-foreground\">Group Trips Section</p></div>\n            }\n            historyComponent={\n              // You might reuse BookingList filtered for completed/cancelled or a dedicated component\n               <BookingList\n                 bookings={mockBookings.filter(b => b.status === 'completed' || b.status === 'cancelled')}\n                 onView={handleViewBooking}\n                 onRepeat={handleRepeatBooking}\n                 onCancel={handleCancelBooking} // Maybe disable cancel for history\n                 onShare={handleShareBooking}\n               />\n              // Or a placeholder:\n              // <div className=\"text-center p-8 bg-muted rounded-md\"><p className=\"text-muted-foreground\">Booking History Section</p></div>\n            }\n            paymentsComponent={\n              <PaymentHistoryTable payments={mockPayments} />\n            }\n            preferencesComponent={\n              <UserSettingsForm\n                defaultSettings={mockDefaultSettings}\n                onSubmit={handleSubmitSettings}\n              />\n            }\n          />\n        </main>\n      </div>\n      <Footer />\n    </div>\n  );\n}\n"
    },
    {
        "fileName": "src/App.tsx",
        "content": "\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { Toaster as Sonner } from \"@/components/ui/sonner\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\n\n\nimport DestinationDetailItineraryPage from \"./pages/DestinationDetailItineraryPage\";\nimport GroupBookingPage from \"./pages/GroupBookingPage\";\nimport HomePage from \"./pages/HomePage\";\nimport HotelDetailsBookingPage from \"./pages/HotelDetailsBookingPage\";\nimport UserDashboardPage from \"./pages/UserDashboardPage\";\nimport NotFound from \"./pages/NotFound\";\n\nconst queryClient = new QueryClient();\n\n\nconst App = () => (\n<QueryClientProvider client={queryClient}>\n    <TooltipProvider>\n    <Toaster />\n    <Sonner />\n    <BrowserRouter>\n        <Routes>\n\n\n          <Route path=\"/home\" element={<HomePage />} />\n          <Route path=\"/destination/:id\" element={<DestinationDetailItineraryPage />} />\n          <Route path=\"/hotel/:id\" element={<HotelDetailsBookingPage />} />\n          <Route path=\"/group\" element={<GroupBookingPage />} />\n          <Route path=\"/dashboard\" element={<UserDashboardPage />} />\n          {/* catch-all */}\n          <Route path=\"*\" element={<NotFound />} />\n\n\n        </Routes>\n    </BrowserRouter>\n    </TooltipProvider>\n</QueryClientProvider>\n);\n\nexport default App;\n"
    }
]