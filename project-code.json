[
    {
        "fileName": "src/index.css",
        "content": "/**\n * Generalized Tokens & Base Styles for React Tailwind Projects\n * -----------------------------------------------------------\n * Generated based on application description: Trading Dashboard.\n */\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  /**\n   * ========================================================================\n   * Theme Variables (CSS Custom Properties)\n   * ========================================================================\n   */\n  :root {\n    /* Colors (Light Mode - HSL with PERCENT) */\n    --background: 210 40% 98%;\n    --foreground: 220 10% 10%;\n\n    --card: 0 0% 100%;\n    --card-foreground: 220 10% 10%;\n\n    --popover: 0 0% 100%;\n    --popover-foreground: 220 10% 10%;\n\n    --primary: 220 75% 55%;\n    --primary-foreground: 210 40% 98%;\n\n    --secondary: 215 25% 65%;\n    --secondary-foreground: 220 10% 25%;\n\n    --muted: 210 40% 95%;\n    --muted-foreground: 215 20% 55%;\n\n    --accent: 220 85% 65%;\n    --accent-foreground: 220 10% 10%;\n\n    --destructive: 0 84% 60%;\n    --destructive-foreground: 0 0% 98%;\n\n    --success: 130 65% 40%;\n    --success-foreground: 0 0% 98%;\n\n    --warning: 40 90% 55%;\n    --warning-foreground: 30 50% 15%;\n\n    --border: 210 25% 88%;\n    --input: 210 25% 88%;\n    --ring: 220 75% 55%;\n\n    /* Sidebar Colors */\n    --sidebar-background: 210 35% 96%;\n    --sidebar-foreground: 220 10% 10%;\n    --sidebar-primary: 220 75% 55%;\n    --sidebar-primary-foreground: 210 40% 98%;\n    --sidebar-accent: 220 85% 65%;\n    --sidebar-accent-foreground: 220 10% 10%;\n    --sidebar-border: 210 25% 85%;\n    --sidebar-ring: 220 75% 55%;\n\n    /* Layout & Typography */\n    --radius: 0.5rem;\n    --font-family-base: system-ui, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";\n    --font-family-heading: system-ui, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";\n    --font-family-mono: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace;\n    --text-scale: 1;\n    --spacing-scale: 1;\n    --transition-duration-base: 150ms;\n  }\n\n  /**\n   * ========================================================================\n   * Dark Mode Theme Variables\n   * ========================================================================\n   */\n  .dark {\n    --background: 220 15% 10%;\n    --foreground: 210 40% 96%;\n\n    --card: 220 15% 14%;\n    --card-foreground: 210 40% 96%;\n\n    --popover: 220 15% 12%;\n    --popover-foreground: 210 40% 96%;\n\n    --primary: 220 75% 65%;\n    --primary-foreground: 220 15% 10%;\n\n    --secondary: 215 20% 30%;\n    --secondary-foreground: 210 40% 90%;\n\n    --muted: 215 15% 25%;\n    --muted-foreground: 215 15% 65%;\n\n    --accent: 220 85% 70%;\n    --accent-foreground: 220 15% 10%;\n\n    --destructive: 0 75% 60%;\n    --destructive-foreground: 0 0% 98%;\n\n    --success: 130 60% 50%;\n    --success-foreground: 130 100% 10%;\n\n    --warning: 40 85% 60%;\n    --warning-foreground: 40 100% 10%;\n\n    --border: 215 15% 25%;\n    --input: 215 15% 25%;\n    --ring: 220 85% 70%;\n\n    --sidebar-background: 220 15% 8%;\n    --sidebar-foreground: 210 40% 96%;\n    --sidebar-primary: 220 75% 65%;\n    --sidebar-primary-foreground: 220 15% 10%;\n    --sidebar-accent: 220 85% 70%;\n    --sidebar-accent-foreground: 220 15% 10%;\n    --sidebar-border: 215 15% 20%;\n    --sidebar-ring: 220 85% 70%;\n  }\n\n  /* Base Element Styling */\n  * {\n    border-color: hsl(var(--border));\n  }\n  html {\n    scroll-behavior: smooth;\n  }\n  body {\n    background-color: hsl(var(--background));\n    color: hsl(var(--foreground));\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    font-family: var(--font-family-base);\n    font-feature-settings: \"rlig\" 1, \"calt\" 1, \"ss01\", \"ss02\", \"cv01\", \"cv02\", \"cv03\", \"cv04\", \"cv11\";\n  }\n  h1, h2, h3, h4, h5, h6 {\n    font-family: var(--font-family-heading);\n    color: hsl(var(--foreground));\n  }\n  h1 { font-size: calc(2.25rem * var(--text-scale, 1)); }\n  h2 { font-size: calc(1.875rem * var(--text-scale, 1)); }\n  h3 { font-size: calc(1.5rem * var(--text-scale, 1)); }\n  h4 { font-size: calc(1.25rem * var(--text-scale, 1)); }\n  p, span, button, a, li, input, textarea, label, div { font-size: calc(1rem * var(--text-scale, 1)); }\n  .text-xs { font-size: calc(0.75rem * var(--text-scale, 1)); }\n  .text-sm { font-size: calc(0.875rem * var(--text-scale, 1)); }\n  .text-lg { font-size: calc(1.125rem * var(--text-scale, 1)); }\n  .text-xl { font-size: calc(1.25rem * var(--text-scale, 1)); }\n  .text-2xl { font-size: calc(1.5rem * var(--text-scale, 1)); }\n}\n\n@layer utilities {\n  /**\n   * ========================================================================\n   * General Utilities\n   * ========================================================================\n   */\n  .text-balance { text-wrap: balance; }\n  .text-pretty { text-wrap: pretty; }\n  .center {  display: flex; align-items: center; justify-content: center; }\n  .text-gradient-primary {\n    background: linear-gradient(to right, hsl(var(--primary)), hsl(var(--accent)));\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n    text-fill-color: transparent;\n   }\n  ::-webkit-scrollbar { width: 8px; height: 8px; }\n  ::-webkit-scrollbar-track { background: transparent; }\n  ::-webkit-scrollbar-thumb {\n    background-color: hsla(var(--muted-foreground), 0.5);\n    border-radius: var(--radius);\n    border: 2px solid transparent;\n    background-clip: padding-box;\n  }\n  ::-webkit-scrollbar-thumb:hover {\n     background-color: hsla(var(--muted-foreground), 0.7);\n  }\n  .no-scrollbar::-webkit-scrollbar { display: none; }\n  .no-scrollbar { -ms-overflow-style: none; scrollbar-width: none; }\n}\n\n@layer components {\n  /**\n   * ========================================================================\n   * Common Component Base Styles & Animations\n   * ========================================================================\n   */\n  @keyframes fadeIn { from { opacity: 0; } to { opacity: 1; } }\n  .animate-fade-in { animation: fadeIn 0.5s ease-out forwards; }\n\n  @keyframes slideUp { from { opacity: 0; transform: translateY(20px); } to { opacity: 1; transform: translateY(0); } }\n  .animate-slide-up { animation: slideUp 0.5s cubic-bezier(0.25, 0.46, 0.45, 0.94) forwards; }\n\n  @keyframes scaleIn { from { opacity: 0; transform: scale(0.95); } to { opacity: 1; transform: scale(1); } }\n  .animate-scale-in { animation: scaleIn 0.3s ease-out forwards; }\n\n  @keyframes pulse { 0%, 100% { opacity: 1; } 50% { opacity: .5; } }\n  .animate-pulse-gentle { animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite; }\n\n  .stagger-item { opacity:0; animation: fadeIn 0.6s ease-out forwards; }\n  .stagger-container > .stagger-item:nth-child(1) { animation-delay: 0.05s; }\n  .stagger-container > .stagger-item:nth-child(2) { animation-delay: 0.1s; }\n  .stagger-container > .stagger-item:nth-child(3) { animation-delay: 0.15s; }\n  .stagger-container > .stagger-item:nth-child(4) { animation-delay: 0.2s; }\n  .stagger-container > .stagger-item:nth-child(5) { animation-delay: 0.25s; }\n}\n"
    },
    {
        "fileName": "tailwind.config.tsx",
        "content": "import type { Config } from \"tailwindcss\";\n\nexport default {\n    darkMode: [\"class\"], // Enables dark mode based on the 'class' attribute\n    content: [\n        \"./pages/**/*.{ts,tsx}\",\n        \"./components/**/*.{ts,tsx}\",\n        \"./app/**/*.{ts,tsx}\", // Common path for Next.js App Router\n        \"./src/**/*.{ts,tsx}\",  // Common path for source files\n        // Add any other paths where Tailwind classes might be used\n    ],\n    prefix: \"\", // No prefix for utility classes (e.g., 'text-primary' instead of 'tw-text-primary')\n    theme: {\n        // --- Container Settings ---\n        // Default container configuration for centering and padding\n        container: {\n            center: true,\n            padding: '2rem', // Default padding for containers\n            screens: {\n                '2xl': '1400px' // Max width for the container on 2xl screens\n            }\n        },\n\n        // --- Theme Extensions ---\n        // Use 'extend' to add customizations without overwriting Tailwind defaults\n        extend: {\n            // --- START: Project-Specific Font Families ---\n            // Define custom font families based on CSS variables.\n            fontFamily: {\n                sans: ['var(--font-family-base)', 'system-ui', '-apple-system', 'BlinkMacSystemFont', '\"Segoe UI\"', 'Roboto', '\"Helvetica Neue\"', 'Arial', '\"Noto Sans\"', 'sans-serif', '\"Apple Color Emoji\"', '\"Segoe UI Emoji\"', '\"Segoe UI Symbol\"', '\"Noto Color Emoji\"'],\n                heading: ['var(--font-family-heading)', 'system-ui', '-apple-system', 'BlinkMacSystemFont', '\"Segoe UI\"', 'Roboto', '\"Helvetica Neue\"', 'Arial', '\"Noto Sans\"', 'sans-serif', '\"Apple Color Emoji\"', '\"Segoe UI Emoji\"', '\"Segoe UI Symbol\"', '\"Noto Color Emoji\"'],\n                mono: ['var(--font-family-mono)', 'ui-monospace', 'SFMono-Regular', 'Menlo', 'Monaco', 'Consolas', '\"Liberation Mono\"', '\"Courier New\"', 'monospace'],\n            },\n            // --- END: Project-Specific Font Families ---\n\n            // --- Color Palette ---\n            colors: {\n                // Base colors (controlled by CSS variables for theming)\n                border: 'hsl(var(--border))',\n                input: 'hsl(var(--input))',\n                ring: 'hsl(var(--ring))', // Used for focus rings, etc.\n                background: 'hsl(var(--background))',\n                foreground: 'hsl(var(--foreground))',\n                primary: {\n                    DEFAULT: 'hsl(var(--primary))',\n                    foreground: 'hsl(var(--primary-foreground))' // Text color on primary background\n                },\n                secondary: {\n                    DEFAULT: 'hsl(var(--secondary))',\n                    foreground: 'hsl(var(--secondary-foreground))'\n                },\n                destructive: {\n                    DEFAULT: 'hsl(var(--destructive))',\n                    foreground: 'hsl(var(--destructive-foreground))'\n                },\n                muted: {\n                    DEFAULT: 'hsl(var(--muted))',\n                    foreground: 'hsl(var(--muted-foreground))' // Often used for subtle text or backgrounds\n                },\n                accent: {\n                    DEFAULT: 'hsl(var(--accent))',\n                    foreground: 'hsl(var(--accent-foreground))'\n                },\n                popover: {\n                    DEFAULT: 'hsl(var(--popover))',\n                    foreground: 'hsl(var(--popover-foreground))'\n                },\n                card: {\n                    DEFAULT: 'hsl(var(--card))',\n                    foreground: 'hsl(var(--card-foreground))'\n                },\n                // Sidebar specific colors (enabled as CSS variables are present)\n                sidebar: {\n                 DEFAULT: 'hsl(var(--sidebar-background))',\n                 foreground: 'hsl(var(--sidebar-foreground))',\n                 primary: 'hsl(var(--sidebar-primary))',\n                 'primary-foreground': 'hsl(var(--sidebar-primary-foreground))',\n                 accent: 'hsl(var(--sidebar-accent))',\n                 'accent-foreground': 'hsl(var(--sidebar-accent-foreground))',\n                 border: 'hsl(var(--sidebar-border))',\n                 ring: 'hsl(var(--sidebar-ring))'\n                },\n\n                // --- START: Project-Specific Colors ---\n                // Added based on CSS variables found in index.css\n                success: {\n                    DEFAULT: 'hsl(var(--success))',\n                    foreground: 'hsl(var(--success-foreground))'\n                },\n                warning: {\n                    DEFAULT: 'hsl(var(--warning))',\n                    foreground: 'hsl(var(--warning-foreground))'\n                }\n                // --- END: Project-Specific Colors ---\n            },\n\n            // --- Border Radius ---\n            // Uses CSS variable for easy global adjustment\n            borderRadius: {\n                lg: 'var(--radius)',\n                md: 'calc(var(--radius) - 2px)',\n                sm: 'calc(var(--radius) - 4px)'\n            },\n\n            // --- Keyframes for Animations ---\n            keyframes: {\n                // Common animations (e.g., for Accordion components)\n                'accordion-down': {\n                    from: { height: '0' },\n                    to: { height: 'var(--radix-accordion-content-height)' }\n                },\n                'accordion-up': {\n                    from: { height: 'var(--radix-accordion-content-height)' },\n                    to: { height: '0' }\n                },\n\n                // --- START: Project-Specific Keyframes ---\n                // Added based on @keyframes found in index.css\n                fadeIn: { from: { opacity: '0' }, to: { opacity: '1' } },\n                slideUp: { from: { opacity: '0', transform: 'translateY(20px)' }, to: { opacity: '1', transform: 'translateY(0)' } },\n                scaleIn: { from: { opacity: '0', transform: 'scale(0.95)' }, to: { opacity: '1', transform: 'scale(1)' } },\n                pulse: { '0%, 100%': { opacity: '1' }, '50%': { opacity: '.5' } },\n                // --- END: Project-Specific Keyframes ---\n            },\n\n            // --- Animation Utilities ---\n            animation: {\n                // Common animations\n                'accordion-down': 'accordion-down 0.2s ease-out',\n                'accordion-up': 'accordion-up 0.2s ease-out',\n\n                // --- START: Project-Specific Animations ---\n                // Added based on animation classes found in index.css\n                'fade-in': 'fadeIn 0.5s ease-out forwards',\n                'slide-up': 'slideUp 0.5s cubic-bezier(0.25, 0.46, 0.45, 0.94) forwards',\n                'scale-in': 'scaleIn 0.3s ease-out forwards',\n                'pulse-gentle': 'pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite',\n                // Note: Stagger uses 'fade-in' directly in CSS, no separate animation utility needed here.\n                // --- END: Project-Specific Animations ---\n            },\n\n            // --- START: Project-Specific Box Shadows ---\n            boxShadow: {\n                // Added based on user prompt mention of 'distinct module cards'\n                'card': '0 1px 3px rgba(0, 0, 0, 0.05), 0 1px 2px rgba(0, 0, 0, 0.1)',\n            },\n            // --- END: Project-Specific Box Shadows ---\n\n            // --- START: Project-Specific Background Images ---\n            backgroundImage: {\n                // Add custom background images if needed\n            },\n            // --- END: Project-Specific Background Images ---\n        }\n    },\n\n    // --- Tailwind CSS Plugins ---\n    plugins: [\n        require(\"tailwindcss-animate\"), // Essential for the keyframes/animations defined above\n        require('@tailwindcss/forms'), // Needed for form styling mentioned in prompt\n        require('@tailwindcss/typography'), // Useful for potential content sections\n        require('tailwind-scrollbar'), // Added because scrollbar styles were found in index.css\n    ],\n} satisfies Config;\n"
    },
    {
        "fileName": "src/components/layout/Header.tsx",
        "content": "import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Menu, User, Settings, Sun, Moon } from 'lucide-react';\nimport { cn } from '@/lib/utils'; // Assuming exists for clsx/tailwind-merge\nimport { Button } from '@/components/ui/button'; // Assuming shadcn/ui Button\n// import { useTheme } from 'next-themes'; // Uncomment if theme toggle implemented\n\ninterface HeaderProps {\n  toggleSidebar?: () => void; // Optional: Only needed if a collapsible sidebar exists\n  hasCollapsibleSidebar?: boolean; // Flag to conditionally render menu toggle\n}\n\nconst Header: React.FC<HeaderProps> = ({ toggleSidebar, hasCollapsibleSidebar }) => {\n  // const { theme, setTheme } = useTheme(); // Uncomment for theme toggle\n\n  return (\n    <header className={cn(\n      'sticky top-0 z-50 w-full',\n      'border-b border-border',\n      'bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60'\n    )}>\n      <div className=\"container flex h-14 max-w-screen-2xl items-center px-4\">\n        <div className=\"mr-4 flex items-center\">\n          {/* Conditionally render menu toggle button for collapsible sidebar */}\n          {hasCollapsibleSidebar && (\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"mr-2 md:hidden\" // Hide on medium screens and up where sidebar might become static\n              onClick={toggleSidebar}\n              aria-label=\"Toggle Sidebar\"\n            >\n              <Menu className=\"h-5 w-5\" />\n            </Button>\n          )}\n          <Link to=\"/dashboard\" className=\"mr-6 flex items-center space-x-2\">\n            {/* Placeholder Logo */}\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"h-6 w-6 text-primary\">\n              <path d=\"M12 2L2 7l10 5 10-5-10-5zM2 17l10 5 10-5M2 12l10 5 10-5\"></path>\n            </svg>\n            <span className=\"font-bold inline-block text-foreground\">Ascendion</span>\n          </Link>\n        </div>\n\n        {/* Placeholder Navigation (can be expanded) */}\n        <nav className=\"hidden md:flex items-center space-x-6 text-sm font-medium\">\n          <Link\n            to=\"/dashboard\"\n            className=\"transition-colors hover:text-foreground/80 text-foreground/60\"\n          >\n            Dashboard\n          </Link>\n          <Link\n            to=\"/market-overview\"\n            className=\"transition-colors hover:text-foreground/80 text-foreground/60\"\n          >\n            Market\n          </Link>\n          {/* Add more links as needed */}\n        </nav>\n\n        <div className=\"flex flex-1 items-center justify-end space-x-2\">\n          {/* Placeholder User Actions */}\n          {/* <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => setTheme(theme === 'dark' ? 'light' : 'dark')}\n            aria-label=\"Toggle Theme\"\n          >\n            <Sun className=\"h-5 w-5 scale-100 dark:scale-0 transition-all\" />\n            <Moon className=\"h-5 w-5 absolute scale-0 dark:scale-100 transition-all\" />\n          </Button> */}\n           <Button variant=\"ghost\" size=\"icon\" aria-label=\"Settings Placeholder\">\n            <Settings className=\"h-5 w-5 text-foreground/60 hover:text-foreground/80 transition-colors\" />\n          </Button>\n          <Link to=\"/profile\">\n            <Button variant=\"ghost\" size=\"icon\" aria-label=\"User Profile\">\n              <User className=\"h-5 w-5 text-foreground/60 hover:text-foreground/80 transition-colors\" />\n            </Button>\n          </Link>\n        </div>\n      </div>\n    </header>\n  );\n};\n\nexport default Header;\n"
    },
    {
        "fileName": "src/components/layout/Sidebar.tsx",
        "content": "import React from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport { X, LayoutDashboard, User, LineChart, Settings } from 'lucide-react';\nimport { cn } from '@/lib/utils'; // Assuming exists for clsx/tailwind-merge\nimport { Button } from '@/components/ui/button'; // Assuming shadcn/ui Button\n\ninterface SidebarProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nconst navItems = [\n  { href: '/dashboard', label: 'Dashboard', icon: LayoutDashboard },\n  { href: '/market-overview', label: 'Market Overview', icon: LineChart },\n  { href: '/profile', label: 'Profile', icon: User },\n  { href: '/settings', label: 'Settings', icon: Settings }, // Example placeholder route\n];\n\nconst Sidebar: React.FC<SidebarProps> = ({ isOpen, onClose }) => {\n  const location = useLocation();\n\n  return (\n    <>\n      {/* Overlay for mobile */}\n      <div\n        className={cn(\n          'fixed inset-0 z-30 bg-black/50 transition-opacity duration-300 ease-in-out md:hidden',\n          isOpen ? 'opacity-100' : 'opacity-0 pointer-events-none'\n        )}\n        onClick={onClose}\n        aria-hidden=\"true\"\n      />\n\n      {/* Sidebar */}\n      <aside\n        className={cn(\n          'fixed inset-y-0 left-0 z-40 flex h-full w-64 flex-col',\n          'border-r border-[hsl(var(--sidebar-border))]',\n          'bg-[hsl(var(--sidebar-background))] text-[hsl(var(--sidebar-foreground))]',\n          'transition-transform duration-300 ease-in-out',\n          // Mobile/Overlay State\n          'md:translate-x-0',\n          isOpen ? 'translate-x-0' : '-translate-x-full',\n          // Desktop Static/Collapsible State (adjust if needed for always-static desktop)\n          'md:sticky md:top-0 md:z-30 md:block' // Adjust positioning as needed for desktop layout\n          // If desktop should also collapse, add classes like:\n          // 'md:transition-[width] md:duration-300 md:ease-in-out',\n          // isOpen ? 'md:w-64' : 'md:w-16' // Example desktop collapse width\n        )}\n      >\n        <div className=\"flex items-center justify-between p-4 border-b border-[hsl(var(--sidebar-border))]\">\n          {/* Sidebar Header / Logo Area */}\n          <Link to=\"/dashboard\" className=\"flex items-center space-x-2\" onClick={onClose}>\n              <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"h-6 w-6 text-[hsl(var(--sidebar-primary))]\">\n                <path d=\"M12 2L2 7l10 5 10-5-10-5zM2 17l10 5 10-5M2 12l10 5 10-5\"></path>\n              </svg>\n              <span className=\"font-bold\">Ascendion</span>\n          </Link>\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            className=\"md:hidden\" // Only show close button on mobile/overlay\n            onClick={onClose}\n            aria-label=\"Close Sidebar\"\n          >\n            <X className=\"h-5 w-5\" />\n          </Button>\n        </div>\n\n        {/* Navigation Links */}\n        <nav className=\"flex-1 space-y-1 p-4 overflow-y-auto\">\n          {navItems.map((item) => {\n            const isActive = location.pathname === item.href;\n            return (\n              <Link\n                key={item.href}\n                to={item.href}\n                onClick={onClose} // Close sidebar on navigation (mobile)\n                className={cn(\n                  'group flex items-center rounded-md px-3 py-2 text-sm font-medium',\n                  'transition-colors',\n                  isActive\n                    ? 'bg-[hsl(var(--sidebar-accent))] text-[hsl(var(--sidebar-accent-foreground))]'\n                    : 'hover:bg-[hsl(var(--sidebar-accent))] hover:text-[hsl(var(--sidebar-accent-foreground))]'\n                )}\n              >\n                <item.icon className={cn('mr-3 h-5 w-5', isActive ? 'text-[hsl(var(--sidebar-accent-foreground))]' : 'text-[hsl(var(--sidebar-foreground))] group-hover:text-[hsl(var(--sidebar-accent-foreground))]')} />\n                <span>{item.label}</span>\n              </Link>\n            );\n          })}\n        </nav>\n\n        {/* Optional Footer section in Sidebar */}\n        {/* <div className=\"p-4 mt-auto border-t border-[hsl(var(--sidebar-border))] text-xs text-muted-foreground\">\n          Sidebar Footer Content\n        </div> */}\n      </aside>\n    </>\n  );\n};\n\nexport default Sidebar;\n"
    },
    {
        "fileName": "src/components/layout/Footer.tsx",
        "content": "import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { cn } from '@/lib/utils'; // Assuming exists for clsx/tailwind-merge\n\nconst Footer: React.FC = () => {\n  const currentYear = new Date().getFullYear();\n\n  return (\n    <footer className={cn(\n      'mt-auto border-t border-border',\n      'bg-muted text-muted-foreground'\n    )}>\n      <div className=\"container mx-auto px-4 py-8 max-w-screen-2xl\">\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n          {/* Column 1: Brand/About */}\n          <div>\n            <h3 className=\"text-lg font-semibold text-foreground mb-3\">Ascendion</h3>\n            <p className=\"text-sm\">\n              Empowering your financial decisions.\n            </p>\n            {/* Placeholder Social Links */}\n            <div className=\"flex space-x-3 mt-4\">\n              {/* Replace with actual icons/links */}\n              <span className=\"text-xs\">Social</span>\n              <span className=\"text-xs\">Links</span>\n            </div>\n          </div>\n\n          {/* Column 2: Quick Links */}\n          <div>\n            <h3 className=\"text-lg font-semibold text-foreground mb-3\">Quick Links</h3>\n            <ul className=\"space-y-2 text-sm\">\n              <li><Link to=\"/dashboard\" className=\"hover:text-foreground transition-colors\">Dashboard</Link></li>\n              <li><Link to=\"/market-overview\" className=\"hover:text-foreground transition-colors\">Market</Link></li>\n              <li><Link to=\"/profile\" className=\"hover:text-foreground transition-colors\">Profile</Link></li>\n              <li><Link to=\"/about\" className=\"hover:text-foreground transition-colors\">About Us</Link></li> {/* Placeholder */} \n            </ul>\n          </div>\n\n          {/* Column 3: Legal/Contact */}\n          <div>\n            <h3 className=\"text-lg font-semibold text-foreground mb-3\">Legal</h3>\n            <ul className=\"space-y-2 text-sm\">\n              <li><Link to=\"/terms\" className=\"hover:text-foreground transition-colors\">Terms of Service</Link></li> {/* Placeholder */} \n              <li><Link to=\"/privacy\" className=\"hover:text-foreground transition-colors\">Privacy Policy</Link></li> {/* Placeholder */} \n              <li><Link to=\"/contact\" className=\"hover:text-foreground transition-colors\">Contact Us</Link></li> {/* Placeholder */} \n            </ul>\n          </div>\n        </div>\n\n        {/* Bottom Bar */}\n        <div className=\"mt-8 pt-6 border-t border-border/50 text-center text-sm\">\n          <p>&copy; {currentYear} Ascendion. All rights reserved.</p>\n        </div>\n      </div>\n    </footer>\n  );\n};\n\nexport default Footer;\n"
    },
    {
        "fileName": "src/components/login_account_access_page/BrandLogoBlock.tsx",
        "content": "import React from 'react';\n\ninterface BrandLogoBlockProps {\n  logoUrl?: string;\n  appName?: string;\n  className?: string;\n}\n\nconst BrandLogoBlock: React.FC<BrandLogoBlockProps> = ({ logoUrl, appName = 'Trading Dashboard', className }) => {\n  return (\n    <div className={`flex items-center justify-center mb-6 ${className}`}>\n      {logoUrl ? (\n        <img src={logoUrl} alt={`${appName} Logo`} className=\"h-10 w-auto\" />\n      ) : (\n        <h1 className=\"text-2xl font-bold text-foreground\">{appName}</h1>\n      )}\n    </div>\n  );\n};\n\nexport default BrandLogoBlock;\n"
    },
    {
        "fileName": "src/components/login_account_access_page/WelcomeMessage.tsx",
        "content": "import React from 'react';\nimport { cn } from '@/lib/utils'; // Assuming utils file exists for cn function\n\ninterface WelcomeMessageProps {\n  title?: string;\n  message: string;\n  className?: string;\n}\n\nconst WelcomeMessage: React.FC<WelcomeMessageProps> = ({ title = \"Welcome Back!\", message, className }) => {\n  return (\n    <div className={cn('text-center mb-8', className)}>\n      <h2 className=\"text-xl font-semibold text-foreground mb-1\">{title}</h2>\n      <p className=\"text-sm text-muted-foreground text-balance\">\n        {message}\n      </p>\n    </div>\n  );\n};\n\nexport default WelcomeMessage;\n"
    },
    {
        "fileName": "src/components/login_account_access_page/LoginForm.tsx",
        "content": "import React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport * as z from 'zod';\n\nimport { Button } from '@/components/ui/button';\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\nimport { cn } from '@/lib/utils';\n\nconst formSchema = z.object({\n  email: z.string().email({ message: 'Invalid email address.' }),\n  password: z.string().min(6, { message: 'Password must be at least 6 characters.' }),\n});\n\nexport type LoginFormValues = z.infer<typeof formSchema>;\n\ninterface LoginFormProps {\n  onSubmit: (values: LoginFormValues) => void;\n  isLoading?: boolean;\n  className?: string;\n}\n\nconst LoginForm: React.FC<LoginFormProps> = ({ onSubmit, isLoading, className }) => {\n  const form = useForm<LoginFormValues>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      email: '',\n      password: '',\n    },\n  });\n\n  return (\n    <Card className={cn('w-full max-w-sm', className)}>\n      <CardHeader>\n        <CardTitle className=\"text-2xl\">Login</CardTitle>\n        <CardDescription>Enter your email below to login to your account.</CardDescription>\n      </CardHeader>\n      <CardContent>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"email\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Email</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"m@example.com\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"password\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Password</FormLabel>\n                  <FormControl>\n                    <Input type=\"password\" placeholder=\"******\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            {/* Login button is handled by AuthActionButtons, but could be here too */}\n            {/* <Button type=\"submit\" className=\"w-full\" disabled={isLoading}> */}\n            {/*   {isLoading ? 'Logging in...' : 'Login'} */}\n            {/* </Button> */}\n          </form>\n        </Form>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default LoginForm;\n"
    },
    {
        "fileName": "src/components/login_account_access_page/AuthActionButtons.tsx",
        "content": "import React from 'react';\nimport { Button } from '@/components/ui/button';\nimport { cn } from '@/lib/utils';\n\ninterface AuthActionButtonsProps {\n  onLoginClick: () => void;\n  onForgotPasswordClick: () => void;\n  onSignUpClick: () => void; // Could trigger RegistrationModal\n  isLoginLoading?: boolean;\n  showSignUp?: boolean;\n  className?: string;\n}\n\nconst AuthActionButtons: React.FC<AuthActionButtonsProps> = ({\n  onLoginClick,\n  onForgotPasswordClick,\n  onSignUpClick,\n  isLoginLoading = false,\n  showSignUp = true,\n  className,\n}) => {\n  return (\n    <div className={cn('space-y-3 mt-4', className)}>\n      <Button onClick={onLoginClick} className=\"w-full\" disabled={isLoginLoading}>\n        {isLoginLoading ? 'Logging In...' : 'Login'}\n      </Button>\n      <div className=\"flex justify-between items-center text-sm\">\n        <Button variant=\"link\" className=\"px-0 h-auto py-0 font-normal\" onClick={onForgotPasswordClick}>\n          Forgot Password?\n        </Button>\n        {showSignUp && (\n          <Button variant=\"link\" className=\"px-0 h-auto py-0 font-normal\" onClick={onSignUpClick}>\n            Sign Up\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default AuthActionButtons;\n"
    },
    {
        "fileName": "src/components/login_account_access_page/SocialLoginButtons.tsx",
        "content": "import React from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Separator } from '@/components/ui/separator';\nimport { Chrome, Building } from 'lucide-react'; // Example icons\nimport { cn } from '@/lib/utils';\n\ntype Provider = 'google' | 'microsoft' | string; // Allow other providers\n\ninterface SocialLoginButtonsProps {\n  providers: Provider[];\n  onSocialLogin: (provider: Provider) => void;\n  isLoading?: Provider | false; // Track which provider is loading\n  className?: string;\n}\n\nconst providerDetails: Record<Provider, { name: string; icon: React.ElementType }> = {\n  google: { name: 'Google', icon: Chrome },\n  microsoft: { name: 'Microsoft', icon: Building }, // Placeholder\n  // Add more providers here as needed\n};\n\nconst SocialLoginButtons: React.FC<SocialLoginButtonsProps> = ({\n  providers,\n  onSocialLogin,\n  isLoading = false,\n  className,\n}) => {\n  if (!providers || providers.length === 0) {\n    return null;\n  }\n\n  return (\n    <div className={cn('mt-6 space-y-4', className)}>\n      <div className=\"relative\">\n        <div className=\"absolute inset-0 flex items-center\">\n          <Separator />\n        </div>\n        <div className=\"relative flex justify-center text-xs uppercase\">\n          <span className=\"bg-background px-2 text-muted-foreground\">\n            Or continue with\n          </span>\n        </div>\n      </div>\n      <div className=\"grid grid-cols-1 gap-2 sm:grid-cols-2\">\n        {providers.map((provider) => {\n          const details = providerDetails[provider];\n          const Icon = details?.icon;\n          const providerName = details?.name || provider.charAt(0).toUpperCase() + provider.slice(1);\n          const loading = isLoading === provider;\n\n          return (\n            <Button\n              key={provider}\n              variant=\"outline\"\n              className=\"w-full\"\n              onClick={() => onSocialLogin(provider)}\n              disabled={!!isLoading} // Disable all if any is loading\n            >\n              {loading ? (\n                 <span className=\"animate-pulse\">Connecting...</span>\n              ) : (\n                <>\n                  {Icon && <Icon className=\"mr-2 h-4 w-4\" />}\n                  {providerName}\n                </>\n              )}\n            </Button>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default SocialLoginButtons;\n"
    },
    {
        "fileName": "src/components/login_account_access_page/GuestAccessButton.tsx",
        "content": "import React from 'react';\nimport { Button } from '@/components/ui/button';\nimport { cn } from '@/lib/utils';\n\ninterface GuestAccessButtonProps {\n  onGuestAccessClick: () => void;\n  isLoading?: boolean;\n  allowGuestAccess: boolean;\n  className?: string;\n}\n\nconst GuestAccessButton: React.FC<GuestAccessButtonProps> = ({\n  onGuestAccessClick,\n  isLoading = false,\n  allowGuestAccess,\n  className,\n}) => {\n  if (!allowGuestAccess) {\n    return null;\n  }\n\n  return (\n    <div className={cn('mt-6 text-center', className)}>\n      <Button\n        variant=\"secondary\"\n        className=\"w-full max-w-sm mx-auto\"\n        onClick={onGuestAccessClick}\n        disabled={isLoading}\n      >\n        {isLoading ? 'Loading...' : 'Continue as Guest'}\n      </Button>\n    </div>\n  );\n};\n\nexport default GuestAccessButton;\n"
    },
    {
        "fileName": "src/components/login_account_access_page/RegistrationModal.tsx",
        "content": "import React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport * as z from 'zod';\n\nimport { Button } from '@/components/ui/button';\nimport {\n  Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter,\n} from '@/components/ui/dialog';\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { cn } from '@/lib/utils';\n\nconst registrationSchema = z.object({\n  name: z.string().min(2, { message: 'Name must be at least 2 characters.' }),\n  email: z.string().email({ message: 'Invalid email address.' }),\n  password: z.string().min(8, { message: 'Password must be at least 8 characters.' }),\n  confirmPassword: z.string(),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: ['confirmPassword'], // path of error\n});\n\nexport type RegistrationFormValues = z.infer<typeof registrationSchema>;\n\ninterface RegistrationModalProps {\n  isOpen: boolean;\n  onOpenChange: (isOpen: boolean) => void;\n  onSubmit: (values: RegistrationFormValues) => void;\n  isLoading?: boolean;\n}\n\nconst RegistrationModal: React.FC<RegistrationModalProps> = ({\n  isOpen,\n  onOpenChange,\n  onSubmit,\n  isLoading = false,\n}) => {\n  const form = useForm<RegistrationFormValues>({\n    resolver: zodResolver(registrationSchema),\n    defaultValues: {\n      name: '',\n      email: '',\n      password: '',\n      confirmPassword: '',\n    },\n  });\n\n  const handleFormSubmit = (values: RegistrationFormValues) => {\n    // Exclude confirmPassword before submitting if necessary\n    const { confirmPassword, ...submitData } = values;\n    onSubmit(submitData as RegistrationFormValues); // Cast needed if type changes\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[425px]\">\n        <DialogHeader>\n          <DialogTitle>Create Account</DialogTitle>\n          <DialogDescription>\n            Fill in the details below to create your new account.\n          </DialogDescription>\n        </DialogHeader>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(handleFormSubmit)} className=\"space-y-4 py-4\">\n            <FormField\n              control={form.control}\n              name=\"name\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Name</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"Your Name\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"email\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Email</FormLabel>\n                  <FormControl>\n                    <Input type=\"email\" placeholder=\"m@example.com\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"password\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Password</FormLabel>\n                  <FormControl>\n                    <Input type=\"password\" placeholder=\"********\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"confirmPassword\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Confirm Password</FormLabel>\n                  <FormControl>\n                    <Input type=\"password\" placeholder=\"********\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <DialogFooter className='pt-4'>\n              <Button type=\"button\" variant=\"outline\" onClick={() => onOpenChange(false)} disabled={isLoading}>\n                Cancel\n              </Button>\n              <Button type=\"submit\" disabled={isLoading}>\n                {isLoading ? 'Registering...' : 'Register'}\n              </Button>\n            </DialogFooter>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nexport default RegistrationModal;\n"
    },
    {
        "fileName": "src/components/login_account_access_page/ThemeToggle.tsx",
        "content": "import React from 'react';\nimport { useTheme } from 'next-themes';\nimport { Moon, Sun } from 'lucide-react';\n\nimport { Button } from '@/components/ui/button';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\nimport { cn } from '@/lib/utils';\n\ninterface ThemeToggleProps {\n  className?: string;\n}\n\nconst ThemeToggle: React.FC<ThemeToggleProps> = ({ className }) => {\n  const { setTheme } = useTheme();\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild className={cn(className)}>\n        <Button variant=\"outline\" size=\"icon\">\n          <Sun className=\"h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n          <Moon className=\"absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n          <span className=\"sr-only\">Toggle theme</span>\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\">\n        <DropdownMenuItem onClick={() => setTheme('light')}>\n          Light\n        </DropdownMenuItem>\n        <DropdownMenuItem onClick={() => setTheme('dark')}>\n          Dark\n        </DropdownMenuItem>\n        <DropdownMenuItem onClick={() => setTheme('system')}>\n          System\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n};\n\nexport default ThemeToggle;\n"
    },
    {
        "fileName": "src/components/main_trading_dashboard/DashboardFilterGroup.tsx",
        "content": "import React, { useState } from 'react';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Filter } from 'lucide-react';\n\n// Define types for filter options if needed, using placeholders for now\ntype Sector = string;\ntype MarketSegment = string;\ntype Timeframe = '1D' | '1W' | '1M' | '1Y' | 'ALL';\n\ninterface Filters {\n  sector?: Sector;\n  marketSegment?: MarketSegment;\n  timeframe?: Timeframe;\n  // Add more filter keys as needed, e.g., using checkboxes for multiple selections\n}\n\ninterface DashboardFilterGroupProps {\n  availableSectors: Sector[];\n  availableMarketSegments: MarketSegment[];\n  initialFilters?: Filters;\n  onFilterChange: (filters: Filters) => void;\n}\n\nconst DashboardFilterGroup: React.FC<DashboardFilterGroupProps> = ({\n  availableSectors,\n  availableMarketSegments,\n  initialFilters = { timeframe: '1D' },\n  onFilterChange,\n}) => {\n  const [filters, setFilters] = useState<Filters>(initialFilters);\n\n  const handleSelectChange = (key: keyof Filters) => (value: string) => {\n    const newFilters = { ...filters, [key]: value };\n    setFilters(newFilters);\n    onFilterChange(newFilters);\n  };\n\n  // Example handler for checkboxes if needed\n  // const handleCheckboxChange = (key: string, checked: boolean) => { ... }\n\n  const timeframes: Timeframe[] = ['1D', '1W', '1M', '1Y', 'ALL'];\n\n  return (\n    <Card className=\"w-full bg-card text-card-foreground border-border\">\n      <CardHeader className=\"border-b border-border pb-4\">\n        <CardTitle className=\"flex items-center text-lg\">\n          <Filter className=\"mr-2 h-5 w-5 text-primary\" />\n          Filter Dashboard\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"p-4 space-y-4\">\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"sector-select\">Sector</Label>\n          <Select onValueChange={handleSelectChange('sector')} value={filters.sector}>\n            <SelectTrigger id=\"sector-select\" className=\"w-full bg-background border-input\">\n              <SelectValue placeholder=\"Select Sector\" />\n            </SelectTrigger>\n            <SelectContent className=\"bg-popover text-popover-foreground\">\n              <SelectItem value=\"all\">All Sectors</SelectItem>\n              {availableSectors.map((sector) => (\n                <SelectItem key={sector} value={sector}>{sector}</SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"market-segment-select\">Market Segment</Label>\n          <Select onValueChange={handleSelectChange('marketSegment')} value={filters.marketSegment}>\n            <SelectTrigger id=\"market-segment-select\" className=\"w-full bg-background border-input\">\n              <SelectValue placeholder=\"Select Segment\" />\n            </SelectTrigger>\n            <SelectContent className=\"bg-popover text-popover-foreground\">\n               <SelectItem value=\"all\">All Segments</SelectItem>\n              {availableMarketSegments.map((segment) => (\n                <SelectItem key={segment} value={segment}>{segment}</SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"timeframe-select\">Timeframe</Label>\n          <Select onValueChange={handleSelectChange('timeframe')} value={filters.timeframe}>\n            <SelectTrigger id=\"timeframe-select\" className=\"w-full bg-background border-input\">\n              <SelectValue placeholder=\"Select Timeframe\" />\n            </SelectTrigger>\n            <SelectContent className=\"bg-popover text-popover-foreground\">\n              {timeframes.map((tf) => (\n                <SelectItem key={tf} value={tf}>{tf}</SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n\n        {/* Example Checkbox group - uncomment and adapt if needed */}\n        {/* <div className=\"space-y-2\">\n          <Label>Additional Filters</Label>\n          <div className=\"flex items-center space-x-2\">\n            <Checkbox id=\"filter-option-1\" />\n            <Label htmlFor=\"filter-option-1\" className=\"font-normal\">Option 1</Label>\n          </div>\n           <div className=\"flex items-center space-x-2\">\n            <Checkbox id=\"filter-option-2\" />\n            <Label htmlFor=\"filter-option-2\" className=\"font-normal\">Option 2</Label>\n          </div>\n        </div> */}\n\n        {/* Optional: Add an Apply button if changes shouldn't be instant */}\n        {/* <Button onClick={() => onFilterChange(filters)} className=\"w-full mt-4 bg-primary text-primary-foreground hover:bg-primary/90\">\n          Apply Filters\n        </Button> */}\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default DashboardFilterGroup;\n"
    },
    {
        "fileName": "src/components/main_trading_dashboard/TrendingStocksSection.tsx",
        "content": "import React from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { ResponsiveContainer, LineChart, Line, Tooltip, XAxis, YAxis } from 'recharts';\nimport { TrendingUp, ArrowUpRight, ArrowDownRight } from 'lucide-react';\nimport { cn } from '@/lib/utils'; // Assuming you have a utility for class names\nimport StockNewsCards from './StockNewsCards'; // Import the news card component\n\n// Placeholder data structure for a stock\ninterface StockData {\n  id: string;\n  ticker: string;\n  name: string;\n  price: number;\n  changePercent: number;\n  // Simplified chart data - replace with actual data structure\n  chartData: { name: string; value: number }[];\n  news: NewsItem[]; // Assuming NewsItem type is defined in StockNewsCards or shared\n}\n\n// Placeholder data for news item (adjust as needed)\ninterface NewsItem {\n  id: string;\n  headline: string;\n  source: string;\n  summary: string;\n  timestamp: string;\n  fullArticle: string;\n}\n\ninterface TrendingStockCardProps {\n  stock: StockData;\n  onStockClick: (stockId: string) => void;\n}\n\nconst TrendingStockCard: React.FC<TrendingStockCardProps> = ({ stock, onStockClick }) => {\n  const isPositive = stock.changePercent >= 0;\n  const colorClass = isPositive ? 'text-success' : 'text-destructive';\n  const IconComponent = isPositive ? ArrowUpRight : ArrowDownRight;\n\n  return (\n    <Card\n      className=\"bg-card text-card-foreground border-border cursor-pointer hover:shadow-lg transition-shadow duration-200 stagger-item flex flex-col\"\n      onClick={() => onStockClick(stock.id)}\n    >\n      <CardHeader className=\"pb-2\">\n        <div className=\"flex justify-between items-center\">\n          <CardTitle className=\"text-lg font-semibold\">{stock.ticker}</CardTitle>\n          <div className={cn('flex items-center font-semibold', colorClass)}>\n            <IconComponent className=\"h-4 w-4 mr-1\" />\n            {stock.changePercent.toFixed(2)}%\n          </div>\n        </div>\n        <p className=\"text-sm text-muted-foreground\">{stock.name}</p>\n        <p className=\"text-xl font-bold\">${stock.price.toFixed(2)}</p>\n      </CardHeader>\n      <CardContent className=\"flex-grow flex flex-col justify-between pt-0\">\n        <div className=\"h-24 -mx-4 mb-2\">\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <LineChart data={stock.chartData} margin={{ top: 5, right: 10, left: 10, bottom: 0 }}>\n              <defs>\n                 <linearGradient id={`gradient-${stock.ticker}`} x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                  <stop offset=\"5%\" stopColor={isPositive ? 'hsl(var(--success))' : 'hsl(var(--destructive))'} stopOpacity={0.3}/>\n                  <stop offset=\"95%\" stopColor={isPositive ? 'hsl(var(--success))' : 'hsl(var(--destructive))'} stopOpacity={0}/>\n                </linearGradient>\n              </defs>\n              <Tooltip\n                contentStyle={{ backgroundColor: 'hsl(var(--popover))', color: 'hsl(var(--popover-foreground))', border: '1px solid hsl(var(--border))', borderRadius: 'var(--radius)' }}\n                itemStyle={{ color: 'hsl(var(--popover-foreground))' }}\n                cursor={{ stroke: 'hsl(var(--primary))', strokeWidth: 1, strokeDasharray: '3 3' }}\n              />\n              {/* Minimal axes for visual trend */}\n              <XAxis dataKey=\"name\" hide />\n              <YAxis domain={['auto', 'auto']} hide />\n              <Line\n                type=\"monotone\"\n                dataKey=\"value\"\n                stroke={isPositive ? 'hsl(var(--success))' : 'hsl(var(--destructive))'}\n                strokeWidth={2}\n                dot={false}\n                fillOpacity={1}\n                fill={`url(#gradient-${stock.ticker})`}\n              />\n            </LineChart>\n          </ResponsiveContainer>\n        </div>\n        {/* Integrate News Cards Here */}\n        <div className=\"mt-2 border-t border-border pt-2\">\n          <StockNewsCards newsItems={stock.news} maxVisible={2} /> {/* Limit initially visible news items */}\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\ninterface TrendingStocksSectionProps {\n  stocks: StockData[];\n  onStockClick: (stockId: string) => void;\n}\n\nconst TrendingStocksSection: React.FC<TrendingStocksSectionProps> = ({ stocks, onStockClick }) => {\n  if (!stocks || stocks.length === 0) {\n    return (\n      <div className=\"text-center text-muted-foreground py-8\">\n        No trending stocks available.\n      </div>\n    );\n  }\n\n  // Ensure we only show top 3\n  const top3Stocks = stocks.slice(0, 3);\n\n  return (\n    <section aria-labelledby=\"trending-stocks-title\">\n       <h2 id=\"trending-stocks-title\" className=\"text-2xl font-semibold mb-4 flex items-center\">\n         <TrendingUp className=\"mr-2 h-6 w-6 text-primary\" />\n         Top 3 Trending Stocks\n       </h2>\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 stagger-container\">\n        {top3Stocks.map((stock) => (\n          <TrendingStockCard key={stock.id} stock={stock} onStockClick={onStockClick} />\n        ))}\n      </div>\n    </section>\n  );\n};\n\nexport default TrendingStocksSection;\n"
    },
    {
        "fileName": "src/components/main_trading_dashboard/StockNewsCards.tsx",
        "content": "import React from 'react';\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Newspaper } from 'lucide-react';\nimport { formatDistanceToNow } from 'date-fns'; // For relative time\n\n// Define the structure for a single news item\nexport interface NewsItem {\n  id: string;\n  headline: string;\n  source: string;\n  summary: string;\n  timestamp: string; // Expecting ISO date string or Date object\n  fullArticle: string;\n}\n\ninterface StockNewsCardsProps {\n  newsItems: NewsItem[];\n  maxVisible?: number; // Optionally limit initially visible items\n}\n\nconst StockNewsCards: React.FC<StockNewsCardsProps> = ({ newsItems, maxVisible }) => {\n  const itemsToShow = maxVisible ? newsItems.slice(0, maxVisible) : newsItems;\n\n  if (!itemsToShow || itemsToShow.length === 0) {\n    return <p className=\"text-sm text-muted-foreground px-1 py-2\">No recent news available.</p>;\n  }\n\n  return (\n    <div className=\"space-y-2\">\n       <h4 className=\"text-sm font-medium text-muted-foreground flex items-center mb-1\">\n         <Newspaper className=\"h-4 w-4 mr-1.5\" /> Related News\n       </h4>\n      <Accordion type=\"single\" collapsible className=\"w-full\">\n        {itemsToShow.map((item, index) => (\n          <AccordionItem key={item.id} value={`item-${index}`} className=\"border-b-0 mb-1 last:mb-0\">\n             {/* Using a Card for subtle visual grouping */}\n            <Card className=\"bg-muted/50 border-none overflow-hidden\">\n               <AccordionTrigger className=\"text-sm font-medium px-3 py-2 text-left hover:no-underline hover:bg-muted/70 transition-colors\">\n                 <span className=\"flex-1 mr-2 truncate\" title={item.headline}>{item.headline}</span>\n               </AccordionTrigger>\n               <AccordionContent className=\"px-3 pb-3 pt-1 text-sm text-muted-foreground bg-muted/30\">\n                 <p className=\"mb-2 text-pretty\">{item.summary}</p>\n                 <div className=\"flex justify-between items-center text-xs\">\n                   <span className=\"font-medium text-foreground/80\">{item.source}</span>\n                   <span title={new Date(item.timestamp).toLocaleString()}>\n                     {formatDistanceToNow(new Date(item.timestamp), { addSuffix: true })}\n                   </span>\n                 </div>\n                 {/* Optional: Add a link to the full article if available */}\n                 {/* <a href=\"#\" className=\"text-primary text-xs mt-1 hover:underline\">Read more</a> */}\n               </AccordionContent>\n            </Card>\n          </AccordionItem>\n        ))}\n      </Accordion>\n       {/* Optional: Show more button if maxVisible is used */}\n       {maxVisible && newsItems.length > maxVisible && (\n         <button className=\"text-xs text-primary hover:underline mt-1 px-1\">\n           Show more news...\n         </button>\n       )}\n    </div>\n  );\n};\n\nexport default StockNewsCards;\n"
    },
    {
        "fileName": "src/components/main_trading_dashboard/StockDetailModal.tsx",
        "content": "import React from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { X } from 'lucide-react';\nimport { ResponsiveContainer, LineChart, Line, Tooltip, XAxis, YAxis, CartesianGrid } from 'recharts';\nimport StockNewsCards, { NewsItem } from './StockNewsCards'; // Import news component and type\n\n// Placeholder data structure for detailed stock info\ninterface StockDetailData {\n  id: string;\n  ticker: string;\n  name: string;\n  price: number;\n  changePercent: number;\n  marketCap: string;\n  volume: string;\n  dayHigh: number;\n  dayLow: number;\n  yearHigh: number;\n  yearLow: number;\n  analystRating?: string; // e.g., 'Buy', 'Hold', 'Sell'\n  // More detailed chart data for historical performance\n  historicalData: { date: string; price: number }[];\n  news: NewsItem[];\n}\n\ninterface StockDetailModalProps {\n  stockData: StockDetailData | null; // Pass null when modal is closed or loading\n  isOpen: boolean;\n  onOpenChange: (isOpen: boolean) => void;\n}\n\nconst StockDetailModal: React.FC<StockDetailModalProps> = ({ stockData, isOpen, onOpenChange }) => {\n  if (!stockData) {\n    return null; // Don't render anything if no stock data\n  }\n\n  const isPositive = stockData.changePercent >= 0;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[800px] bg-card text-card-foreground border-border p-0 max-h-[90vh] flex flex-col\">\n        <DialogHeader className=\"p-6 pb-4 border-b border-border sticky top-0 bg-card z-10\">\n          <DialogTitle className=\"text-2xl font-semibold\">{stockData.name} ({stockData.ticker})</DialogTitle>\n          <DialogDescription className=\"flex items-center space-x-4\">\n             <span className=\"text-xl font-bold\">${stockData.price.toFixed(2)}</span>\n             <span className={`font-semibold ${isPositive ? 'text-success' : 'text-destructive'}`}>\n               {isPositive ? '+' : ''}{stockData.changePercent.toFixed(2)}%\n             </span>\n          </DialogDescription>\n           {/* Close button inside header */}\n           <button\n            onClick={() => onOpenChange(false)}\n            className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\"\n          >\n            <X className=\"h-5 w-5\" />\n            <span className=\"sr-only\">Close</span>\n          </button>\n        </DialogHeader>\n\n        <div className=\"flex-grow overflow-y-auto p-6 space-y-6 no-scrollbar\">\n          {/* Performance Chart Section */}\n          <section>\n            <h3 className=\"text-lg font-semibold mb-3\">Historical Performance</h3>\n            <div className=\"h-64 w-full\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <LineChart data={stockData.historicalData} margin={{ top: 5, right: 20, left: -10, bottom: 5 }}>\n                  <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(var(--border))\"/>\n                  <XAxis dataKey=\"date\" tick={{ fill: 'hsl(var(--muted-foreground))', fontSize: 12 }} tickLine={false} axisLine={{ stroke: 'hsl(var(--border))' }}/>\n                  <YAxis tick={{ fill: 'hsl(var(--muted-foreground))', fontSize: 12 }} tickLine={false} axisLine={{ stroke: 'hsl(var(--border))' }} domain={['auto', 'auto']} />\n                  <Tooltip\n                    contentStyle={{ backgroundColor: 'hsl(var(--popover))', color: 'hsl(var(--popover-foreground))', border: '1px solid hsl(var(--border))', borderRadius: 'var(--radius)' }}\n                    itemStyle={{ color: 'hsl(var(--popover-foreground))' }}\n                    cursor={{ stroke: 'hsl(var(--primary))', strokeWidth: 1, strokeDasharray: '3 3' }}\n                  />\n                  <Line type=\"monotone\" dataKey=\"price\" stroke=\"hsl(var(--primary))\" strokeWidth={2} dot={false} />\n                </LineChart>\n              </ResponsiveContainer>\n            </div>\n          </section>\n\n          {/* Key Metrics Section */}\n          <section>\n            <h3 className=\"text-lg font-semibold mb-3\">Key Metrics</h3>\n            <div className=\"grid grid-cols-2 md:grid-cols-3 gap-x-4 gap-y-3 text-sm\">\n              <div className=\"bg-muted/50 p-3 rounded-md\"><span className=\"text-muted-foreground\">Market Cap:</span> <span className=\"font-medium text-foreground\">{stockData.marketCap}</span></div>\n              <div className=\"bg-muted/50 p-3 rounded-md\"><span className=\"text-muted-foreground\">Volume:</span> <span className=\"font-medium text-foreground\">{stockData.volume}</span></div>\n              <div className=\"bg-muted/50 p-3 rounded-md\"><span className=\"text-muted-foreground\">Day High:</span> <span className=\"font-medium text-foreground\">${stockData.dayHigh.toFixed(2)}</span></div>\n              <div className=\"bg-muted/50 p-3 rounded-md\"><span className=\"text-muted-foreground\">Day Low:</span> <span className=\"font-medium text-foreground\">${stockData.dayLow.toFixed(2)}</span></div>\n              <div className=\"bg-muted/50 p-3 rounded-md\"><span className=\"text-muted-foreground\">52 Week High:</span> <span className=\"font-medium text-foreground\">${stockData.yearHigh.toFixed(2)}</span></div>\n              <div className=\"bg-muted/50 p-3 rounded-md\"><span className=\"text-muted-foreground\">52 Week Low:</span> <span className=\"font-medium text-foreground\">${stockData.yearLow.toFixed(2)}</span></div>\n              {stockData.analystRating && (\n                 <div className=\"bg-muted/50 p-3 rounded-md\"><span className=\"text-muted-foreground\">Analyst Rating:</span> <span className=\"font-medium text-foreground\">{stockData.analystRating}</span></div>\n              )}\n            </div>\n          </section>\n\n          {/* News Section */}\n          <section>\n             <h3 className=\"text-lg font-semibold mb-3\">Related News</h3>\n             <StockNewsCards newsItems={stockData.news} /> {/* Show all news here */}\n          </section>\n\n           {/* Advanced Analytics Placeholder */}\n          {/* <section>\n             <h3 className=\"text-lg font-semibold mb-3\">Advanced Analytics</h3>\n             <p className=\"text-muted-foreground\">Advanced analytics content goes here...</p>\n          </section> */}\n        </div>\n\n        <DialogFooter className=\"p-4 border-t border-border sticky bottom-0 bg-card z-10\">\n          {/* Add actions if needed, e.g., Add to Watchlist */}\n          <Button variant=\"outline\" onClick={() => onOpenChange(false)}>Close</Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nexport default StockDetailModal;\n"
    },
    {
        "fileName": "src/components/main_trading_dashboard/MarketTrendOverviewPanel.tsx",
        "content": "import React from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { ResponsiveContainer, LineChart, Line, Tooltip, XAxis, YAxis, AreaChart, Area, BarChart, Bar } from 'recharts';\nimport { Activity, TrendingUp, Map, Smile, Frown } from 'lucide-react';\n\n// Define potential visualization types\ntype VisualizationType = 'line' | 'heatmap' | 'sentiment_bar';\n\n// Placeholder data structures based on visualization type\ninterface LineDataPoint { name: string; value: number; }\ninterface HeatmapSector { name: string; value: number; } // Simplified heatmap data\ninterface SentimentData { positive: number; negative: number; neutral: number; }\n\ninterface MarketTrendOverviewPanelProps {\n  title?: string;\n  visualizationType: VisualizationType;\n  data: LineDataPoint[] | HeatmapSector[] | SentimentData; // Adjust based on type\n}\n\n// Helper to render the correct chart\nconst renderVisualization = (type: VisualizationType, data: any) => {\n  switch (type) {\n    case 'line':\n      const lineData = data as LineDataPoint[];\n      const lastValue = lineData[lineData.length - 1]?.value ?? 0;\n      const firstValue = lineData[0]?.value ?? 1; // Avoid division by zero\n      const isPositiveTrend = lastValue >= firstValue;\n      const strokeColor = isPositiveTrend ? 'hsl(var(--success))' : 'hsl(var(--destructive))';\n      return (\n        <ResponsiveContainer width=\"100%\" height={200}>\n          <AreaChart data={lineData} margin={{ top: 5, right: 5, left: 5, bottom: 0 }}>\n            <defs>\n              <linearGradient id=\"trendGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                <stop offset=\"5%\" stopColor={strokeColor} stopOpacity={0.3}/>\n                <stop offset=\"95%\" stopColor={strokeColor} stopOpacity={0}/>\n              </linearGradient>\n            </defs>\n            <Tooltip\n              contentStyle={{ backgroundColor: 'hsl(var(--popover))', color: 'hsl(var(--popover-foreground))', border: '1px solid hsl(var(--border))', borderRadius: 'var(--radius)' }}\n              itemStyle={{ color: 'hsl(var(--popover-foreground))' }}\n              cursor={{ stroke: 'hsl(var(--primary))', strokeWidth: 1, strokeDasharray: '3 3' }}\n            />\n            {/* Minimal axes */}\n            <XAxis dataKey=\"name\" hide />\n            <YAxis domain={['auto', 'auto']} hide />\n            <Area\n                type=\"monotone\"\n                dataKey=\"value\"\n                stroke={strokeColor}\n                strokeWidth={2}\n                fillOpacity={1}\n                fill=\"url(#trendGradient)\"\n              />\n          </AreaChart>\n        </ResponsiveContainer>\n      );\n    case 'heatmap': // Simplified heatmap using colored boxes\n      const heatmapData = data as HeatmapSector[];\n      return (\n        <div className=\"grid grid-cols-3 sm:grid-cols-4 lg:grid-cols-5 gap-2 p-2 h-[200px] overflow-y-auto no-scrollbar\">\n          {heatmapData.map((sector) => {\n            // Simple value-to-color mapping (example)\n            let bgColorClass = 'bg-muted';\n            if (sector.value > 1) bgColorClass = 'bg-success/70';\n            else if (sector.value < -1) bgColorClass = 'bg-destructive/70';\n            else if (sector.value > 0) bgColorClass = 'bg-success/30';\n            else if (sector.value < 0) bgColorClass = 'bg-destructive/30';\n\n            return (\n              <div key={sector.name} className={`p-2 rounded-md flex flex-col items-center justify-center text-center ${bgColorClass}`}>\n                <span className=\"text-xs font-medium text-foreground/90 truncate w-full\">{sector.name}</span>\n                <span className={`text-sm font-bold ${sector.value > 0 ? 'text-success-foreground' : sector.value < 0 ? 'text-destructive-foreground' : 'text-foreground'}`}>\n                    {sector.value.toFixed(1)}%\n                </span>\n              </div>\n            );\n          })}\n        </div>\n      );\n    case 'sentiment_bar':\n      const sentiment = data as SentimentData;\n      const total = sentiment.positive + sentiment.negative + sentiment.neutral;\n      const positivePercent = total > 0 ? (sentiment.positive / total) * 100 : 0;\n      const negativePercent = total > 0 ? (sentiment.negative / total) * 100 : 0;\n      const neutralPercent = total > 0 ? (sentiment.neutral / total) * 100 : 0;\n      return (\n          <div className=\"w-full h-[200px] flex flex-col justify-center items-center p-4 space-y-3\">\n              <div className=\"w-full h-6 flex rounded-full overflow-hidden border border-border\">\n                  <div className=\"bg-success h-full flex items-center justify-center\" style={{ width: `${positivePercent}%` }} title={`Positive: ${positivePercent.toFixed(1)}%`}>\n                     {positivePercent > 10 && <Smile className=\"h-4 w-4 text-success-foreground\" />} \n                  </div>\n                  <div className=\"bg-muted h-full flex items-center justify-center\" style={{ width: `${neutralPercent}%` }} title={`Neutral: ${neutralPercent.toFixed(1)}%`}>\n                       {/* Neutral Icon or Text if needed */}\n                  </div>\n                  <div className=\"bg-destructive h-full flex items-center justify-center\" style={{ width: `${negativePercent}%` }} title={`Negative: ${negativePercent.toFixed(1)}%`}>\n                      {negativePercent > 10 && <Frown className=\"h-4 w-4 text-destructive-foreground\" />} \n                  </div>\n              </div>\n               <div className=\"flex justify-between w-full text-xs text-muted-foreground px-1\">\n                  <span>{positivePercent.toFixed(1)}% Positive</span>\n                  <span>{neutralPercent.toFixed(1)}% Neutral</span>\n                  <span>{negativePercent.toFixed(1)}% Negative</span>\n               </div>\n          </div>\n      );\n    default:\n      return <p className=\"text-muted-foreground text-center py-10\">Unsupported visualization type.</p>;\n  }\n};\n\n// Map type to Icon\nconst getIcon = (type: VisualizationType) => {\n    switch(type) {\n        case 'line': return <TrendingUp className=\"mr-2 h-5 w-5 text-primary\" />;\n        case 'heatmap': return <Map className=\"mr-2 h-5 w-5 text-primary\" />;\n        case 'sentiment_bar': return <Activity className=\"mr-2 h-5 w-5 text-primary\" />;\n        default: return <Activity className=\"mr-2 h-5 w-5 text-primary\" />;\n    }\n}\n\nconst MarketTrendOverviewPanel: React.FC<MarketTrendOverviewPanelProps> = ({ title = 'Market Trend Overview', visualizationType, data }) => {\n  return (\n    <Card className=\"bg-card text-card-foreground border-border\">\n      <CardHeader className=\"border-b border-border pb-3\">\n        <CardTitle className=\"text-xl font-semibold flex items-center\">\n          {getIcon(visualizationType)}\n          {title}\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"p-0\">\n         {renderVisualization(visualizationType, data)}\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default MarketTrendOverviewPanel;\n"
    },
    {
        "fileName": "src/components/main_trading_dashboard/RecommendedStocksTable.tsx",
        "content": "import React, { useState } from 'react';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\nimport { Button } from '@/components/ui/button';\nimport { ArrowUpDown, ArrowUp, ArrowDown, HelpCircle, TrendingUp } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\n// Define the structure for a stock row\ninterface StockRowData {\n  id: string;\n  ticker: string;\n  name: string;\n  price: number;\n  changePercent: number;\n  analystRating?: string;\n  recommendationReason?: string;\n}\n\ntype SortKey = keyof Pick<StockRowData, 'ticker' | 'name' | 'price' | 'changePercent' | 'analystRating'>;\ntype SortDirection = 'asc' | 'desc';\n\ninterface RecommendedStocksTableProps {\n  stocks: StockRowData[];\n  onStockClick: (stockId: string) => void;\n  title?: string;\n}\n\nconst RecommendedStocksTable: React.FC<RecommendedStocksTableProps> = ({\n  stocks,\n  onStockClick,\n  title = 'Top 10 Recommended Stocks',\n}) => {\n  const [sortKey, setSortKey] = useState<SortKey>('changePercent'); // Default sort\n  const [sortDirection, setSortDirection] = useState<SortDirection>('desc');\n\n  const handleSort = (key: SortKey) => {\n    if (sortKey === key) {\n      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortKey(key);\n      setSortDirection('asc'); // Default to ascending when changing column\n    }\n  };\n\n  const sortedStocks = React.useMemo(() => {\n    return [...stocks].sort((a, b) => {\n      const aValue = a[sortKey];\n      const bValue = b[sortKey];\n\n      // Handle undefined or null values (e.g., analystRating)\n      if (aValue == null && bValue == null) return 0;\n      if (aValue == null) return sortDirection === 'asc' ? -1 : 1;\n      if (bValue == null) return sortDirection === 'asc' ? 1 : -1;\n\n      let comparison = 0;\n      if (typeof aValue === 'number' && typeof bValue === 'number') {\n        comparison = aValue - bValue;\n      } else if (typeof aValue === 'string' && typeof bValue === 'string') {\n        comparison = aValue.localeCompare(bValue);\n      } else {\n        // Fallback for mixed types or other types (treat as strings)\n        comparison = String(aValue).localeCompare(String(bValue));\n      }\n\n      return sortDirection === 'asc' ? comparison : -comparison;\n    });\n  }, [stocks, sortKey, sortDirection]);\n\n  const renderSortIcon = (key: SortKey) => {\n    if (sortKey !== key) {\n      return <ArrowUpDown className=\"ml-2 h-3 w-3 text-muted-foreground/70\" />;\n    }\n    return sortDirection === 'asc' ? (\n      <ArrowUp className=\"ml-2 h-3 w-3 text-primary\" />\n    ) : (\n      <ArrowDown className=\"ml-2 h-3 w-3 text-primary\" />\n    );\n  };\n\n  return (\n    <Card className=\"bg-card text-card-foreground border-border overflow-hidden\">\n      <CardHeader className=\"border-b border-border pb-3 pt-4 px-4\">\n          <CardTitle className=\"text-xl font-semibold flex items-center\">\n             <TrendingUp className=\"mr-2 h-5 w-5 text-primary\" />\n             {title}\n           </CardTitle>\n       </CardHeader>\n       <CardContent className=\"p-0\">\n          <TooltipProvider delayDuration={100}>\n            <Table className=\"w-full\">\n              <TableHeader className=\"bg-muted/50\">\n                <TableRow className=\"border-border\">\n                  <TableHead className=\"px-4 py-2 cursor-pointer hover:bg-muted transition-colors\" onClick={() => handleSort('ticker')}>Ticker {renderSortIcon('ticker')}</TableHead>\n                  <TableHead className=\"px-4 py-2 cursor-pointer hover:bg-muted transition-colors\" onClick={() => handleSort('name')}>Name {renderSortIcon('name')}</TableHead>\n                  <TableHead className=\"px-4 py-2 text-right cursor-pointer hover:bg-muted transition-colors\" onClick={() => handleSort('price')}>Price {renderSortIcon('price')}</TableHead>\n                  <TableHead className=\"px-4 py-2 text-right cursor-pointer hover:bg-muted transition-colors\" onClick={() => handleSort('changePercent')}>% Change {renderSortIcon('changePercent')}</TableHead>\n                  <TableHead className=\"px-4 py-2 text-center cursor-pointer hover:bg-muted transition-colors\" onClick={() => handleSort('analystRating')}>Rating {renderSortIcon('analystRating')}</TableHead>\n                  <TableHead className=\"px-4 py-2 text-center\">Why?</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {sortedStocks.map((stock) => {\n                  const isPositive = stock.changePercent >= 0;\n                  const colorClass = isPositive ? 'text-success' : 'text-destructive';\n                  return (\n                    <TableRow\n                      key={stock.id}\n                      className=\"border-border hover:bg-muted/30 cursor-pointer transition-colors duration-150 animate-fade-in\"\n                      onClick={() => onStockClick(stock.id)}\n                    >\n                      <TableCell className=\"font-medium px-4 py-2.5\">{stock.ticker}</TableCell>\n                      <TableCell className=\"text-muted-foreground px-4 py-2.5 truncate max-w-xs\">{stock.name}</TableCell>\n                      <TableCell className=\"text-right px-4 py-2.5\">${stock.price.toFixed(2)}</TableCell>\n                      <TableCell className={cn('text-right font-medium px-4 py-2.5', colorClass)}>\n                        {isPositive ? '+' : ''}{stock.changePercent.toFixed(2)}%\n                      </TableCell>\n                      <TableCell className=\"text-center px-4 py-2.5\">{stock.analystRating ?? '-'}</TableCell>\n                      <TableCell className=\"text-center px-4 py-2.5\">\n                        {stock.recommendationReason ? (\n                          <Tooltip>\n                            <TooltipTrigger asChild>\n                              <Button variant=\"ghost\" size=\"icon\" className=\"h-6 w-6\" onClick={(e) => e.stopPropagation()} >\n                                <HelpCircle className=\"h-4 w-4 text-muted-foreground hover:text-primary\" />\n                              </Button>\n                            </TooltipTrigger>\n                            <TooltipContent className=\"bg-popover text-popover-foreground border-border max-w-xs\">\n                              <p>{stock.recommendationReason}</p>\n                            </TooltipContent>\n                          </Tooltip>\n                        ) : (\n                           <span className=\"text-muted-foreground\">-</span>\n                        )}\n                      </TableCell>\n                    </TableRow>\n                  );\n                })}\n                {sortedStocks.length === 0 && (\n                   <TableRow>\n                     <TableCell colSpan={6} className=\"h-24 text-center text-muted-foreground\">\n                       No recommended stocks found.\n                     </TableCell>\n                   </TableRow>\n                )}\n              </TableBody>\n            </Table>\n          </TooltipProvider>\n       </CardContent>\n    </Card>\n  );\n};\n\nexport default RecommendedStocksTable;\n\n// Re-usable Card components if not globally available\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\n"
    },
    {
        "fileName": "src/components/main_trading_dashboard/LoserStocksTable.tsx",
        "content": "import React, { useState } from 'react';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\nimport { Button } from '@/components/ui/button';\nimport { ArrowUpDown, ArrowUp, ArrowDown, HelpCircle, TrendingDown } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\n// Define the structure for a stock row (same as recommended for consistency)\ninterface StockRowData {\n  id: string;\n  ticker: string;\n  name: string;\n  price: number;\n  changePercent: number;\n  analystRating?: string;\n  // Tooltip for losers might not be 'why recommended', maybe 'key factor' or omitted\n  tooltipInfo?: string;\n}\n\ntype SortKey = keyof Pick<StockRowData, 'ticker' | 'name' | 'price' | 'changePercent' | 'analystRating'>;\ntype SortDirection = 'asc' | 'desc';\n\ninterface LoserStocksTableProps {\n  stocks: StockRowData[];\n  onStockClick: (stockId: string) => void;\n  title?: string;\n}\n\nconst LoserStocksTable: React.FC<LoserStocksTableProps> = ({\n  stocks,\n  onStockClick,\n  title = 'Top 10 Loser Stocks',\n}) => {\n  const [sortKey, setSortKey] = useState<SortKey>('changePercent'); // Default sort by loss\n  const [sortDirection, setSortDirection] = useState<SortDirection>('asc'); // Ascending shows biggest losers first\n\n  const handleSort = (key: SortKey) => {\n    if (sortKey === key) {\n      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortKey(key);\n       // Sensible defaults when changing sort column\n      setSortDirection(key === 'changePercent' ? 'asc' : 'asc');\n    }\n  };\n\n  const sortedStocks = React.useMemo(() => {\n     // Filter for negative change if this component strictly shows losers\n    const loserStocks = stocks.filter(stock => stock.changePercent < 0);\n    return [...loserStocks].sort((a, b) => {\n      const aValue = a[sortKey];\n      const bValue = b[sortKey];\n\n      if (aValue == null && bValue == null) return 0;\n      if (aValue == null) return sortDirection === 'asc' ? -1 : 1;\n      if (bValue == null) return sortDirection === 'asc' ? 1 : -1;\n\n      let comparison = 0;\n      if (typeof aValue === 'number' && typeof bValue === 'number') {\n        comparison = aValue - bValue;\n      } else if (typeof aValue === 'string' && typeof bValue === 'string') {\n        comparison = aValue.localeCompare(bValue);\n      } else {\n        comparison = String(aValue).localeCompare(String(bValue));\n      }\n\n      return sortDirection === 'asc' ? comparison : -comparison;\n    });\n  }, [stocks, sortKey, sortDirection]);\n\n  const renderSortIcon = (key: SortKey) => {\n    if (sortKey !== key) {\n      return <ArrowUpDown className=\"ml-2 h-3 w-3 text-muted-foreground/70\" />;\n    }\n    return sortDirection === 'asc' ? (\n      <ArrowUp className=\"ml-2 h-3 w-3 text-primary\" />\n    ) : (\n      <ArrowDown className=\"ml-2 h-3 w-3 text-primary\" />\n    );\n  };\n\n  return (\n     <Card className=\"bg-card text-card-foreground border-border overflow-hidden\">\n      <CardHeader className=\"border-b border-border pb-3 pt-4 px-4\">\n          <CardTitle className=\"text-xl font-semibold flex items-center\">\n             <TrendingDown className=\"mr-2 h-5 w-5 text-destructive\" />\n             {title}\n           </CardTitle>\n       </CardHeader>\n       <CardContent className=\"p-0\">\n        <TooltipProvider delayDuration={100}>\n          <Table className=\"w-full\">\n            <TableHeader className=\"bg-muted/50\">\n              <TableRow className=\"border-border\">\n                <TableHead className=\"px-4 py-2 cursor-pointer hover:bg-muted transition-colors\" onClick={() => handleSort('ticker')}>Ticker {renderSortIcon('ticker')}</TableHead>\n                <TableHead className=\"px-4 py-2 cursor-pointer hover:bg-muted transition-colors\" onClick={() => handleSort('name')}>Name {renderSortIcon('name')}</TableHead>\n                <TableHead className=\"px-4 py-2 text-right cursor-pointer hover:bg-muted transition-colors\" onClick={() => handleSort('price')}>Price {renderSortIcon('price')}</TableHead>\n                <TableHead className=\"px-4 py-2 text-right cursor-pointer hover:bg-muted transition-colors\" onClick={() => handleSort('changePercent')}>% Change {renderSortIcon('changePercent')}</TableHead>\n                <TableHead className=\"px-4 py-2 text-center cursor-pointer hover:bg-muted transition-colors\" onClick={() => handleSort('analystRating')}>Rating {renderSortIcon('analystRating')}</TableHead>\n                <TableHead className=\"px-4 py-2 text-center\">Info</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {sortedStocks.map((stock) => (\n                <TableRow\n                  key={stock.id}\n                  className=\"border-border hover:bg-muted/30 cursor-pointer transition-colors duration-150 animate-fade-in\"\n                  onClick={() => onStockClick(stock.id)}\n                >\n                  <TableCell className=\"font-medium px-4 py-2.5\">{stock.ticker}</TableCell>\n                  <TableCell className=\"text-muted-foreground px-4 py-2.5 truncate max-w-xs\">{stock.name}</TableCell>\n                  <TableCell className=\"text-right px-4 py-2.5\">${stock.price.toFixed(2)}</TableCell>\n                  <TableCell className=\"text-right font-medium px-4 py-2.5 text-destructive\">\n                    {stock.changePercent.toFixed(2)}%\n                  </TableCell>\n                  <TableCell className=\"text-center px-4 py-2.5\">{stock.analystRating ?? '-'}</TableCell>\n                  <TableCell className=\"text-center px-4 py-2.5\">\n                    {stock.tooltipInfo ? (\n                      <Tooltip>\n                        <TooltipTrigger asChild>\n                           <Button variant=\"ghost\" size=\"icon\" className=\"h-6 w-6\" onClick={(e) => e.stopPropagation()} >\n                            <HelpCircle className=\"h-4 w-4 text-muted-foreground hover:text-primary\" />\n                          </Button>\n                        </TooltipTrigger>\n                        <TooltipContent className=\"bg-popover text-popover-foreground border-border max-w-xs\">\n                          <p>{stock.tooltipInfo}</p>\n                        </TooltipContent>\n                      </Tooltip>\n                    ) : (\n                      <span className=\"text-muted-foreground\">-</span>\n                    )}\n                  </TableCell>\n                </TableRow>\n              ))}\n               {sortedStocks.length === 0 && (\n                   <TableRow>\n                     <TableCell colSpan={6} className=\"h-24 text-center text-muted-foreground\">\n                       No significant losers found.\n                     </TableCell>\n                   </TableRow>\n                )}\n            </TableBody>\n          </Table>\n        </TooltipProvider>\n       </CardContent>\n    </Card>\n  );\n};\n\nexport default LoserStocksTable;\n\n// Re-usable Card components if not globally available\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\n"
    },
    {
        "fileName": "src/components/main_trading_dashboard/AppearanceSettings.tsx",
        "content": "import React from 'react';\nimport { useTheme } from 'next-themes';\nimport { ToggleGroup, ToggleGroupItem } from '@/components/ui/toggle-group';\nimport { Button } from '@/components/ui/button';\nimport { Sun, Moon, Laptop, ZoomIn, ZoomOut, Settings } from 'lucide-react';\nimport { Label } from '@/components/ui/label';\n\ninterface AppearanceSettingsProps {\n  // Add props for font size control if state is managed externally\n  // currentFontSize?: number;\n  // onFontSizeChange?: (size: number) => void;\n}\n\nconst AppearanceSettings: React.FC<AppearanceSettingsProps> = () => {\n  const { theme, setTheme } = useTheme();\n\n  // Placeholder for font size state/logic - ideally use context or props\n  const [fontSizeScale, setFontSizeScale] = React.useState(1); // Example local state\n\n  const adjustFontSize = (delta: number) => {\n    const newScale = Math.max(0.8, Math.min(1.5, fontSizeScale + delta)); // Clamp scale\n    setFontSizeScale(newScale);\n    // Apply the scale to the root element (or body)\n    document.documentElement.style.setProperty('--text-scale', newScale.toString());\n     // Persist preference if needed (e.g., localStorage)\n  };\n\n  return (\n    <div className=\"p-4 bg-card text-card-foreground rounded-lg border border-border shadow-sm flex flex-col sm:flex-row items-center justify-between gap-4\">\n        <div className=\"flex items-center gap-2\">\n             <Settings className=\"h-5 w-5 text-muted-foreground hidden sm:inline-block\" />\n             <Label className=\"text-sm font-medium hidden sm:inline-block\">Appearance:</Label>\n        </div>\n\n        <div className=\"flex flex-wrap items-center gap-4\">\n            {/* Theme Toggle */}\n            <div>\n                <Label htmlFor=\"theme-toggle\" className=\"text-xs text-muted-foreground mb-1 block text-center sm:hidden\">Theme</Label>\n                <ToggleGroup\n                    id=\"theme-toggle\"\n                    type=\"single\"\n                    variant=\"outline\"\n                    value={theme}\n                    onValueChange={(value) => { if (value) setTheme(value); }}\n                    className=\"flex bg-background rounded-md p-0.5 border border-input\"\n                >\n                    <ToggleGroupItem value=\"light\" aria-label=\"Light theme\" className=\"px-2 py-1 data-[state=on]:bg-primary data-[state=on]:text-primary-foreground\">\n                        <Sun className=\"h-4 w-4\" />\n                    </ToggleGroupItem>\n                    <ToggleGroupItem value=\"dark\" aria-label=\"Dark theme\" className=\"px-2 py-1 data-[state=on]:bg-primary data-[state=on]:text-primary-foreground\">\n                        <Moon className=\"h-4 w-4\" />\n                    </ToggleGroupItem>\n                    <ToggleGroupItem value=\"system\" aria-label=\"System theme\" className=\"px-2 py-1 data-[state=on]:bg-primary data-[state=on]:text-primary-foreground\">\n                        <Laptop className=\"h-4 w-4\" />\n                    </ToggleGroupItem>\n                </ToggleGroup>\n            </div>\n\n            {/* Font Size Control */}\n            <div className=\"flex items-center gap-1\">\n                 <Label htmlFor=\"font-size-decrease\" className=\"text-xs text-muted-foreground mb-1 block text-center sm:hidden\">Font Size</Label>\n                <Button\n                    id=\"font-size-decrease\"\n                    variant=\"outline\"\n                    size=\"icon\"\n                    className=\"h-8 w-8 bg-background border-input\"\n                    onClick={() => adjustFontSize(-0.1)}\n                    aria-label=\"Decrease font size\"\n                    disabled={fontSizeScale <= 0.8}\n                >\n                    <ZoomOut className=\"h-4 w-4\" />\n                </Button>\n                 <span className=\"text-xs w-8 text-center text-muted-foreground\">{(fontSizeScale * 100).toFixed(0)}%</span>\n                <Button\n                    id=\"font-size-increase\"\n                    variant=\"outline\"\n                    size=\"icon\"\n                    className=\"h-8 w-8 bg-background border-input\"\n                    onClick={() => adjustFontSize(0.1)}\n                    aria-label=\"Increase font size\"\n                     disabled={fontSizeScale >= 1.5}\n                >\n                    <ZoomIn className=\"h-4 w-4\" />\n                </Button>\n            </div>\n        </div>\n    </div>\n  );\n};\n\nexport default AppearanceSettings;\n"
    },
    {
        "fileName": "src/components/stock_detail_modal_view/StockDetailModalContainer.tsx",
        "content": "import React from 'react';\nimport {\n  Dialog, \n  DialogContent, \n  DialogOverlay, \n  DialogPortal\n} from '@/components/ui/dialog'; // Assuming Shadcn UI structure\n\ninterface StockDetailModalContainerProps {\n  isOpen: boolean;\n  onOpenChange: (open: boolean) => void;\n  children: React.ReactNode;\n  className?: string;\n}\n\nconst StockDetailModalContainer: React.FC<StockDetailModalContainerProps> = ({ \n  isOpen, \n  onOpenChange, \n  children, \n  className = '' \n}) => {\n  return (\n    <Dialog open={isOpen} onOpenChange={onOpenChange}>\n      <DialogPortal>\n        <DialogOverlay className=\"fixed inset-0 z-50 bg-background/80 backdrop-blur-sm data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\" />\n        <DialogContent \n          className={`fixed left-[50%] top-[50%] z-50 grid w-full max-w-4xl translate-x-[-50%] translate-y-[-50%] gap-4 border bg-card p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg md:w-full text-card-foreground ${className}`}\n          onInteractOutside={(e) => {\n            // Prevent closing on click outside if needed, or allow default behavior\n            // e.preventDefault(); \n          }}\n        >\n          {children}\n        </DialogContent>\n      </DialogPortal>\n    </Dialog>\n  );\n};\n\nexport default StockDetailModalContainer;\n"
    },
    {
        "fileName": "src/components/stock_detail_modal_view/StockSelectorDropdown.tsx",
        "content": "import React from 'react';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\"; // Assuming Shadcn UI structure\n\ninterface StockOption {\n  value: string; // e.g., ticker 'AAPL'\n  label: string; // e.g., 'Apple Inc. (AAPL)'\n}\n\ninterface StockSelectorDropdownProps {\n  stocks: StockOption[];\n  selectedValue: string;\n  onValueChange: (value: string) => void;\n  placeholder?: string;\n  className?: string;\n}\n\nconst StockSelectorDropdown: React.FC<StockSelectorDropdownProps> = ({ \n  stocks = [], \n  selectedValue,\n  onValueChange,\n  placeholder = \"Select stock...\",\n  className = ''\n}) => {\n  return (\n    <Select value={selectedValue} onValueChange={onValueChange}>\n      <SelectTrigger className={`w-[200px] ${className}`}> \n        <SelectValue placeholder={placeholder} />\n      </SelectTrigger>\n      <SelectContent>\n        {stocks.map((stock) => (\n          <SelectItem key={stock.value} value={stock.value}>\n            {stock.label}\n          </SelectItem>\n        ))}\n      </SelectContent>\n    </Select>\n  );\n};\n\nexport default StockSelectorDropdown;\n"
    },
    {
        "fileName": "src/components/stock_detail_modal_view/StockSummaryCard.tsx",
        "content": "import React from 'react';\nimport { Card, CardHeader, CardTitle, CardDescription, CardContent } from '@/components/ui/card'; // Assuming Shadcn UI structure\nimport { cn } from '@/lib/utils'; // Assuming Shadcn utility function for class merging\n\ninterface StockSummaryCardProps {\n  ticker: string;\n  name: string;\n  currentPrice: number;\n  priceChange: number;\n  priceChangePercent: number;\n  className?: string;\n}\n\nconst StockSummaryCard: React.FC<StockSummaryCardProps> = ({ \n  ticker,\n  name,\n  currentPrice,\n  priceChange,\n  priceChangePercent,\n  className = ''\n}) => {\n\n  const isPositiveChange = priceChange >= 0;\n  const changeColor = isPositiveChange ? 'text-success' : 'text-destructive';\n\n  return (\n    <Card className={cn('bg-card text-card-foreground', className)}>\n      <CardHeader className=\"pb-2\">\n        <div className=\"flex justify-between items-baseline\">\n          <CardTitle className=\"text-2xl font-bold\">{ticker}</CardTitle>\n          <span className=\"text-sm text-muted-foreground\">{name}</span>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"flex items-baseline space-x-2\">\n          <p className=\"text-3xl font-semibold\">${currentPrice.toFixed(2)}</p>\n          <p className={cn('text-lg font-medium', changeColor)}>\n            {isPositiveChange ? '+' : ''}{priceChange.toFixed(2)} ({isPositiveChange ? '+' : ''}{priceChangePercent.toFixed(2)}%)\n          </p>\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default StockSummaryCard;\n"
    },
    {
        "fileName": "src/components/stock_detail_modal_view/InteractiveStockChart.tsx",
        "content": "import React, { useState } from 'react';\nimport {\n  ResponsiveContainer,\n  ComposedChart,\n  Line,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n} from 'recharts';\nimport { cn } from '@/lib/utils'; // Assuming Shadcn utility function\n\n// Define a basic structure for stock data points\ninterface StockDataPoint {\n  date: string | number; // Could be timestamp or formatted date string\n  open?: number;\n  high?: number;\n  low?: number;\n  close: number;\n  volume?: number;\n}\n\ninterface InteractiveStockChartProps {\n  data: StockDataPoint[];\n  timeframe: string; // e.g., '1D', '5D', '1M', '6M', '1Y'\n  className?: string;\n}\n\n// Custom Tooltip for OHLC data (example)\nconst CustomTooltip = ({ active, payload, label }: any) => {\n  if (active && payload && payload.length) {\n    const data = payload[0].payload; // Access the full data point\n    return (\n      <div className=\"bg-popover text-popover-foreground p-3 border border-border rounded-md shadow-lg text-sm\">\n        <p className=\"font-semibold\">{typeof label === 'number' ? new Date(label).toLocaleDateString() : label}</p>\n        {data.open !== undefined && <p>Open: <span className=\"font-medium\">${data.open.toFixed(2)}</span></p>}\n        {data.high !== undefined && <p>High: <span className=\"font-medium\">${data.high.toFixed(2)}</span></p>}\n        {data.low !== undefined && <p>Low: <span className=\"font-medium\">${data.low.toFixed(2)}</span></p>}\n        {data.close !== undefined && <p>Close: <span className=\"font-medium text-primary\">${data.close.toFixed(2)}</span></p>}\n        {data.volume !== undefined && <p>Volume: <span className=\"font-medium\">{data.volume.toLocaleString()}</span></p>}\n      </div>\n    );\n  }\n  return null;\n};\n\nconst InteractiveStockChart: React.FC<InteractiveStockChartProps> = ({ \n  data = [], \n  timeframe, // Use timeframe to potentially adjust data formatting or chart type\n  className = ''\n}) => {\n  // Note: Recharts doesn't have a native Candlestick chart.\n  // This example uses a ComposedChart with Line for price and Bar for volume.\n  // Implementing a true Candlestick often requires more complex SVG rendering or a different library.\n\n  return (\n    <div className={cn('h-[400px] w-full bg-card p-4 rounded-lg border border-border', className)}>\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\n        <ComposedChart data={data} margin={{ top: 5, right: 20, bottom: 20, left: 0 }}>\n          <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(var(--border))\" vertical={false} />\n          <XAxis \n            dataKey=\"date\" \n            stroke=\"hsl(var(--muted-foreground))\" \n            fontSize={12} \n            tickLine={false} \n            axisLine={false}\n            // Add formatting based on timeframe if needed\n          />\n          <YAxis \n            yAxisId=\"price\" \n            stroke=\"hsl(var(--muted-foreground))\" \n            fontSize={12} \n            tickLine={false} \n            axisLine={false} \n            tickFormatter={(value) => `$${value.toFixed(2)}`} \n            orientation=\"right\"\n            domain={['auto', 'auto']}\n          />\n          <YAxis \n            yAxisId=\"volume\" \n            orientation=\"left\" \n            stroke=\"hsl(var(--muted-foreground))\" \n            fontSize={12} \n            tickLine={false} \n            axisLine={false} \n            tickFormatter={(value) => `${(value / 1000000).toFixed(1)}M`} \n            domain={[0, 'auto']}\n            width={40} // Adjust width for volume axis labels\n          />\n          <Tooltip content={<CustomTooltip />} cursor={{ fill: 'hsla(var(--muted), 0.3)' }} />\n          {/* <Legend /> */}\n          <Line \n            yAxisId=\"price\" \n            type=\"monotone\" \n            dataKey=\"close\" \n            stroke=\"hsl(var(--primary))\" \n            strokeWidth={2} \n            dot={false} \n            name=\"Close Price\"\n          />\n          <Bar \n            yAxisId=\"volume\" \n            dataKey=\"volume\" \n            fill=\"hsl(var(--secondary))\" \n            barSize={10} \n            name=\"Volume\"\n            opacity={0.5}\n          />\n          {/* Add Brush for zooming if needed */}\n          {/* <Brush dataKey=\"date\" height={30} stroke=\"hsl(var(--primary))\" /> */}\n        </ComposedChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default InteractiveStockChart;\n"
    },
    {
        "fileName": "src/components/stock_detail_modal_view/ChartTimeframeSelector.tsx",
        "content": "import React from 'react';\nimport { ToggleGroup, ToggleGroupItem } from \"@/components/ui/toggle-group\"; // Assuming Shadcn UI structure\nimport { cn } from '@/lib/utils'; // Assuming Shadcn utility function\n\ninterface ChartTimeframeSelectorProps {\n  timeframes: string[]; // e.g., ['1D', '5D', '1M', '6M', '1Y']\n  selectedTimeframe: string;\n  onTimeframeChange: (timeframe: string) => void;\n  className?: string;\n}\n\nconst ChartTimeframeSelector: React.FC<ChartTimeframeSelectorProps> = ({ \n  timeframes = ['1D', '5D', '1M', '6M', '1Y'], \n  selectedTimeframe, \n  onTimeframeChange,\n  className = ''\n}) => {\n  return (\n    <ToggleGroup \n      type=\"single\" \n      value={selectedTimeframe}\n      onValueChange={(value) => {\n        if (value) { // Prevent unselecting all\n          onTimeframeChange(value);\n        }\n      }}\n      className={cn('flex justify-center space-x-1', className)}\n      aria-label=\"Select chart timeframe\"\n    >\n      {timeframes.map((tf) => (\n        <ToggleGroupItem \n          key={tf} \n          value={tf} \n          aria-label={`Select ${tf} timeframe`} \n          className=\"px-3 py-1 h-8 text-xs rounded-md data-[state=on]:bg-primary data-[state=on]:text-primary-foreground\"\n        >\n          {tf}\n        </ToggleGroupItem>\n      ))}\n    </ToggleGroup>\n  );\n};\n\nexport default ChartTimeframeSelector;\n"
    },
    {
        "fileName": "src/components/stock_detail_modal_view/NewsHeadlineList.tsx",
        "content": "import React from 'react';\nimport {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from \"@/components/ui/accordion\"; // Assuming Shadcn UI structure\nimport { cn } from '@/lib/utils';\n\ninterface NewsItem {\n  id: string | number;\n  title: string;\n  summary: string;\n  source?: string; // Optional: source like 'Reuters', 'Bloomberg'\n  publishedDate?: string; // Optional: formatted date string\n  url?: string; // Optional: link to full article\n}\n\ninterface NewsHeadlineListProps {\n  newsItems: NewsItem[];\n  className?: string;\n}\n\nconst NewsHeadlineList: React.FC<NewsHeadlineListProps> = ({ \n  newsItems = [],\n  className = '' \n}) => {\n  if (!newsItems || newsItems.length === 0) {\n    return <p className={cn('text-muted-foreground text-sm', className)}>No recent news available for this stock.</p>;\n  }\n\n  return (\n    <Accordion type=\"multiple\" className={cn('w-full space-y-2', className)}>\n      {newsItems.map((item, index) => (\n        <AccordionItem key={item.id || index} value={`item-${index}`} className=\"border border-border rounded-md px-4 bg-card\">\n          <AccordionTrigger className=\"text-left hover:no-underline py-3\">\n            <div className=\"flex flex-col\">\n              <span className=\"font-medium text-card-foreground text-sm\">{item.title}</span>\n              {(item.source || item.publishedDate) && (\n                <span className=\"text-xs text-muted-foreground mt-1\">\n                  {item.source}{item.source && item.publishedDate && ' • '}{item.publishedDate}\n                </span>\n              )}\n            </div>\n          </AccordionTrigger>\n          <AccordionContent className=\"pb-4 text-sm text-muted-foreground\">\n            {item.summary}\n            {item.url && (\n              <a \n                href={item.url} \n                target=\"_blank\" \n                rel=\"noopener noreferrer\" \n                className=\"text-primary hover:underline ml-2 text-xs\"\n              >\n                Read more\n              </a>\n            )}\n          </AccordionContent>\n        </AccordionItem>\n      ))}\n    </Accordion>\n  );\n};\n\nexport default NewsHeadlineList;\n"
    },
    {
        "fileName": "src/components/stock_detail_modal_view/FundamentalsPanel.tsx",
        "content": "import React from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'; // Assuming Shadcn UI structure\nimport { cn } from '@/lib/utils';\n\ninterface FundamentalsData {\n  marketCap?: number | string;\n  peRatio?: number | string;\n  dividendYield?: number | string;\n  sector?: string;\n  industry?: string;\n  volume?: number | string;\n  avgVolume?: number | string;\n  yearHigh?: number | string;\n  yearLow?: number | string;\n  // Add more fundamental data points as needed\n}\n\ninterface FundamentalsPanelProps {\n  data: FundamentalsData;\n  className?: string;\n}\n\nconst formatValue = (value: number | string | undefined): string => {\n  if (value === undefined || value === null) return 'N/A';\n  if (typeof value === 'number') {\n    // Simple formatting example, adjust as needed\n    if (value >= 1e12) return `${(value / 1e12).toFixed(2)}T`;\n    if (value >= 1e9) return `${(value / 1e9).toFixed(2)}B`;\n    if (value >= 1e6) return `${(value / 1e6).toFixed(2)}M`;\n    if (Math.abs(value) < 100 && !Number.isInteger(value)) return value.toFixed(2);\n    return value.toLocaleString();\n  }\n  return value;\n};\n\nconst FundamentalItem: React.FC<{ label: string; value: React.ReactNode }> = ({ label, value }) => (\n  <div className=\"flex justify-between items-center py-1.5 border-b border-border last:border-b-0\">\n    <span className=\"text-sm text-muted-foreground\">{label}</span>\n    <span className=\"text-sm font-medium text-foreground\">{value}</span>\n  </div>\n);\n\nconst FundamentalsPanel: React.FC<FundamentalsPanelProps> = ({ \n  data,\n  className = '' \n}) => {\n  return (\n    <Card className={cn('bg-card text-card-foreground', className)}>\n      <CardHeader className=\"pb-2\">\n        <CardTitle className=\"text-lg font-semibold\">Key Fundamentals</CardTitle>\n      </CardHeader>\n      <CardContent className=\"pt-2\">\n        <div className=\"space-y-1\">\n          <FundamentalItem label=\"Market Cap\" value={formatValue(data.marketCap)} />\n          <FundamentalItem label=\"P/E Ratio\" value={formatValue(data.peRatio)} />\n          <FundamentalItem label=\"Dividend Yield\" value={data.dividendYield !== undefined ? `${formatValue(data.dividendYield)}%` : 'N/A'} />\n          <FundamentalItem label=\"Sector\" value={data.sector || 'N/A'} />\n          <FundamentalItem label=\"Industry\" value={data.industry || 'N/A'} />\n          <FundamentalItem label=\"Volume\" value={formatValue(data.volume)} />\n          <FundamentalItem label=\"Avg Volume\" value={formatValue(data.avgVolume)} />\n          <FundamentalItem label=\"52 Week High\" value={data.yearHigh !== undefined ? `$${formatValue(data.yearHigh)}` : 'N/A'} />\n          <FundamentalItem label=\"52 Week Low\" value={data.yearLow !== undefined ? `$${formatValue(data.yearLow)}` : 'N/A'} />\n          {/* Add more items here */}\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default FundamentalsPanel;\n"
    },
    {
        "fileName": "src/components/stock_detail_modal_view/AnalystRatingsList.tsx",
        "content": "import React from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'; // Assuming Shadcn UI structure\nimport { cn } from '@/lib/utils';\n\ninterface AnalystRating {\n  id: string | number;\n  analyst: string;\n  institution?: string;\n  rating: 'Buy' | 'Hold' | 'Sell' | 'Strong Buy' | 'Underperform' | string; // Allow custom ratings\n  rationale?: string;\n  date?: string; // Optional: date of rating\n  priceTarget?: number; // Optional\n}\n\ninterface AnalystRatingsListProps {\n  ratings: AnalystRating[];\n  className?: string;\n}\n\nconst getRatingColor = (rating: string): string => {\n  const lowerRating = rating.toLowerCase();\n  if (lowerRating.includes('buy')) return 'text-success';\n  if (lowerRating.includes('sell') || lowerRating.includes('underperform')) return 'text-destructive';\n  if (lowerRating.includes('hold')) return 'text-warning-foreground'; // Using warning-foreground for hold\n  return 'text-muted-foreground'; // Default for neutral/unknown\n};\n\nconst AnalystRatingsList: React.FC<AnalystRatingsListProps> = ({ \n  ratings = [],\n  className = ''\n}) => {\n  if (!ratings || ratings.length === 0) {\n    return (\n      <Card className={cn('bg-card text-card-foreground', className)}>\n        <CardHeader className=\"pb-2\">\n          <CardTitle className=\"text-lg font-semibold\">Analyst Ratings</CardTitle>\n        </CardHeader>\n        <CardContent>\n            <p className='text-muted-foreground text-sm'>No analyst ratings available.</p>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  return (\n    <Card className={cn('bg-card text-card-foreground', className)}>\n      <CardHeader className=\"pb-2\">\n          <CardTitle className=\"text-lg font-semibold\">Analyst Ratings</CardTitle>\n      </CardHeader>\n      <CardContent className=\"pt-2\">\n        <ul className=\"space-y-3\">\n          {ratings.map((rating) => (\n            <li key={rating.id} className=\"border-b border-border pb-3 last:border-b-0 last:pb-0\">\n              <div className=\"flex justify-between items-start mb-1\">\n                <div>\n                  <p className=\"text-sm font-medium text-foreground\">{rating.analyst}</p>\n                  {rating.institution && <p className=\"text-xs text-muted-foreground\">{rating.institution}</p>}\n                </div>\n                <div className=\"text-right\">\n                    <p className={cn('text-sm font-semibold', getRatingColor(rating.rating))}>{rating.rating}</p>\n                    {rating.priceTarget && <p className=\"text-xs text-muted-foreground\">Target: ${rating.priceTarget.toFixed(2)}</p>}\n                </div>\n              </div>\n              {rating.rationale && (\n                <p className=\"text-sm text-muted-foreground mt-1\">{rating.rationale}</p>\n              )}\n              {rating.date && (\n                  <p className=\"text-xs text-muted-foreground mt-1 text-right\">{rating.date}</p>\n              )}\n            </li>\n          ))}\n        </ul>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default AnalystRatingsList;\n"
    },
    {
        "fileName": "src/components/stock_detail_modal_view/WatchlistActionButton.tsx",
        "content": "import React from 'react';\nimport { Button } from '@/components/ui/button'; // Assuming Shadcn UI structure\nimport { Plus, Check, Minus, Loader2 } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\ninterface WatchlistActionButtonProps {\n  stockTicker: string;\n  isInWatchlist: boolean;\n  isSignedIn: boolean; // To disable/hide if not logged in\n  isLoading?: boolean; // To show loading state during API call\n  onToggleWatchlist: (ticker: string, shouldAdd: boolean) => void; // Function to call on click\n  className?: string;\n}\n\nconst WatchlistActionButton: React.FC<WatchlistActionButtonProps> = ({ \n  stockTicker,\n  isInWatchlist,\n  isSignedIn,\n  isLoading = false,\n  onToggleWatchlist,\n  className = ''\n}) => {\n\n  const handleClick = () => {\n    if (!isLoading && isSignedIn) {\n      onToggleWatchlist(stockTicker, !isInWatchlist);\n    }\n  };\n\n  const buttonText = isInWatchlist ? 'Remove from Watchlist' : 'Add to Watchlist';\n  const Icon = isInWatchlist ? Minus : Plus;\n\n  if (!isSignedIn) {\n    // Optionally render a disabled button or hide it completely\n    return (\n      <Button \n        variant=\"outline\" \n        className={cn('w-full md:w-auto', className)} \n        disabled\n        title=\"Sign in to manage watchlist\"\n      >\n         <Plus className=\"mr-2 h-4 w-4\" /> Add to Watchlist\n      </Button>\n    );\n  }\n\n  return (\n    <Button \n      variant={isInWatchlist ? \"secondary\" : \"default\"} \n      className={cn('w-full md:w-auto', className)} \n      onClick={handleClick}\n      disabled={isLoading}\n    >\n      {isLoading ? (\n        <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n      ) : (\n        <Icon className=\"mr-2 h-4 w-4\" />\n      )}\n      {isLoading ? 'Processing...' : buttonText}\n    </Button>\n  );\n};\n\nexport default WatchlistActionButton;\n"
    },
    {
        "fileName": "src/components/stock_detail_modal_view/ModalCloseButton.tsx",
        "content": "import React from 'react';\nimport { Button } from '@/components/ui/button'; // Assuming Shadcn UI structure\nimport { DialogClose } from '@/components/ui/dialog'; // Assuming Shadcn UI structure\nimport { X } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\ninterface ModalCloseButtonProps {\n  className?: string;\n  ariaLabel?: string;\n}\n\nconst ModalCloseButton: React.FC<ModalCloseButtonProps> = ({ \n  className = '',\n  ariaLabel = 'Close dialog'\n}) => {\n  return (\n    <DialogClose asChild>\n      <Button\n        variant=\"ghost\"\n        size=\"icon\"\n        className={cn(\n          'absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground',\n          className\n        )}\n        aria-label={ariaLabel}\n      >\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">{ariaLabel}</span>\n      </Button>\n    </DialogClose>\n  );\n};\n\nexport default ModalCloseButton;\n"
    },
    {
        "fileName": "src/components/user_profile_settings_page/UserProfileCard.tsx",
        "content": "import React from 'react';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Button } from '@/components/ui/button';\nimport { Edit } from 'lucide-react';\n\ninterface UserProfileCardProps {\n  userName: string;\n  email: string;\n  avatarUrl?: string;\n  avatarFallback: string; // e.g., initials\n  onUpdateAvatarClick?: () => void;\n}\n\nconst UserProfileCard: React.FC<UserProfileCardProps> = ({\n  userName,\n  email,\n  avatarUrl,\n  avatarFallback,\n  onUpdateAvatarClick,\n}) => {\n  return (\n    <Card className=\"w-full border-border bg-card text-card-foreground\">\n      <CardHeader className=\"pb-4\">\n        <CardTitle className=\"text-xl font-semibold\">Profile Information</CardTitle>\n        <CardDescription className=\"text-muted-foreground\">\n          Your personal details and avatar.\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"flex flex-col sm:flex-row items-center space-y-4 sm:space-y-0 sm:space-x-6\">\n        <div className=\"relative group\">\n          <Avatar className=\"h-20 w-20\">\n            <AvatarImage src={avatarUrl} alt={`${userName}'s avatar`} />\n            <AvatarFallback>{avatarFallback}</AvatarFallback>\n          </Avatar>\n          {onUpdateAvatarClick && (\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              className=\"absolute bottom-0 right-0 rounded-full h-8 w-8 bg-background border-border hover:bg-muted group-hover:opacity-100 opacity-0 transition-opacity duration-200\"\n              onClick={onUpdateAvatarClick}\n              aria-label=\"Update profile photo\"\n            >\n              <Edit className=\"h-4 w-4\" />\n            </Button>\n          )}\n        </div>\n        <div className=\"text-center sm:text-left\">\n          <h2 className=\"text-lg font-medium text-foreground\">{userName}</h2>\n          <p className=\"text-sm text-muted-foreground\">{email}</p>\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default UserProfileCard;\n"
    },
    {
        "fileName": "src/components/user_profile_settings_page/PersonalInfoForm.tsx",
        "content": "import React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport * as z from 'zod';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription, CardFooter } from '@/components/ui/card';\nimport { toast } from 'sonner'; // Assuming sonner is used for notifications\n\n// Example Zod schema - adjust validation rules as needed\nconst formSchema = z.object({\n  displayName: z.string().min(2, { message: 'Display name must be at least 2 characters.' }).max(50),\n  email: z.string().email({ message: 'Please enter a valid email address.' }),\n  currentPassword: z.string().optional(), // Optional for password change\n  newPassword: z.string().min(8, { message: 'New password must be at least 8 characters.' }).optional().or(z.literal('')), // Optional, but requires min 8 if provided\n  confirmNewPassword: z.string().optional(),\n}).refine(data => {\n  // Require current password if new password is set\n  if (data.newPassword && !data.currentPassword) {\n    return false;\n  }\n  // Require new passwords to match\n  if (data.newPassword !== data.confirmNewPassword) {\n    return false;\n  }\n  return true;\n}, {\n  message: \"Passwords must match, and current password is required to set a new one.\",\n  path: ['confirmNewPassword'], // Attach error to confirmation field\n});\n\ntype PersonalInfoFormData = z.infer<typeof formSchema>;\n\ninterface PersonalInfoFormProps {\n  initialData: {\n    displayName: string;\n    email: string;\n  };\n  onSubmit: (data: PersonalInfoFormData) => Promise<void>; // Simulate async submission\n}\n\nconst PersonalInfoForm: React.FC<PersonalInfoFormProps> = ({ initialData, onSubmit }) => {\n  const form = useForm<PersonalInfoFormData>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      ...initialData,\n      currentPassword: '',\n      newPassword: '',\n      confirmNewPassword: '',\n    },\n  });\n\n  const handleFormSubmit = async (data: PersonalInfoFormData) => {\n    try {\n      await onSubmit(data);\n      toast.success('Profile updated successfully!');\n      // Optionally reset password fields after successful submission\n      form.reset({\n        ...data,\n        currentPassword: '',\n        newPassword: '',\n        confirmNewPassword: '',\n      });\n    } catch (error) {\n      toast.error('Failed to update profile. Please try again.');\n      console.error('Profile update error:', error);\n    }\n  };\n\n  return (\n    <Card className=\"w-full border-border bg-card text-card-foreground\">\n      <CardHeader>\n        <CardTitle>Personal Information</CardTitle>\n        <CardDescription className=\"text-muted-foreground\">\n          Update your display name, email, and password.\n        </CardDescription>\n      </CardHeader>\n      <Form {...form}>\n        <form onSubmit={form.handleSubmit(handleFormSubmit)} className=\"space-y-8\">\n          <CardContent className=\"space-y-6\">\n            <FormField\n              control={form.control}\n              name=\"displayName\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Display Name</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"Your display name\" {...field} className=\"bg-input border-input\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"email\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Email Address</FormLabel>\n                  <FormControl>\n                    <Input type=\"email\" placeholder=\"your.email@example.com\" {...field} className=\"bg-input border-input\" />\n                  </FormControl>\n                  <FormDescription className=\"text-xs text-muted-foreground\">\n                    Used for login and notifications.\n                  </FormDescription>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {/* Password Change Section */}\n            <div className=\"space-y-4 pt-4 border-t border-border\">\n              <h3 className=\"text-md font-medium text-foreground\">Change Password</h3>\n               <FormField\n                control={form.control}\n                name=\"currentPassword\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Current Password</FormLabel>\n                    <FormControl>\n                      <Input type=\"password\" placeholder=\"Enter current password\" {...field} className=\"bg-input border-input\" />\n                    </FormControl>\n                     <FormDescription className=\"text-xs text-muted-foreground\">\n                        Required only if changing password.\n                     </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n               <FormField\n                control={form.control}\n                name=\"newPassword\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>New Password</FormLabel>\n                    <FormControl>\n                      <Input type=\"password\" placeholder=\"Enter new password (min. 8 characters)\" {...field} className=\"bg-input border-input\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"confirmNewPassword\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Confirm New Password</FormLabel>\n                    <FormControl>\n                      <Input type=\"password\" placeholder=\"Confirm your new password\" {...field} className=\"bg-input border-input\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n          </CardContent>\n          <CardFooter className=\"flex justify-end space-x-2 border-t border-border pt-6\">\n            <Button type=\"button\" variant=\"outline\" onClick={() => form.reset()} disabled={form.formState.isSubmitting}>\n              Cancel\n            </Button>\n            <Button type=\"submit\" disabled={form.formState.isSubmitting || !form.formState.isDirty} className=\"bg-primary text-primary-foreground hover:bg-primary/90\">\n              {form.formState.isSubmitting ? 'Saving...' : 'Save Changes'}\n            </Button>\n          </CardFooter>\n        </form>\n      </Form>\n    </Card>\n  );\n};\n\nexport default PersonalInfoForm;\n"
    },
    {
        "fileName": "src/components/user_profile_settings_page/PreferencesPanel.tsx",
        "content": "import React, { useState, useEffect } from 'react';\nimport { useTheme } from 'next-themes';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\nimport { Label } from '@/components/ui/label';\nimport { Switch } from '@/components/ui/switch';\nimport { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';\nimport { Slider } from '@/components/ui/slider';\nimport { Sun, Moon, Laptop } from 'lucide-react';\n\ninterface PreferencesPanelProps {\n  initialPreferences: {\n    notifications: {\n      email: boolean;\n      sms: boolean;\n      push: boolean;\n    };\n    fontSizeScale: number; // e.g., 1 for 100%, 1.1 for 110%\n  };\n  onPreferencesChange: (preferences: PreferencesPanelProps['initialPreferences']) => void;\n}\n\nconst PreferencesPanel: React.FC<PreferencesPanelProps> = ({ initialPreferences, onPreferencesChange }) => {\n  const { theme, setTheme } = useTheme();\n  const [notifications, setNotifications] = useState(initialPreferences.notifications);\n  const [fontSizeScale, setFontSizeScale] = useState(initialPreferences.fontSizeScale);\n\n  // Update parent when local state changes\n  useEffect(() => {\n    onPreferencesChange({ notifications, fontSizeScale });\n    // Apply font size scaling dynamically\n    document.documentElement.style.setProperty('--text-scale', String(fontSizeScale));\n    // Optional: Persist font size scale preference (e.g., in localStorage)\n  }, [notifications, fontSizeScale, onPreferencesChange]);\n\n  const handleNotificationChange = (type: keyof typeof notifications, checked: boolean) => {\n    setNotifications(prev => ({ ...prev, [type]: checked }));\n  };\n\n  const handleFontSizeChange = (value: number[]) => {\n    setFontSizeScale(value[0]);\n  };\n\n  return (\n    <Card className=\"w-full border-border bg-card text-card-foreground\">\n      <CardHeader>\n        <CardTitle>Preferences</CardTitle>\n        <CardDescription className=\"text-muted-foreground\">\n          Manage your notification, theme, and accessibility settings.\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-8\">\n        {/* Notification Preferences */}\n        <div className=\"space-y-4\">\n          <h3 className=\"text-md font-medium text-foreground\">Notifications</h3>\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center justify-between p-3 rounded-md border border-input bg-background\">\n              <Label htmlFor=\"email-notifications\" className=\"flex flex-col space-y-1\">\n                <span>Email Notifications</span>\n                <span className=\"font-normal text-xs text-muted-foreground\">\n                  Receive updates and alerts via email.\n                </span>\n              </Label>\n              <Switch\n                id=\"email-notifications\"\n                checked={notifications.email}\n                onCheckedChange={(checked) => handleNotificationChange('email', checked)}\n                aria-label=\"Toggle email notifications\"\n              />\n            </div>\n             <div className=\"flex items-center justify-between p-3 rounded-md border border-input bg-background\">\n              <Label htmlFor=\"sms-notifications\" className=\"flex flex-col space-y-1\">\n                <span>SMS Notifications</span>\n                 <span className=\"font-normal text-xs text-muted-foreground\">\n                  Receive critical alerts via SMS (if available).\n                </span>\n              </Label>\n              <Switch\n                id=\"sms-notifications\"\n                checked={notifications.sms}\n                onCheckedChange={(checked) => handleNotificationChange('sms', checked)}\n                aria-label=\"Toggle SMS notifications\"\n              />\n            </div>\n             <div className=\"flex items-center justify-between p-3 rounded-md border border-input bg-background\">\n              <Label htmlFor=\"push-notifications\" className=\"flex flex-col space-y-1\">\n                <span>Push Notifications</span>\n                 <span className=\"font-normal text-xs text-muted-foreground\">\n                  Get real-time updates on your device.\n                </span>\n              </Label>\n              <Switch\n                id=\"push-notifications\"\n                checked={notifications.push}\n                onCheckedChange={(checked) => handleNotificationChange('push', checked)}\n                aria-label=\"Toggle push notifications\"\n              />\n            </div>\n          </div>\n        </div>\n\n        {/* Theme Selection */}\n        <div className=\"space-y-4\">\n          <h3 className=\"text-md font-medium text-foreground\">Theme</h3>\n          <RadioGroup\n            value={theme}\n            onValueChange={setTheme}\n            className=\"grid grid-cols-3 gap-4\"\n          >\n            <Label htmlFor=\"light-theme\" className=\"flex flex-col items-center justify-between rounded-md border-2 border-muted bg-popover p-4 hover:bg-accent hover:text-accent-foreground [&:has([data-state=checked])]:border-primary cursor-pointer\">\n              <RadioGroupItem value=\"light\" id=\"light-theme\" className=\"sr-only\" />\n              <Sun className=\"mb-3 h-6 w-6\" />\n              Light\n            </Label>\n             <Label htmlFor=\"dark-theme\" className=\"flex flex-col items-center justify-between rounded-md border-2 border-muted bg-popover p-4 hover:bg-accent hover:text-accent-foreground [&:has([data-state=checked])]:border-primary cursor-pointer\">\n              <RadioGroupItem value=\"dark\" id=\"dark-theme\" className=\"sr-only\" />\n              <Moon className=\"mb-3 h-6 w-6\" />\n              Dark\n            </Label>\n             <Label htmlFor=\"system-theme\" className=\"flex flex-col items-center justify-between rounded-md border-2 border-muted bg-popover p-4 hover:bg-accent hover:text-accent-foreground [&:has([data-state=checked])]:border-primary cursor-pointer\">\n              <RadioGroupItem value=\"system\" id=\"system-theme\" className=\"sr-only\" />\n              <Laptop className=\"mb-3 h-6 w-6\" />\n              System\n            </Label>\n          </RadioGroup>\n        </div>\n\n        {/* Font Size Scaling */}\n        <div className=\"space-y-4\">\n          <h3 className=\"text-md font-medium text-foreground\">Font Size</h3>\n          <div className=\"flex items-center space-x-4\">\n            <Label htmlFor=\"font-size-slider\" className=\"text-muted-foreground\">Scale</Label>\n            <Slider\n              id=\"font-size-slider\"\n              min={0.8} // 80%\n              max={1.3} // 130%\n              step={0.1}\n              value={[fontSizeScale]}\n              onValueChange={handleFontSizeChange}\n              className=\"w-[60%]\"\n              aria-label=\"Adjust font size scale\"\n            />\n            <span className=\"text-sm text-foreground w-12 text-right\">{Math.round(fontSizeScale * 100)}%</span>\n          </div>\n            <p className=\"text-xs text-muted-foreground\">\n                Adjust the text size across the application for better readability.\n            </p>\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default PreferencesPanel;\n"
    },
    {
        "fileName": "src/components/user_profile_settings_page/SavedItemsList.tsx",
        "content": "import React from 'react';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Separator } from '@/components/ui/separator';\nimport { List, Trash2, Edit } from 'lucide-react'; // Or other relevant icons\nimport { Link } from 'react-router-dom'; // Assuming react-router is used for navigation\n\ninterface SavedItem {\n  id: string;\n  name: string;\n  description?: string;\n  manageLink: string; // Route to manage this specific item\n}\n\ninterface SavedItemsListProps {\n  title: string; // e.g., \"Saved Watchlists\", \"Alert Settings\"\n  items: SavedItem[];\n  onDeleteItem?: (id: string) => void;\n  onRenameItem?: (id: string, newName: string) => void; // Optional rename functionality\n  emptyStateMessage?: string;\n}\n\nconst SavedItemsList: React.FC<SavedItemsListProps> = ({\n  title,\n  items,\n  onDeleteItem,\n  onRenameItem, // Include rename handler if needed\n  emptyStateMessage = 'No items saved yet.',\n}) => {\n  return (\n    <Card className=\"w-full border-border bg-card text-card-foreground\">\n      <CardHeader>\n        <CardTitle>{title}</CardTitle>\n        <CardDescription className=\"text-muted-foreground\">\n          View and manage your saved {title.toLowerCase()}.\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        {items.length === 0 ? (\n          <p className=\"text-muted-foreground italic\">{emptyStateMessage}</p>\n        ) : (\n          <ul className=\"space-y-3\">\n            {items.map((item, index) => (\n              <React.Fragment key={item.id}>\n                <li className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center space-y-2 sm:space-y-0\">\n                  <div className=\"flex-grow\">\n                    <Link to={item.manageLink} className=\"hover:underline\">\n                      <h4 className=\"font-medium text-foreground\">{item.name}</h4>\n                    </Link>\n                    {item.description && (\n                      <p className=\"text-sm text-muted-foreground\">{item.description}</p>\n                    )}\n                  </div>\n                  <div className=\"flex space-x-2 flex-shrink-0\">\n                    {onRenameItem && (\n                       <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => {\n                            const newName = prompt(`Enter new name for ${item.name}:`, item.name);\n                            if (newName !== null && newName.trim() !== '' && newName !== item.name) {\n                                onRenameItem(item.id, newName.trim());\n                            }\n                         }}\n                        aria-label={`Rename ${item.name}`}\n                      >\n                        <Edit className=\"h-4 w-4 mr-1\" />\n                        Rename\n                      </Button>\n                    )}\n                     <Link to={item.manageLink}>\n                       <Button variant=\"secondary\" size=\"sm\" aria-label={`Manage ${item.name}`}>\n                        <List className=\"h-4 w-4 mr-1\" />\n                        Manage\n                       </Button>\n                     </Link>\n                    {onDeleteItem && (\n                      <Button\n                        variant=\"destructive\"\n                        size=\"sm\"\n                        onClick={() => onDeleteItem(item.id)}\n                        aria-label={`Delete ${item.name}`}\n                      >\n                        <Trash2 className=\"h-4 w-4 mr-1\" />\n                        Delete\n                      </Button>\n                    )}\n                  </div>\n                </li>\n                {index < items.length - 1 && <Separator className=\"my-3 bg-border\" />}\n              </React.Fragment>\n            ))}\n          </ul>\n        )}\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default SavedItemsList;\n"
    },
    {
        "fileName": "src/components/user_profile_settings_page/LogoutButton.tsx",
        "content": "import React from 'react';\nimport { Button } from '@/components/ui/button';\nimport { LogOut } from 'lucide-react';\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\"\n\ninterface LogoutButtonProps {\n  onLogout: () => void; // Function to call when logout is confirmed\n  useConfirmation?: boolean; // Whether to show a confirmation dialog\n}\n\nconst LogoutButton: React.FC<LogoutButtonProps> = ({ onLogout, useConfirmation = true }) => {\n\n  const handleLogout = () => {\n    console.log('Logging out...');\n    // Add actual logout logic here (e.g., clear tokens, redirect)\n    onLogout();\n  };\n\n  if (!useConfirmation) {\n    return (\n      <Button\n        variant=\"destructive\"\n        onClick={handleLogout}\n        className=\"w-full sm:w-auto bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n      >\n        <LogOut className=\"mr-2 h-4 w-4\" /> Log Out\n      </Button>\n    );\n  }\n\n  return (\n    <AlertDialog>\n      <AlertDialogTrigger asChild>\n        <Button\n          variant=\"destructive\"\n           className=\"w-full sm:w-auto bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n        >\n          <LogOut className=\"mr-2 h-4 w-4\" /> Log Out\n        </Button>\n      </AlertDialogTrigger>\n      <AlertDialogContent className=\"bg-card border-border\">\n        <AlertDialogHeader>\n          <AlertDialogTitle className=\"text-foreground\">Confirm Logout</AlertDialogTitle>\n          <AlertDialogDescription className=\"text-muted-foreground\">\n            Are you sure you want to log out of your account?\n          </AlertDialogDescription>\n        </AlertDialogHeader>\n        <AlertDialogFooter>\n          <AlertDialogCancel className=\"border-input hover:bg-muted\">Cancel</AlertDialogCancel>\n          <AlertDialogAction\n            onClick={handleLogout}\n            className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n           >\n            Log Out\n            </AlertDialogAction>\n        </AlertDialogFooter>\n      </AlertDialogContent>\n    </AlertDialog>\n  );\n};\n\nexport default LogoutButton;\n"
    },
    {
        "fileName": "src/components/user_profile_settings_page/AccountManagementActions.tsx",
        "content": "import React from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Trash2, Download, AlertTriangle } from 'lucide-react';\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\"\nimport { Separator } from '@/components/ui/separator';\n\ninterface AccountManagementActionsProps {\n  onDeleteAccount: () => void; // Function to call when account deletion is confirmed\n  onExportData: () => void; // Function to call when data export is requested\n}\n\nconst AccountManagementActions: React.FC<AccountManagementActionsProps> = ({ onDeleteAccount, onExportData }) => {\n\n  const handleDelete = () => {\n      console.log('Deleting account...');\n      // Add actual account deletion logic here\n      onDeleteAccount();\n  };\n\n  const handleExport = () => {\n      console.log('Exporting data...');\n      // Add actual data export logic here\n      onExportData();\n  };\n\n  return (\n    <div className=\"p-6 border border-destructive/50 rounded-lg bg-destructive/10 space-y-4\">\n      <h3 className=\"text-lg font-semibold text-destructive flex items-center\">\n         <AlertTriangle className=\"mr-2 h-5 w-5\"/> Danger Zone\n      </h3>\n       <p className=\"text-sm text-destructive/90\">\n          These actions are permanent and cannot be undone. Please proceed with caution.\n       </p>\n        <Separator className=\"bg-destructive/30\" />\n      <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between space-y-3 sm:space-y-0 sm:space-x-4\">\n         <div>\n            <p className=\"font-medium text-foreground\">Export My Data</p>\n            <p className=\"text-sm text-muted-foreground\">\n                Download a copy of your account data.\n            </p>\n        </div>\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={handleExport}\n           className=\"border-input hover:bg-muted w-full sm:w-auto\"\n        >\n          <Download className=\"mr-2 h-4 w-4\" /> Export Data\n        </Button>\n      </div>\n\n      <Separator className=\"bg-destructive/30\" />\n\n      <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between space-y-3 sm:space-y-0 sm:space-x-4\">\n         <div>\n            <p className=\"font-medium text-destructive\">Delete Account</p>\n            <p className=\"text-sm text-destructive/90\">\n                Permanently remove your account and all associated data.\n            </p>\n         </div>\n        <AlertDialog>\n          <AlertDialogTrigger asChild>\n            <Button\n              variant=\"destructive\"\n              size=\"sm\"\n              className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90 w-full sm:w-auto\"\n            >\n              <Trash2 className=\"mr-2 h-4 w-4\" /> Delete Account\n            </Button>\n          </AlertDialogTrigger>\n          <AlertDialogContent className=\"bg-card border-border\">\n            <AlertDialogHeader>\n              <AlertDialogTitle className=\"text-destructive flex items-center\">\n                 <AlertTriangle className=\"mr-2 h-5 w-5\"/> Confirm Account Deletion\n                </AlertDialogTitle>\n              <AlertDialogDescription className=\"text-muted-foreground\">\n                Are you absolutely sure you want to delete your account?\n                This action cannot be undone and will permanently erase all your data.\n              </AlertDialogDescription>\n            </AlertDialogHeader>\n            <AlertDialogFooter>\n              <AlertDialogCancel className=\"border-input hover:bg-muted\">Cancel</AlertDialogCancel>\n              <AlertDialogAction\n                onClick={handleDelete}\n                className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n               >\n                Yes, Delete My Account\n                </AlertDialogAction>\n            </AlertDialogFooter>\n          </AlertDialogContent>\n        </AlertDialog>\n      </div>\n    </div>\n  );\n};\n\nexport default AccountManagementActions;\n"
    },
    {
        "fileName": "src/components/user_profile_settings_page/InfoTextBlock.tsx",
        "content": "import React from 'react';\nimport { cn } from '@/lib/utils'; // Assuming standard Shadcn setup with clsx/tailwind-merge\n\ninterface InfoTextBlockProps {\n  id?: string; // Optional ID for linking or targeting\n  title?: string;\n  content: string | React.ReactNode;\n  className?: string;\n  titleClassName?: string;\n  contentClassName?: string;\n  variant?: 'default' | 'muted' | 'subtle'; // Example variants\n}\n\nconst InfoTextBlock: React.FC<InfoTextBlockProps> = ({\n  id,\n  title,\n  content,\n  className,\n  titleClassName,\n  contentClassName,\n  variant = 'default',\n}) => {\n  const containerClasses = cn(\n    'w-full',\n    {\n      'p-4 border border-border rounded-md bg-background': variant === 'default',\n      'p-4 border border-border rounded-md bg-muted': variant === 'muted',\n      'text-sm text-muted-foreground': variant === 'subtle', // Less prominent style\n    },\n    className\n  );\n\n  const titleClasses = cn(\n    'text-md font-medium mb-2 text-foreground',\n    {\n      'text-muted-foreground': variant === 'muted',\n    },\n    titleClassName\n  );\n\n  const contentClasses = cn(\n    'text-sm',\n    {\n        'text-foreground': variant === 'default',\n        'text-muted-foreground': variant === 'muted' || variant === 'subtle',\n    },\n    'leading-relaxed',\n    contentClassName\n  );\n\n  return (\n    <div id={id} className={containerClasses}>\n      {title && <h4 className={titleClasses}>{title}</h4>}\n      {typeof content === 'string' ? (\n        <p className={contentClasses}>{content}</p>\n      ) : (\n        <div className={contentClasses}>{content}</div>\n      )}\n    </div>\n  );\n};\n\nexport default InfoTextBlock;\n"
    },
    {
        "fileName": "src/components/market_overview_page/MarketFilterGroup.tsx",
        "content": "import React, { useState } from 'react';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Label } from '@/components/ui/label';\nimport { Button } from '@/components/ui/button';\nimport { Filter } from 'lucide-react';\n\n// Define placeholder data types and values\ninterface FilterOptions {\n  exchanges: string[];\n  regions: string[];\n  sectors: string[];\n}\n\ninterface MarketFilterGroupProps {\n  options: FilterOptions;\n  onFilterChange: (filters: { exchange?: string; region?: string; sector?: string }) => void;\n}\n\nconst MarketFilterGroup: React.FC<MarketFilterGroupProps> = ({ options, onFilterChange }) => {\n  const [selectedExchange, setSelectedExchange] = useState<string | undefined>();\n  const [selectedRegion, setSelectedRegion] = useState<string | undefined>();\n  const [selectedSector, setSelectedSector] = useState<string | undefined>();\n\n  const handleApplyFilters = () => {\n    onFilterChange({\n      exchange: selectedExchange,\n      region: selectedRegion,\n      sector: selectedSector,\n    });\n  };\n\n  const handleResetFilters = () => {\n    setSelectedExchange(undefined);\n    setSelectedRegion(undefined);\n    setSelectedSector(undefined);\n    onFilterChange({});\n  };\n\n  return (\n    <div className=\"p-4 bg-card border border-border rounded-lg shadow-sm flex flex-wrap gap-4 items-end\">\n      <div className=\"flex-1 min-w-[150px]\">\n        <Label htmlFor=\"exchange-select\" className=\"text-sm font-medium text-muted-foreground\">Exchange</Label>\n        <Select value={selectedExchange} onValueChange={setSelectedExchange}>\n          <SelectTrigger id=\"exchange-select\" className=\"w-full mt-1\">\n            <SelectValue placeholder=\"Select Exchange\" />\n          </SelectTrigger>\n          <SelectContent>\n            {options.exchanges.map((exchange) => (\n              <SelectItem key={exchange} value={exchange}>{exchange}</SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n      </div>\n\n      <div className=\"flex-1 min-w-[150px]\">\n        <Label htmlFor=\"region-select\" className=\"text-sm font-medium text-muted-foreground\">Region</Label>\n        <Select value={selectedRegion} onValueChange={setSelectedRegion}>\n          <SelectTrigger id=\"region-select\" className=\"w-full mt-1\">\n            <SelectValue placeholder=\"Select Region\" />\n          </SelectTrigger>\n          <SelectContent>\n            {options.regions.map((region) => (\n              <SelectItem key={region} value={region}>{region}</SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n      </div>\n\n      <div className=\"flex-1 min-w-[150px]\">\n        <Label htmlFor=\"sector-select\" className=\"text-sm font-medium text-muted-foreground\">Sector</Label>\n        <Select value={selectedSector} onValueChange={setSelectedSector}>\n          <SelectTrigger id=\"sector-select\" className=\"w-full mt-1\">\n            <SelectValue placeholder=\"Select Sector\" />\n          </SelectTrigger>\n          <SelectContent>\n            {options.sectors.map((sector) => (\n              <SelectItem key={sector} value={sector}>{sector}</SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n      </div>\n\n      <div className=\"flex gap-2\">\n        <Button onClick={handleApplyFilters} className=\"bg-primary text-primary-foreground hover:bg-primary/90\">\n          <Filter className=\"mr-2 h-4 w-4\" /> Apply\n        </Button>\n        <Button variant=\"outline\" onClick={handleResetFilters}>\n          Reset\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default MarketFilterGroup;\n"
    },
    {
        "fileName": "src/components/market_overview_page/MarketIndexChart.tsx",
        "content": "import React, { useState } from 'react';\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from 'recharts';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { ToggleGroup, ToggleGroupItem } from '@/components/ui/toggle-group';\n\n// Placeholder data structure\ninterface IndexDataPoint {\n  time: string; // e.g., '10:00', 'Mon', 'Jan'\n  [indexName: string]: number | string; // Dynamically add index values like 'S&P 500': 5000\n}\n\ninterface MarketIndexChartProps {\n  data: IndexDataPoint[];\n  availableIndices: string[]; // e.g., ['S&P 500', 'NASDAQ', 'Dow Jones']\n}\n\nconst timeFrames = ['1D', '1W', '1M', '6M', '1Y'];\nconst colors = ['hsl(var(--primary))', 'hsl(var(--accent))', 'hsl(var(--secondary))', '#82ca9d', '#ffc658'];\n\nconst MarketIndexChart: React.FC<MarketIndexChartProps> = ({ data: initialData, availableIndices }) => {\n  const [selectedIndices, setSelectedIndices] = useState<string[]>(availableIndices.slice(0, 2)); // Default to first two indices\n  const [timeFrame, setTimeFrame] = useState<string>('1M');\n\n  // In a real app, data would be fetched/filtered based on timeFrame\n  const chartData = initialData; // Using placeholder data directly\n\n  const handleIndexChange = (value: string) => {\n    // In a real multi-select, this would toggle values\n    // For simplicity with single Select, we replace the selection\n    // This could be replaced by a multi-select component if available/needed\n    if (value) {\n        setSelectedIndices([value]);\n    }\n  };\n\n  return (\n    <Card>\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n        <CardTitle className=\"text-lg font-semibold\">Market Indices</CardTitle>\n        <div className=\"flex items-center space-x-2\">\n            <Select value={selectedIndices[0]} onValueChange={handleIndexChange}> {/* Simplified: Only showing first selected index */} \n                <SelectTrigger className=\"w-[180px]\">\n                    <SelectValue placeholder=\"Select Index\" />\n                </SelectTrigger>\n                <SelectContent>\n                    {availableIndices.map(index => (\n                        <SelectItem key={index} value={index}>{index}</SelectItem>\n                    ))}\n                </SelectContent>\n            </Select>\n             <ToggleGroup type=\"single\" defaultValue=\"1M\" value={timeFrame} onValueChange={(value) => value && setTimeFrame(value)} size=\"sm\">\n                {timeFrames.map(tf => (\n                    <ToggleGroupItem key={tf} value={tf} aria-label={`Toggle ${tf}`}>{tf}</ToggleGroupItem>\n                ))}\n            </ToggleGroup>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <ResponsiveContainer width=\"100%\" height={350}>\n          <LineChart data={chartData}>\n            <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(var(--border))\" />\n            <XAxis dataKey=\"time\" stroke=\"hsl(var(--muted-foreground))\" fontSize={12} tickLine={false} axisLine={false} />\n            <YAxis stroke=\"hsl(var(--muted-foreground))\" fontSize={12} tickLine={false} axisLine={false} tickFormatter={(value) => `$${value}`} />\n            <Tooltip\n              contentStyle={{ backgroundColor: 'hsl(var(--background))', border: '1px solid hsl(var(--border))', borderRadius: 'var(--radius)' }}\n              labelStyle={{ color: 'hsl(var(--foreground))' }}\n            />\n            <Legend />\n            {selectedIndices.map((indexName, i) => (\n              <Line\n                key={indexName}\n                type=\"monotone\"\n                dataKey={indexName}\n                stroke={colors[i % colors.length]}\n                strokeWidth={2}\n                dot={false}\n                activeDot={{ r: 6 }}\n              />\n            ))}\n          </LineChart>\n        </ResponsiveContainer>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default MarketIndexChart;\n"
    },
    {
        "fileName": "src/components/market_overview_page/SectorHeatMap.tsx",
        "content": "import React from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\n\n// Placeholder data structure\ninterface SectorPerformance {\n  name: string;\n  change: number; // e.g., percentage change\n  volume?: number;\n}\n\ninterface SectorHeatMapProps {\n  sectors: SectorPerformance[];\n}\n\n// Helper function to get color based on performance\nconst getColorForChange = (change: number): string => {\n  if (change > 1.5) return 'bg-success/80 hover:bg-success'; // Strong green for > 1.5%\n  if (change > 0.5) return 'bg-success/50 hover:bg-success/70'; // Medium green for 0.5% to 1.5%\n  if (change > 0) return 'bg-success/20 hover:bg-success/40'; // Light green for > 0%\n  if (change === 0) return 'bg-muted hover:bg-muted/80'; // Neutral for 0%\n  if (change < -1.5) return 'bg-destructive/80 hover:bg-destructive'; // Strong red for < -1.5%\n  if (change < -0.5) return 'bg-destructive/50 hover:bg-destructive/70'; // Medium red for -0.5% to -1.5%\n  return 'bg-destructive/20 hover:bg-destructive/40'; // Light red for < 0%\n};\n\nconst SectorHeatMap: React.FC<SectorHeatMapProps> = ({ sectors }) => {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"text-lg font-semibold\">Sector Performance Heatmap</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <TooltipProvider delayDuration={100}>\n          <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-2\">\n            {sectors.length === 0 ? (\n              <p className=\"text-muted-foreground col-span-full text-center py-4\">No sector data available.</p>\n            ) : (\n              sectors.map((sector) => (\n                <Tooltip key={sector.name}>\n                  <TooltipTrigger asChild>\n                    <div\n                      className={`p-3 rounded-md text-center transition-colors duration-200 cursor-pointer ${getColorForChange(sector.change)}`}\n                    >\n                      <div className=\"font-medium text-sm truncate text-card-foreground dark:text-primary-foreground\">{sector.name}</div>\n                      <div className=\"text-xs font-semibold mt-1 ${sector.change >= 0 ? 'text-success-foreground' : 'text-destructive-foreground'}\">\n                         {sector.change >= 0 ? '+' : ''}{sector.change.toFixed(2)}%\n                      </div>\n                    </div>\n                  </TooltipTrigger>\n                  <TooltipContent className=\"bg-popover text-popover-foreground border border-border rounded-md shadow-lg p-2 text-xs\">\n                    <p className=\"font-semibold\">{sector.name}</p>\n                    <p>Change: {sector.change.toFixed(2)}%</p>\n                    {sector.volume && <p>Volume: {sector.volume.toLocaleString()}</p>}\n                  </TooltipContent>\n                </Tooltip>\n              ))\n            )}\n          </div>\n        </TooltipProvider>\n      </CardContent>\n    </Card>\n  );\n};\n\n// Add some default props for demonstration\nSectorHeatMap.defaultProps = {\n  sectors: [\n    { name: 'Technology', change: 1.85 },\n    { name: 'Healthcare', change: -0.5 },\n    { name: 'Financials', change: 0.2 },\n    { name: 'Energy', change: 2.5 },\n    { name: 'Consumer Discretionary', change: -1.9 },\n    { name: 'Industrials', change: 0.75 },\n    { name: 'Utilities', change: -0.1 },\n    { name: 'Real Estate', change: 1.1 },\n  ],\n};\n\nexport default SectorHeatMap;\n"
    },
    {
        "fileName": "src/components/market_overview_page/MarketStatCards.tsx",
        "content": "import React from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { ArrowUp, ArrowDown, TrendingUp, TrendingDown, Minus } from 'lucide-react';\n\n// Placeholder data structure\ninterface MarketStats {\n  advancing: number;\n  declining: number;\n  unchanged: number;\n  sentiment?: 'Bullish' | 'Bearish' | 'Neutral';\n  marketHigh?: number;\n  marketLow?: number;\n}\n\ninterface MarketStatCardsProps {\n  stats: MarketStats;\n}\n\nconst MarketStatCards: React.FC<MarketStatCardsProps> = ({ stats }) => {\n  return (\n    <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4\">\n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n          <CardTitle className=\"text-sm font-medium text-muted-foreground\">Advancing</CardTitle>\n          <ArrowUp className=\"h-4 w-4 text-success\" />\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-2xl font-bold text-success\">{stats.advancing?.toLocaleString() ?? 'N/A'}</div>\n          <p className=\"text-xs text-muted-foreground\">Stocks gaining value</p>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n          <CardTitle className=\"text-sm font-medium text-muted-foreground\">Declining</CardTitle>\n          <ArrowDown className=\"h-4 w-4 text-destructive\" />\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-2xl font-bold text-destructive\">{stats.declining?.toLocaleString() ?? 'N/A'}</div>\n          <p className=\"text-xs text-muted-foreground\">Stocks losing value</p>\n        </CardContent>\n      </Card>\n\n       <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n          <CardTitle className=\"text-sm font-medium text-muted-foreground\">Unchanged</CardTitle>\n          <Minus className=\"h-4 w-4 text-muted-foreground\" />\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-2xl font-bold text-muted-foreground\">{stats.unchanged?.toLocaleString() ?? 'N/A'}</div>\n          <p className=\"text-xs text-muted-foreground\">Stocks with no price change</p>\n        </CardContent>\n      </Card>\n\n      {stats.sentiment && (\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-muted-foreground\">Sentiment</CardTitle>\n            {stats.sentiment === 'Bullish' && <TrendingUp className=\"h-4 w-4 text-success\" />}\n            {stats.sentiment === 'Bearish' && <TrendingDown className=\"h-4 w-4 text-destructive\" />}\n            {stats.sentiment === 'Neutral' && <Minus className=\"h-4 w-4 text-muted-foreground\" />}\n          </CardHeader>\n          <CardContent>\n            <div className={`text-2xl font-bold ${stats.sentiment === 'Bullish' ? 'text-success' : stats.sentiment === 'Bearish' ? 'text-destructive' : 'text-muted-foreground'}`}>\n                {stats.sentiment}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">Overall market mood</p>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Add more cards for marketHigh, marketLow etc. if needed */} \n\n    </div>\n  );\n};\n\n// Add default props for demonstration\nMarketStatCards.defaultProps = {\n    stats: {\n        advancing: 1850,\n        declining: 1230,\n        unchanged: 320,\n        sentiment: 'Bullish',\n        marketHigh: 5100.50,\n        marketLow: 5050.75\n    }\n}\n\nexport default MarketStatCards;\n"
    },
    {
        "fileName": "src/components/market_overview_page/SectorMoversTable.tsx",
        "content": "import React, { useState } from 'react';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { ArrowUpDown } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\n\n// Placeholder data structure\ninterface SectorMover {\n  id: string;\n  name: string;\n  change: number; // Percentage change\n  volume: number;\n}\n\ninterface SectorMoversTableProps {\n  movers: SectorMover[];\n  title?: string;\n  defaultSortField?: keyof SectorMover;\n  defaultSortDirection?: 'asc' | 'desc';\n}\n\nconst SectorMoversTable: React.FC<SectorMoversTableProps> = ({\n  movers,\n  title = 'Top Sector Movers',\n  defaultSortField = 'change',\n  defaultSortDirection = 'desc',\n}) => {\n  const [sortField, setSortField] = useState<keyof SectorMover>(defaultSortField);\n  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>(defaultSortDirection);\n\n  const handleSort = (field: keyof SectorMover) => {\n    const newDirection = sortField === field && sortDirection === 'desc' ? 'asc' : 'desc';\n    setSortField(field);\n    setSortDirection(newDirection);\n  };\n\n  const sortedMovers = [...movers].sort((a, b) => {\n    const fieldA = a[sortField];\n    const fieldB = b[sortField];\n\n    let comparison = 0;\n    if (fieldA > fieldB) {\n      comparison = 1;\n    } else if (fieldA < fieldB) {\n      comparison = -1;\n    }\n\n    return sortDirection === 'desc' ? comparison * -1 : comparison;\n  });\n\n  const SortableHeader: React.FC<{ field: keyof SectorMover; label: string }> = ({ field, label }) => (\n    <TableHead className=\"cursor-pointer\" onClick={() => handleSort(field)}>\n      <div className=\"flex items-center\">\n        {label}\n        {sortField === field && <ArrowUpDown className=\"ml-2 h-4 w-4\" />}\n      </div>\n    </TableHead>\n  );\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"text-lg font-semibold\">{title}</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <Table>\n          <TableHeader>\n            <TableRow>\n              <SortableHeader field=\"name\" label=\"Sector Name\" />\n              <SortableHeader field=\"change\" label=\"Change (%)\" />\n              <SortableHeader field=\"volume\" label=\"Volume\" />\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n            {sortedMovers.length > 0 ? (\n              sortedMovers.map((mover) => (\n                <TableRow key={mover.id} className=\"hover:bg-muted/50 cursor-pointer\">\n                  <TableCell className=\"font-medium text-foreground\">{mover.name}</TableCell>\n                  <TableCell className={mover.change >= 0 ? 'text-success' : 'text-destructive'}>\n                    {mover.change >= 0 ? '+' : ''}{mover.change.toFixed(2)}%\n                  </TableCell>\n                  <TableCell className=\"text-muted-foreground\">{mover.volume.toLocaleString()}</TableCell>\n                </TableRow>\n              ))\n            ) : (\n              <TableRow>\n                <TableCell colSpan={3} className=\"h-24 text-center text-muted-foreground\">\n                  No sector movers data available.\n                </TableCell>\n              </TableRow>\n            )}\n          </TableBody>\n        </Table>\n      </CardContent>\n    </Card>\n  );\n};\n\n// Add default props for demonstration\nSectorMoversTable.defaultProps = {\n    movers: [\n        { id: 'tech', name: 'Technology', change: 1.85, volume: 150000000 },\n        { id: 'energy', name: 'Energy', change: 2.5, volume: 95000000 },\n        { id: 'realestate', name: 'Real Estate', change: 1.1, volume: 60000000 },\n        { id: 'industrials', name: 'Industrials', change: 0.75, volume: 80000000 },\n        { id: 'financials', name: 'Financials', change: 0.2, volume: 120000000 },\n        { id: 'utils', name: 'Utilities', change: -0.1, volume: 45000000 },\n        { id: 'healthcare', name: 'Healthcare', change: -0.5, volume: 110000000 },\n        { id: 'consumer', name: 'Consumer Discretionary', change: -1.9, volume: 70000000 },\n    ]\n}\n\nexport default SectorMoversTable;\n"
    },
    {
        "fileName": "src/components/market_overview_page/MarketGainersLosersChart.tsx",
        "content": "import React from 'react';\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n  LabelList,\n} from 'recharts';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { cn } from '@/lib/utils'; // Assuming cn utility is setup\n\n// Placeholder data structure\ninterface MoverData {\n  name: string;\n  change: number; // Percentage change\n}\n\ninterface MarketGainersLosersChartProps {\n  gainers: MoverData[];\n  losers: MoverData[];\n  maxItems?: number;\n}\n\nconst RenderCustomizedLabel = (props: any) => {\n  const { x, y, width, value } = props;\n  const radius = 10;\n  const formattedValue = `${value > 0 ? '+' : ''}${value.toFixed(1)}%`;\n\n  return (\n    <g>\n      <text\n        x={value > 0 ? x + width + 5 : x - 5}\n        y={y + 15} // Adjust vertical position\n        fill=\"hsl(var(--foreground))\"\n        textAnchor={value > 0 ? 'start' : 'end'}\n        dominantBaseline=\"middle\"\n        className=\"text-xs font-medium\"\n      >\n        {formattedValue}\n      </text>\n    </g>\n  );\n};\n\nconst MarketGainersLosersChart: React.FC<MarketGainersLosersChartProps> = ({ gainers, losers, maxItems = 5 }) => {\n  const topGainers = gainers.slice(0, maxItems).sort((a, b) => a.change - b.change); // sort asc for bottom-up chart\n  const topLosers = losers.slice(0, maxItems).sort((a, b) => b.change - a.change); // sort desc for bottom-up chart\n\n  return (\n    <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg font-semibold text-success\">Top Gainers</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {topGainers.length > 0 ? (\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <BarChart data={topGainers} layout=\"vertical\" margin={{ left: 10, right: 50 }}>\n                <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(var(--border))\" horizontal={false} />\n                <XAxis type=\"number\" hide />\n                <YAxis dataKey=\"name\" type=\"category\" axisLine={false} tickLine={false} stroke=\"hsl(var(--muted-foreground))\" fontSize={12} width={100} />\n                <Tooltip\n                  cursor={{ fill: 'hsl(var(--muted)/0.3)' }}\n                  contentStyle={{ backgroundColor: 'hsl(var(--background))', border: '1px solid hsl(var(--border))', borderRadius: 'var(--radius)' }}\n                  formatter={(value: number) => [`${value.toFixed(2)}%`, 'Change']}\n                />\n                <Bar dataKey=\"change\" fill=\"hsl(var(--success))\" barSize={20} radius={[0, 4, 4, 0]}>\n                    <LabelList dataKey=\"change\" position=\"right\" content={<RenderCustomizedLabel />} />\n                </Bar>\n              </BarChart>\n            </ResponsiveContainer>\n          ) : (\n              <p className=\"text-muted-foreground text-center py-10\">No gainers data available.</p>\n          )}\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg font-semibold text-destructive\">Top Losers</CardTitle>\n        </CardHeader>\n        <CardContent>\n         {topLosers.length > 0 ? (\n            <ResponsiveContainer width=\"100%\" height={300}>\n                <BarChart data={topLosers} layout=\"vertical\" margin={{ left: 10, right: 50 }}>\n                    <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(var(--border))\" horizontal={false} />\n                    <XAxis type=\"number\" domain={[dataMin => Math.min(dataMin, 0), 0]} hide/>\n                    <YAxis dataKey=\"name\" type=\"category\" axisLine={false} tickLine={false} stroke=\"hsl(var(--muted-foreground))\" fontSize={12} width={100} />\n                    <Tooltip\n                        cursor={{ fill: 'hsl(var(--muted)/0.3)' }}\n                        contentStyle={{ backgroundColor: 'hsl(var(--background))', border: '1px solid hsl(var(--border))', borderRadius: 'var(--radius)' }}\n                        formatter={(value: number) => [`${value.toFixed(2)}%`, 'Change']}\n                    />\n                    <Bar dataKey=\"change\" fill=\"hsl(var(--destructive))\" barSize={20} radius={[0, 4, 4, 0]}>\n                        <LabelList dataKey=\"change\" position=\"right\" content={<RenderCustomizedLabel />} />\n                    </Bar>\n                </BarChart>\n            </ResponsiveContainer>\n          ) : (\n              <p className=\"text-muted-foreground text-center py-10\">No losers data available.</p>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\n// Add default props for demonstration\nMarketGainersLosersChart.defaultProps = {\n    gainers: [\n        { name: 'Stock A', change: 5.2 },\n        { name: 'Stock B', change: 4.8 },\n        { name: 'Stock C', change: 4.1 },\n        { name: 'Stock D', change: 3.9 },\n        { name: 'Stock E', change: 3.5 },\n    ],\n    losers: [\n        { name: 'Stock Z', change: -4.5 },\n        { name: 'Stock Y', change: -3.8 },\n        { name: 'Stock X', change: -3.2 },\n        { name: 'Stock W', change: -2.9 },\n        { name: 'Stock V', change: -2.5 },\n    ]\n}\n\nexport default MarketGainersLosersChart;\n"
    },
    {
        "fileName": "src/components/market_overview_page/MarketNewsPanel.tsx",
        "content": "import React from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { formatDistanceToNow } from 'date-fns';\n\n// Placeholder data structure\ninterface NewsItem {\n  id: string;\n  headline: string;\n  summary: string;\n  publishTime: Date;\n  source: string;\n  url: string;\n}\n\ninterface MarketNewsPanelProps {\n  newsItems: NewsItem[];\n  title?: string;\n  maxHeight?: string;\n}\n\nconst MarketNewsPanel: React.FC<MarketNewsPanelProps> = ({ newsItems, title = 'Market News & Economic Indicators', maxHeight = '400px' }) => {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"text-lg font-semibold\">{title}</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <ScrollArea style={{ height: maxHeight }} className=\"pr-4\">\n          {newsItems.length > 0 ? (\n            <ul className=\"space-y-4\">\n              {newsItems.map((item) => (\n                <li key={item.id} className=\"border-b border-border pb-4 last:border-b-0\">\n                  <a\n                    href={item.url}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className=\"block hover:bg-muted/50 p-2 rounded-md transition-colors duration-150 group\"\n                  >\n                    <h4 className=\"text-base font-medium text-foreground group-hover:text-primary mb-1\">\n                      {item.headline}\n                    </h4>\n                    <p className=\"text-sm text-muted-foreground mb-2 line-clamp-2\">\n                      {item.summary}\n                    </p>\n                    <div className=\"text-xs text-muted-foreground flex justify-between items-center\">\n                      <span>{item.source}</span>\n                      <time dateTime={item.publishTime.toISOString()}>\n                        {formatDistanceToNow(item.publishTime, { addSuffix: true })}\n                      </time>\n                    </div>\n                  </a>\n                </li>\n              ))}\n            </ul>\n          ) : (\n            <p className=\"text-muted-foreground text-center py-10\">No news available.</p>\n          )}\n        </ScrollArea>\n      </CardContent>\n    </Card>\n  );\n};\n\n// Add default props for demonstration\nMarketNewsPanel.defaultProps = {\n    newsItems: [\n        {\n            id: '1',\n            headline: 'Fed Holds Rates Steady, Signals Patience on Cuts',\n            summary: 'The Federal Reserve kept interest rates unchanged as expected, emphasizing the need for more confidence in inflation control before considering rate cuts.',\n            publishTime: new Date(Date.now() - 1 * 60 * 60 * 1000), // 1 hour ago\n            source: 'Reuters',\n            url: '#',\n        },\n        {\n            id: '2',\n            headline: 'Tech Sector Leads Market Rally Amid Strong Earnings Reports',\n            summary: 'Major technology companies reported better-than-expected earnings, boosting the overall market sentiment and driving major indices higher.',\n            publishTime: new Date(Date.now() - 3 * 60 * 60 * 1000), // 3 hours ago\n            source: 'Bloomberg',\n            url: '#',\n        },\n        {\n            id: '3',\n            headline: 'Oil Prices Dip Slightly on Inventory Build Data',\n            summary: 'Crude oil futures saw a minor pullback after weekly inventory data showed a larger-than-anticipated build in stockpiles.',\n            publishTime: new Date(Date.now() - 5 * 60 * 60 * 1000), // 5 hours ago\n            source: 'MarketWatch',\n            url: '#',\n        },\n         {\n            id: '4',\n            headline: 'US Jobless Claims Remain Low, Pointing to Labor Market Strength',\n            summary: 'Initial claims for unemployment benefits stayed near historic lows, indicating continued resilience in the U.S. labor market despite higher interest rates.',\n            publishTime: new Date(Date.now() - 24 * 60 * 60 * 1000), // 1 day ago\n            source: 'Associated Press',\n            url: '#',\n        },\n    ]\n}\n\nexport default MarketNewsPanel;\n"
    },
    {
        "fileName": "src/components/market_overview_page/MarketNavigationLinks.tsx",
        "content": "import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button } from '@/components/ui/button';\nimport { ArrowLeft, LayoutDashboard, BarChartHorizontalBig } from 'lucide-react';\n\ninterface MarketNavigationLinksProps {\n  dashboardPath?: string;\n  sectorAnalysisPath?: string; // Base path, could append specific sectors\n}\n\nconst MarketNavigationLinks: React.FC<MarketNavigationLinksProps> = ({\n  dashboardPath = '/dashboard', // Default path\n  sectorAnalysisPath = '/sectors', // Default path\n}) => {\n  return (\n    <div className=\"flex flex-wrap gap-3 items-center justify-center py-4\">\n      <Button asChild variant=\"outline\">\n        <Link to={dashboardPath}>\n          <ArrowLeft className=\"mr-2 h-4 w-4\" />\n          Back to Dashboard\n        </Link>\n      </Button>\n\n      <Button asChild variant=\"secondary\">\n        <Link to={sectorAnalysisPath}> {/* Link to general sectors page or a specific one */} \n          <BarChartHorizontalBig className=\"mr-2 h-4 w-4\" />\n          Explore Sectors\n        </Link>\n      </Button>\n      \n       {/* Add more navigation links as needed */} \n    </div>\n  );\n};\n\nexport default MarketNavigationLinks;\n"
    },
    {
        "fileName": "src/pages/LoginPage.tsx",
        "content": "import React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\n// Layout component\nimport Header from '@/components/layout/Header';\n// No Sidebar or Footer based on 'H + B' layout\n\n// UI Components for Login Page\nimport BrandLogoBlock from '@/components/login_account_access_page/BrandLogoBlock';\nimport WelcomeMessage from '@/components/login_account_access_page/WelcomeMessage';\nimport LoginForm, { LoginFormValues } from '@/components/login_account_access_page/LoginForm';\nimport AuthActionButtons from '@/components/login_account_access_page/AuthActionButtons';\nimport SocialLoginButtons from '@/components/login_account_access_page/SocialLoginButtons';\nimport GuestAccessButton from '@/components/login_account_access_page/GuestAccessButton';\nimport RegistrationModal, { RegistrationFormValues } from '@/components/login_account_access_page/RegistrationModal';\nimport ThemeToggle from '@/components/login_account_access_page/ThemeToggle';\n\n// Placeholder Data and Configuration\nconst welcomeData = {\n  title: \"Access Your Trading Dashboard\",\n  message: \"Sign in to manage your portfolio, track market trends, and make informed decisions. Or continue as a guest for a limited view.\"\n};\n\nconst socialProviders = ['google', 'microsoft']; // Example based on description\nconst allowGuest = true; // Based on description mentioning 'Continue as Guest'\nconst allowSignUp = true; // Based on description mentioning 'Sign Up'\n\nconst LoginPage: React.FC = () => {\n  const navigate = useNavigate();\n  const [isLoginLoading, setIsLoginLoading] = useState(false);\n  const [isSocialLoading, setIsSocialLoading] = useState<string | false>(false);\n  const [isGuestLoading, setIsGuestLoading] = useState(false);\n  const [isRegistrationLoading, setIsRegistrationLoading] = useState(false);\n  const [isRegistrationModalOpen, setIsRegistrationModalOpen] = useState(false);\n\n  // --- Placeholder Handler Functions --- \n\n  const handleLoginSubmit = async (values: LoginFormValues) => {\n    setIsLoginLoading(true);\n    console.log('Login attempt:', values);\n    // Replace with actual login API call\n    await new Promise(resolve => setTimeout(resolve, 1500)); // Simulate API delay\n    console.log('Login successful (simulated)');\n    setIsLoginLoading(false);\n    navigate('/dashboard'); // Redirect after successful login\n  };\n\n  const handleForgotPassword = () => {\n    console.log('Forgot Password clicked');\n    // Navigate to forgot password page or show modal\n    alert('Forgot Password flow not implemented.'); \n  };\n\n  const handleSignUpClick = () => {\n    console.log('Sign Up clicked');\n    setIsRegistrationModalOpen(true);\n  };\n\n  const handleSocialLogin = async (provider: string) => {\n    setIsSocialLoading(provider);\n    console.log(`Social login attempt with: ${provider}`);\n    // Replace with actual social login API call\n    await new Promise(resolve => setTimeout(resolve, 1500)); // Simulate API delay\n    console.log(`Social login successful with ${provider} (simulated)`);\n    setIsSocialLoading(false);\n    navigate('/dashboard'); // Redirect after successful login\n  };\n\n  const handleGuestAccess = async () => {\n    setIsGuestLoading(true);\n    console.log('Continue as Guest clicked');\n    // Replace with guest session logic\n    await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate delay\n    console.log('Guest access granted (simulated)');\n    setIsGuestLoading(false);\n    navigate('/dashboard'); // Redirect to guest dashboard view\n  };\n\n  const handleRegistrationSubmit = async (values: RegistrationFormValues) => {\n    setIsRegistrationLoading(true);\n    console.log('Registration attempt:', values);\n    // Replace with actual registration API call\n    await new Promise(resolve => setTimeout(resolve, 2000)); // Simulate API delay\n    console.log('Registration successful (simulated)');\n    setIsRegistrationLoading(false);\n    setIsRegistrationModalOpen(false);\n    // Optionally login the user automatically or show success message\n    navigate('/dashboard'); // Redirect after successful registration\n  };\n\n  // The form instance is within LoginForm, but we trigger submit via AuthActionButtons\n  // We need a way to programmatically submit the form inside LoginForm.\n  // A common way is using a ref or lifting the form state, but for simplicity,\n  // we'll trigger the submit handler directly here if needed, assuming the form data is accessible\n  // or handled internally by LoginForm on its own submit event if structure differs.\n  // Here, we assume AuthActionButtons' onLoginClick directly calls handleLoginSubmit which has form values.\n  // This requires LoginForm's internal form state/submit logic to be coordinated.\n  // A more robust approach might involve passing the form instance or a submit trigger function down.\n  // For this simulation, we pass handleLoginSubmit directly to AuthActionButtons' onLoginClick prop.\n  const triggerLoginFormSubmit = () => {\n     // This ideally triggers the react-hook-form submit associated with LoginForm\n     // This might involve finding the form and calling submit() or using form context.\n     // For now, we directly call the handler.\n     // Note: This won't work correctly without access to the form's state/submit method.\n     // A common pattern is to have the Button *inside* the form.\n     // Since LoginForm doesn't have the button, we adapt. Let's refine LoginForm \n     // or how AuthActionButtons interacts with it. Assuming AuthActionButtons is INSIDE the CardContent\n     // or can access the form context/trigger. Let's adjust the structure slightly for plausibility.\n     // **Revised approach:** We'll keep AuthActionButtons separate but pass the submit handler.\n     // LoginForm itself doesn't render a submit button.\n     document.getElementById('login-form-submit-button')?.click(); // Hacky: find and click hidden submit if needed\n     console.warn(\"Triggering form submit programmatically. Ensure LoginForm is set up for this.\");\n  };\n\n  return (\n    <div className=\"flex flex-col min-h-screen bg-background\">\n      <Header />\n      {/* Main Content Area (B) */}\n      <main className=\"flex flex-1 items-center justify-center py-12 px-4\">\n        <div className=\"w-full max-w-md space-y-6\">\n          \n          {/* Theme Toggle - Placed near the form for easy access */}\n          <div className=\"flex justify-end\">\n            <ThemeToggle />\n          </div>\n\n          {/* Component Order based on Page Data JSON */} \n          {/* 1. Brand/Logo */} \n          <BrandLogoBlock appName=\"Ascendion\" />\n\n          {/* 2. Text Block */} \n          <WelcomeMessage\n            title={welcomeData.title}\n            message={welcomeData.message}\n          />\n\n          {/* 3. Form (Card contains the form fields) */} \n          <LoginForm \n            onSubmit={handleLoginSubmit} \n            isLoading={isLoginLoading} \n            // We'll place AuthActionButtons below the form fields, \n            // ideally LoginForm would accept children or have a designated slot for actions\n            // For now, LoginForm renders the card and fields, actions are below.\n          />\n\n          {/* 4. Button Group (Login, Forgot, Sign Up) */} \n          {/* These buttons often appear *within* the form card in UI patterns */}\n          {/* To make this work with the current structure, place it nearby */}\n          <AuthActionButtons\n            onLoginClick={() => { \n              // This assumes LoginForm setup correctly handles submission via its internal form state \n              // when handleLoginSubmit is called. \n              // NOTE: Requires LoginForm's internal form to be submitted. \n              // A hidden submit button inside LoginForm triggered by this might be needed. \n              // Or LoginForm needs to expose its submit handler. \n               const loginForm = document.querySelector('form'); // Simple selector, might need refinement\n               loginForm?.requestSubmit(); // Standard way to trigger form submission \n            }}\n            onForgotPasswordClick={handleForgotPassword}\n            onSignUpClick={handleSignUpClick}\n            isLoginLoading={isLoginLoading}\n            showSignUp={allowSignUp}\n            className=\"mt-4\" // Add margin if needed depending on LoginForm's structure\n          />\n\n          {/* 5. Social Login Group */} \n          <SocialLoginButtons\n            providers={socialProviders}\n            onSocialLogin={handleSocialLogin}\n            isLoading={isSocialLoading}\n          />\n\n          {/* 6. Button (Guest Access) */} \n          <GuestAccessButton\n            onGuestAccessClick={handleGuestAccess}\n            isLoading={isGuestLoading}\n            allowGuestAccess={allowGuest}\n          />\n\n          {/* 7. Modal (Registration) - Rendered but controlled by state */} \n          {/* ThemeToggle is handled separately above */} \n\n        </div>\n      </main>\n\n      {/* Render modal outside main flow */} \n      <RegistrationModal\n        isOpen={isRegistrationModalOpen}\n        onOpenChange={setIsRegistrationModalOpen}\n        onSubmit={handleRegistrationSubmit}\n        isLoading={isRegistrationLoading}\n      />\n      {/* No Footer */} \n    </div>\n  );\n};\n\nexport default LoginPage;\n"
    },
    {
        "fileName": "src/pages/MainTradingDashboardPage.tsx",
        "content": "import React, { useState } from 'react';\nimport Header from '@/components/layout/Header';\nimport Sidebar from '@/components/layout/Sidebar';\nimport Footer from '@/components/layout/Footer';\nimport DashboardFilterGroup from '@/components/main_trading_dashboard/DashboardFilterGroup';\nimport TrendingStocksSection from '@/components/main_trading_dashboard/TrendingStocksSection';\nimport StockDetailModal from '@/components/main_trading_dashboard/StockDetailModal';\nimport MarketTrendOverviewPanel from '@/components/main_trading_dashboard/MarketTrendOverviewPanel';\nimport RecommendedStocksTable from '@/components/main_trading_dashboard/RecommendedStocksTable';\nimport LoserStocksTable from '@/components/main_trading_dashboard/LoserStocksTable';\nimport AppearanceSettings from '@/components/main_trading_dashboard/AppearanceSettings';\nimport { NewsItem } from '@/components/main_trading_dashboard/StockNewsCards'; // Assuming type export\n\n// --- Placeholder Data Definitions ---\n\n// Filter Group Data\nconst mockAvailableSectors = ['Technology', 'Healthcare', 'Finance', 'Energy', 'Consumer Goods'];\nconst mockAvailableMarketSegments = ['Large Cap', 'Mid Cap', 'Small Cap'];\nconst mockInitialFilters = { timeframe: '1D' as const };\n\n// Trending Stocks Data (including nested news)\nconst mockTrendingNews: NewsItem[] = [\n  { id: 'n1', headline: 'Tech Giant Hits Record Highs', source: 'MarketWatch', summary: 'Shares surged after positive earnings report.', timestamp: new Date(Date.now() - 3600 * 1000).toISOString(), fullArticle: 'Full article text here...' },\n  { id: 'n2', headline: 'New Partnership Announced', source: 'Reuters', summary: 'Strategic alliance expected to boost growth.', timestamp: new Date(Date.now() - 7200 * 1000).toISOString(), fullArticle: 'More details...' },\n];\nconst mockTrendingStocks = [\n  { id: 'stock1', ticker: 'TECH', name: 'Tech Innovations Inc.', price: 150.25, changePercent: 2.5, chartData: [{ name: '09:00', value: 148 }, { name: '10:00', value: 149 }, { name: '11:00', value: 151 }, { name: '12:00', value: 150.5 }, { name: '13:00', value: 150.25 }], news: mockTrendingNews },\n  { id: 'stock2', ticker: 'HLTH', name: 'Healthcare Solutions Ltd.', price: 85.50, changePercent: -0.8, chartData: [{ name: '09:00', value: 86 }, { name: '10:00', value: 86.2 }, { name: '11:00', value: 85.8 }, { name: '12:00', value: 85.4 }, { name: '13:00', value: 85.50 }], news: mockTrendingNews.slice(0, 1) },\n  { id: 'stock3', ticker: 'FINX', name: 'Finance Experts Group', price: 210.70, changePercent: 1.2, chartData: [{ name: '09:00', value: 208 }, { name: '10:00', value: 209 }, { name: '11:00', value: 211 }, { name: '12:00', value: 210 }, { name: '13:00', value: 210.70 }], news: [] },\n];\n\n// Market Trend Data (Example: Line Chart)\nconst mockMarketTrendDataLine = {\n  visualizationType: 'line' as const,\n  data: [\n    { name: 'Mon', value: 12000 },\n    { name: 'Tue', value: 12200 },\n    { name: 'Wed', value: 12150 },\n    { name: 'Thu', value: 12400 },\n    { name: 'Fri', value: 12350 },\n  ],\n};\n\n// Recommended Stocks Data\nconst mockRecommendedStocks = [\n  { id: 'rec1', ticker: 'GROW', name: 'Growth Co.', price: 55.00, changePercent: 3.1, analystRating: 'Buy', recommendationReason: 'Strong earnings forecast and market expansion.' },\n  { id: 'rec2', ticker: 'STBL', name: 'Stable Industries', price: 112.30, changePercent: 0.5, analystRating: 'Hold', recommendationReason: 'Solid fundamentals, market leader.' },\n  { id: 'rec3', ticker: 'INNV', name: 'Innovate Corp', price: 78.90, changePercent: 4.5, analystRating: 'Strong Buy', recommendationReason: 'Breakthrough technology nearing market release.' },\n  // Add more up to 10 if needed\n];\n\n// Loser Stocks Data\nconst mockLoserStocks = [\n  { id: 'los1', ticker: 'DECL', name: 'Decline Ltd.', price: 30.10, changePercent: -5.2, analystRating: 'Sell', tooltipInfo: 'Missed earnings expectations significantly.' },\n  { id: 'los2', ticker: 'DOWN', name: 'Downwards Inc.', price: 95.60, changePercent: -3.8, analystRating: 'Hold', tooltipInfo: 'Sector experiencing temporary headwinds.' },\n  { id: 'los3', ticker: 'NEG', name: 'Negative Returns Plc', price: 15.20, changePercent: -6.1, tooltipInfo: 'Regulatory concerns impacting outlook.' },\n  // Add more up to 10 if needed\n];\n\n// Stock Detail Modal Data (Example structure)\nconst mockStockDetailData: { [key: string]: any } = {\n  stock1: { id: 'stock1', ticker: 'TECH', name: 'Tech Innovations Inc.', price: 150.25, changePercent: 2.5, marketCap: '500B', volume: '10M', dayHigh: 151.50, dayLow: 148.00, yearHigh: 160.00, yearLow: 100.00, analystRating: 'Buy', historicalData: [{ date: '2023-01-01', price: 110 }, { date: '2023-04-01', price: 130 }, { date: '2023-07-01', price: 140 }, { date: '2023-10-01', price: 145 }, { date: '2024-01-01', price: 150 }], news: mockTrendingNews },\n  stock2: { id: 'stock2', ticker: 'HLTH', name: 'Healthcare Solutions Ltd.', price: 85.50, changePercent: -0.8, marketCap: '200B', volume: '5M', dayHigh: 86.50, dayLow: 85.00, yearHigh: 95.00, yearLow: 70.00, analystRating: 'Hold', historicalData: [{ date: '2023-01-01', price: 75 }, { date: '2023-04-01', price: 80 }, { date: '2023-07-01', price: 90 }, { date: '2023-10-01', price: 88 }, { date: '2024-01-01', price: 85 }], news: mockTrendingNews.slice(0, 1) },\n  // Add details for other stocks as needed\n};\n\n// --- Page Component ---\n\nexport default function MainTradingDashboardPage() {\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [selectedStockData, setSelectedStockData] = useState<any | null>(null);\n  const [dashboardFilters, setDashboardFilters] = useState(mockInitialFilters);\n\n  const toggleSidebar = () => {\n    setIsSidebarOpen(!isSidebarOpen);\n  };\n\n  const handleStockClick = (stockId: string) => {\n    // Find the detailed data for the clicked stock (using mock data here)\n    const detailData = mockStockDetailData[stockId] || mockTrendingStocks.find(s => s.id === stockId) || mockRecommendedStocks.find(s => s.id === stockId) || mockLoserStocks.find(s => s.id === stockId);\n    // If detailed data isn't pre-defined, create a basic structure\n    const dataToShow = detailData?.historicalData ? detailData : {\n        ...detailData,\n        // Add placeholder detailed fields if missing from the basic list item\n        marketCap: detailData?.marketCap || 'N/A',\n        volume: detailData?.volume || 'N/A',\n        dayHigh: detailData?.dayHigh || detailData?.price || 0,\n        dayLow: detailData?.dayLow || detailData?.price || 0,\n        yearHigh: detailData?.yearHigh || detailData?.price || 0,\n        yearLow: detailData?.yearLow || detailData?.price || 0,\n        historicalData: [], // Add placeholder historical data if needed\n        news: detailData?.news || [], // Ensure news array exists\n    };\n\n    if (dataToShow) {\n        setSelectedStockData(dataToShow);\n        setIsModalOpen(true);\n    }\n  };\n\n  const handleFilterChange = (filters: any) => {\n    console.log('Filters changed:', filters);\n    setDashboardFilters(filters);\n    // In a real app, trigger data refetching based on filters here\n  };\n\n  const handleModalClose = (isOpen: boolean) => {\n    setIsModalOpen(isOpen);\n    if (!isOpen) {\n      setSelectedStockData(null); // Clear data when closing\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col min-h-screen bg-background\">\n      <Header toggleSidebar={toggleSidebar} hasCollapsibleSidebar={true} />\n      <div className=\"flex flex-1\">\n        <Sidebar isOpen={isSidebarOpen} onClose={() => setIsSidebarOpen(false)} />\n        <main className=\"flex-1 p-4 md:p-6 lg:p-8 overflow-y-auto\">\n          <div className=\"space-y-6\">\n            {/* Component 1: Filter Group */}\n            <DashboardFilterGroup\n              availableSectors={mockAvailableSectors}\n              availableMarketSegments={mockAvailableMarketSegments}\n              initialFilters={dashboardFilters}\n              onFilterChange={handleFilterChange}\n            />\n\n            {/* Component 2 & 3: Trending Stocks (Card Group) with News Cards */}\n            <TrendingStocksSection\n              stocks={mockTrendingStocks}\n              onStockClick={handleStockClick}\n            />\n\n            {/* Component 5: Market Trend Overview Panel */}\n            <MarketTrendOverviewPanel\n              title=\"Market Index Overview\"\n              visualizationType={mockMarketTrendDataLine.visualizationType}\n              data={mockMarketTrendDataLine.data}\n            />\n\n             <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                {/* Component 6: Recommended Stocks Table */}\n                <RecommendedStocksTable\n                stocks={mockRecommendedStocks}\n                onStockClick={handleStockClick}\n                title=\"Top Recommended Stocks\"\n                />\n\n                {/* Component 7: Loser Stocks Table */}\n                <LoserStocksTable\n                stocks={mockLoserStocks}\n                onStockClick={handleStockClick}\n                title=\"Top Loser Stocks\"\n                />\n             </div>\n\n            {/* Component 8: Appearance Settings (Toggle Group) */}\n            <AppearanceSettings />\n          </div>\n        </main>\n      </div>\n      <Footer />\n\n      {/* Component 4: Stock Detail Modal (Rendered outside main flow) */}\n      <StockDetailModal\n        stockData={selectedStockData}\n        isOpen={isModalOpen}\n        onOpenChange={handleModalClose}\n      />\n    </div>\n  );\n}\n"
    },
    {
        "fileName": "src/pages/StockDetailPage.tsx",
        "content": "import React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport Header from '@/components/layout/Header';\n// Assuming Footer is not needed based on layout 'H + B'\n// import Footer from '@/components/layout/Footer';\nimport StockDetailModalContainer from '@/components/stock_detail_modal_view/StockDetailModalContainer';\nimport StockSelectorDropdown from '@/components/stock_detail_modal_view/StockSelectorDropdown';\nimport StockSummaryCard from '@/components/stock_detail_modal_view/StockSummaryCard';\nimport InteractiveStockChart from '@/components/stock_detail_modal_view/InteractiveStockChart';\nimport ChartTimeframeSelector from '@/components/stock_detail_modal_view/ChartTimeframeSelector';\nimport NewsHeadlineList from '@/components/stock_detail_modal_view/NewsHeadlineList';\nimport FundamentalsPanel from '@/components/stock_detail_modal_view/FundamentalsPanel';\nimport AnalystRatingsList from '@/components/stock_detail_modal_view/AnalystRatingsList';\nimport WatchlistActionButton from '@/components/stock_detail_modal_view/WatchlistActionButton';\nimport ModalCloseButton from '@/components/stock_detail_modal_view/ModalCloseButton';\n\n// --- Placeholder Data --- //\n\nconst mockStockOptions = [\n  { value: 'AAPL', label: 'Apple Inc. (AAPL)' },\n  { value: 'MSFT', label: 'Microsoft Corp. (MSFT)' },\n  { value: 'GOOGL', label: 'Alphabet Inc. (GOOGL)' },\n  { value: 'AMZN', label: 'Amazon.com, Inc. (AMZN)' },\n];\n\n// Data for a specific stock (e.g., AAPL)\nconst mockStockData = {\n  AAPL: {\n    summary: {\n      ticker: 'AAPL',\n      name: 'Apple Inc.',\n      currentPrice: 175.34,\n      priceChange: 2.11,\n      priceChangePercent: 1.22,\n    },\n    chartData: [\n      { date: '2023-10-01', close: 170, volume: 50000000 },\n      { date: '2023-10-02', close: 172, volume: 55000000 },\n      { date: '2023-10-03', close: 171.5, volume: 48000000 },\n      { date: '2023-10-04', close: 174, volume: 60000000 },\n      { date: '2023-10-05', close: 175.34, volume: 52000000 },\n      // Add more data points for different timeframes\n    ],\n    news: [\n      { id: 1, title: 'Apple Unveils New iPhone Model', summary: 'Apple announced its latest iPhone with several new features...', source: 'TechCrunch', publishedDate: '2023-10-04', url: '#' },\n      { id: 2, title: 'Analysts Bullish on Apple Stock Ahead of Earnings', summary: 'Several investment banks reiterated their buy ratings...', source: 'Reuters', publishedDate: '2023-10-03', url: '#' },\n    ],\n    fundamentals: {\n      marketCap: 2.75e12,\n      peRatio: 28.5,\n      dividendYield: 0.55,\n      sector: 'Technology',\n      industry: 'Consumer Electronics',\n      volume: 52000000,\n      avgVolume: 58000000,\n      yearHigh: 198.23,\n      yearLow: 164.08,\n    },\n    ratings: [\n      { id: 'r1', analyst: 'John Doe', institution: 'Top Bank', rating: 'Buy', rationale: 'Strong ecosystem growth anticipated.', date: '2023-10-01', priceTarget: 200 },\n      { id: 'r2', analyst: 'Jane Smith', institution: 'Invest Co', rating: 'Hold', rationale: 'Valuation appears stretched short-term.', date: '2023-09-28', priceTarget: 180 },\n    ],\n  },\n  // Add similar mock data for MSFT, GOOGL, AMZN if needed for the selector\n  MSFT: { /* ... MSFT data ... */ },\n  GOOGL: { /* ... GOOGL data ... */ },\n  AMZN: { /* ... AMZN data ... */ },\n};\n\nconst timeframes = ['1D', '5D', '1M', '6M', '1Y'];\n\n// --- Page Component --- //\n\nconst StockDetailPage: React.FC = () => {\n  const { ticker } = useParams<{ ticker: string }>();\n  const navigate = useNavigate();\n\n  // State for the modal and its content\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [selectedStockTicker, setSelectedStockTicker] = useState<string>(ticker || mockStockOptions[0].value);\n  const [selectedTimeframe, setSelectedTimeframe] = useState<string>(timeframes[2]); // Default to '1M'\n\n  // Mocked state for user interactions\n  const [isSignedIn, setIsSignedIn] = useState(true); // Assume user is signed in for demo\n  const [isInWatchlist, setIsInWatchlist] = useState(false); // Assume initially not in watchlist\n  const [isLoadingWatchlist, setIsLoadingWatchlist] = useState(false);\n\n  // Derive current stock data based on selected ticker\n  // In a real app, this would trigger data fetching\n  const currentStock = mockStockData[selectedStockTicker as keyof typeof mockStockData] || mockStockData['AAPL'];\n  const stockSummary = currentStock?.summary;\n  const mockChartData = currentStock?.chartData || [];\n  const mockNewsItems = currentStock?.news || [];\n  const mockFundamentals = currentStock?.fundamentals || {};\n  const mockAnalystRatings = currentStock?.ratings || [];\n\n  // Effect to control modal visibility based on route parameter\n  useEffect(() => {\n    if (ticker) {\n      setSelectedStockTicker(ticker);\n      setIsModalOpen(true);\n    } else {\n      setIsModalOpen(false);\n    }\n  }, [ticker]);\n\n  // Handle closing the modal - navigate back to a default page (e.g., dashboard)\n  const handleModalClose = (open: boolean) => {\n    if (!open) {\n      setIsModalOpen(false);\n      navigate('/dashboard'); // Navigate away when modal closes\n    }\n  };\n\n  // Handle stock selection change from dropdown\n  const handleStockChange = (newTicker: string) => {\n    if (newTicker !== selectedStockTicker) {\n      setSelectedStockTicker(newTicker);\n      // In a real app, you'd likely update the URL without full navigation\n      // navigate(`/stock/${newTicker}`, { replace: true });\n      // And trigger data fetching for the new ticker here\n      console.log(`Selected new stock: ${newTicker}. Data would refetch.`);\n    }\n  };\n\n  // Mock handler for watchlist toggle\n  const handleToggleWatchlist = (tickerToToggle: string, shouldAdd: boolean) => {\n    console.log(`${shouldAdd ? 'Adding' : 'Removing'} ${tickerToToggle} ${shouldAdd ? 'to' : 'from'} watchlist...`);\n    setIsLoadingWatchlist(true);\n    // Simulate API call\n    setTimeout(() => {\n      setIsInWatchlist(shouldAdd);\n      setIsLoadingWatchlist(false);\n      console.log(`Watchlist update complete for ${tickerToToggle}.`);\n    }, 1000);\n  };\n\n  return (\n    <div className=\"flex flex-col min-h-screen bg-background\">\n      {/* Render Header always */}\n      <Header />\n\n      {/* Minimal main content for the page itself, focus is the modal */}\n      <main className=\"flex-1 container mx-auto p-4\">\n        {/* You might show a loading indicator here if needed before modal opens */} \n        {/* Or leave it blank as the modal takes focus */} \n      </main>\n\n      {/* Render the Modal using StockDetailModalContainer */} \n      <StockDetailModalContainer isOpen={isModalOpen} onOpenChange={handleModalClose}>\n        {/* Layout within the modal */} \n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 max-h-[85vh] relative\">\n          {/* Left/Main Section (Chart, Summary, Timeframe) */} \n          <div className=\"md:col-span-2 space-y-4 flex flex-col overflow-hidden\">\n            <div className=\"flex flex-wrap items-start justify-between gap-4 px-1 pt-1\">\n              <StockSelectorDropdown\n                stocks={mockStockOptions}\n                selectedValue={selectedStockTicker}\n                onValueChange={handleStockChange}\n                className=\"min-w-[180px] z-10\"\n              />\n              <WatchlistActionButton\n                stockTicker={selectedStockTicker}\n                isInWatchlist={isInWatchlist}\n                isSignedIn={isSignedIn}\n                isLoading={isLoadingWatchlist}\n                onToggleWatchlist={handleToggleWatchlist}\n                className=\"shrink-0\"\n              />\n            </div>\n\n            {stockSummary && (\n              <div className=\"px-1\">\n                 <StockSummaryCard {...stockSummary} />\n              </div>\n            )}\n\n            <div className=\"px-1\">\n                <ChartTimeframeSelector\n                    timeframes={timeframes}\n                    selectedTimeframe={selectedTimeframe}\n                    onTimeframeChange={setSelectedTimeframe}\n                    className=\"mb-2\"\n                />\n            </div>\n            \n            <div className=\"flex-grow px-1 pb-1 min-h-[300px]\"> \n                <InteractiveStockChart\n                    data={mockChartData} // Use data derived from selectedStockTicker\n                    timeframe={selectedTimeframe}\n                />\n            </div>\n          </div>\n\n          {/* Right/Side Section (Fundamentals, News, Ratings) */} \n          <div className=\"md:col-span-1 space-y-4 overflow-y-auto max-h-[80vh] pr-2 pb-4 scrollbar-thin scrollbar-thumb-muted-foreground/50 scrollbar-track-transparent\">\n             <FundamentalsPanel data={mockFundamentals} />\n             <AnalystRatingsList ratings={mockAnalystRatings} />\n             <NewsHeadlineList newsItems={mockNewsItems} />\n          </div>\n        </div>\n\n        {/* Modal Close Button (often positioned absolutely by its component) */} \n        <ModalCloseButton />\n      </StockDetailModalContainer>\n\n      {/* Footer is not included based on layout 'H + B' */}\n      {/* <Footer /> */} \n    </div>\n  );\n};\n\nexport default StockDetailPage;\n"
    },
    {
        "fileName": "src/pages/UserProfilePage.tsx",
        "content": "import React, { useState } from 'react';\nimport { Link } from 'react-router-dom'; // Imported for potential use within placeholder data/functions if needed\n\n// Layout Components\nimport Header from '@/components/layout/Header';\nimport Sidebar from '@/components/layout/Sidebar';\nimport Footer from '@/components/layout/Footer';\n\n// UI Components for this page\nimport UserProfileCard from '@/components/user_profile_settings_page/UserProfileCard';\nimport PersonalInfoForm from '@/components/user_profile_settings_page/PersonalInfoForm';\nimport PreferencesPanel from '@/components/user_profile_settings_page/PreferencesPanel';\nimport SavedItemsList from '@/components/user_profile_settings_page/SavedItemsList';\nimport LogoutButton from '@/components/user_profile_settings_page/LogoutButton';\nimport AccountManagementActions from '@/components/user_profile_settings_page/AccountManagementActions';\nimport InfoTextBlock from '@/components/user_profile_settings_page/InfoTextBlock';\n\n// Placeholder Data Generation\n\n// For UserProfileCard (id: 1)\nconst mockUserProfile = {\n  userName: \"Jane Doe\",\n  email: \"jane.doe@example.com\",\n  avatarFallback: \"JD\",\n  // avatarUrl: \"https://github.com/shadcn.png\", // Optional: Add a real image URL if desired\n};\nconst handleUpdateAvatar = () => {\n  console.log(\"Update avatar clicked - Placeholder\");\n  alert(\"Avatar update functionality placeholder\");\n};\n\n// For PersonalInfoForm (id: 2)\nconst mockInitialInfo = {\n  displayName: \"Jane Doe\",\n  email: \"jane.doe@example.com\",\n};\n// Define the type for the form data based on the component's schema expectation (can be refined)\ntype PersonalInfoFormData = {\n  displayName: string;\n  email: string;\n  currentPassword?: string;\n  newPassword?: string;\n  confirmNewPassword?: string;\n};\nconst handleProfileSubmit = async (data: PersonalInfoFormData) => {\n  console.log(\"Submitting profile info (Placeholder):\", data);\n  // Simulate API call delay\n  await new Promise(resolve => setTimeout(resolve, 1000));\n  // The toast notification is handled within the PersonalInfoForm component itself\n  console.log(\"Profile update simulation finished.\");\n  // Example: Throw an error to test error handling in the form\n  // throw new Error(\"Simulated API Error\");\n};\n\n// For PreferencesPanel (id: 3)\nconst mockInitialPrefs = {\n  notifications: {\n    email: true,\n    sms: false,\n    push: true,\n  },\n  fontSizeScale: 1.0, // 100%\n};\n// Define the type based on component props\ntype PreferenceData = typeof mockInitialPrefs;\nconst handlePrefsChange = (prefs: PreferenceData) => {\n  console.log(\"Preferences changed (Placeholder):\", prefs);\n  // In a real app, you would likely persist these settings (e.g., API call, localStorage)\n};\n\n// For SavedItemsList (id: 4)\nconst mockSavedItems = [\n  { id: 'wl1', name: 'Tech Stocks Watchlist', description: 'My favorite tech companies', manageLink: '/dashboard' }, // Using /dashboard as placeholder link\n  { id: 'wl2', name: 'Dividend Plays', manageLink: '/market-overview' }, // Using /market-overview as placeholder link\n  { id: 'al1', name: 'AAPL Price Alert', description: 'Alert when AAPL > $200', manageLink: '/profile' }, // Using /profile as placeholder link\n];\nconst handleDeleteItem = (id: string) => {\n  console.log(\"Delete item (Placeholder):\", id);\n  alert(`Placeholder: Delete item ${id}`);\n  // Update mockSavedItems state here in a real scenario\n};\nconst handleRenameItem = (id: string, newName: string) => {\n    console.log(`Rename item ${id} to (Placeholder): ${newName}`);\n    alert(`Placeholder: Rename item ${id} to ${newName}`);\n     // Update mockSavedItems state here in a real scenario\n};\n\n// For LogoutButton (id: 5)\nconst handleLogout = () => {\n  console.log(\"Logout action initiated (Placeholder)\");\n  alert(\"Placeholder: Logging out...\");\n  // Add actual logout logic (e.g., clear session/token, redirect)\n  // Example redirect: window.location.href = '/login';\n};\n\n// For AccountManagementActions (id: 6)\nconst handleDeleteAccount = () => {\n  console.log(\"Delete account action initiated (Placeholder)\");\n  // Actual deletion logic would go here, likely involving API calls and state updates\n};\nconst handleExportData = () => {\n  console.log(\"Export data action initiated (Placeholder)\");\n  // Actual data export logic would go here\n};\n\n// For InfoTextBlock (id: 7)\nconst infoTextContent = `\n  Manage your account details and preferences here.\n  Changes to your profile information require clicking 'Save Changes'.\n  Notification settings control how you receive updates. Theme and font size adjustments enhance your user experience.\n  Be cautious with actions in the 'Danger Zone' as they are irreversible.\n  Your privacy is important to us. Refer to our Privacy Policy for more details.\n`;\n\nexport default function UserProfilePage() {\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n\n  const toggleSidebar = () => setIsSidebarOpen(!isSidebarOpen);\n  const closeSidebar = () => setIsSidebarOpen(false);\n\n  return (\n    <div className=\"flex flex-col min-h-screen bg-background text-foreground\">\n      <Header toggleSidebar={toggleSidebar} hasCollapsibleSidebar={true} />\n      <div className=\"flex flex-1\">\n        <Sidebar isOpen={isSidebarOpen} onClose={closeSidebar} />\n        <main className=\"flex-1 p-4 md:p-6 lg:p-8 overflow-y-auto\">\n          <div className=\"max-w-4xl mx-auto space-y-6\">\n\n            {/* Component 1: User Profile Card */}\n            <UserProfileCard\n              userName={mockUserProfile.userName}\n              email={mockUserProfile.email}\n              avatarFallback={mockUserProfile.avatarFallback}\n              // avatarUrl={mockUserProfile.avatarUrl} // Uncomment to add image URL\n              onUpdateAvatarClick={handleUpdateAvatar}\n            />\n\n            {/* Component 2: Personal Information Form */}\n            <PersonalInfoForm\n              initialData={mockInitialInfo}\n              onSubmit={handleProfileSubmit}\n            />\n\n            {/* Component 3: Preferences Panel */}\n            <PreferencesPanel\n              initialPreferences={mockInitialPrefs}\n              onPreferencesChange={handlePrefsChange}\n            />\n\n            {/* Component 4: Saved Items List */}\n            <SavedItemsList\n              title=\"Saved Watchlists & Alerts\"\n              items={mockSavedItems}\n              onDeleteItem={handleDeleteItem}\n              onRenameItem={handleRenameItem}\n              emptyStateMessage=\"You haven't saved any watchlists or alerts yet.\"\n            />\n\n            {/* Component 7: Explanatory Text Block (Positioned before actions based on input order) */}\n            <InfoTextBlock\n              content={infoTextContent}\n              variant=\"subtle\"\n              className=\"mt-8\"\n            />\n\n             {/* Component 5: Logout Button (often placed near account actions) */}\n             <div className=\"mt-6 flex justify-start\">\n                <LogoutButton onLogout={handleLogout} useConfirmation={true} />\n             </div>\n\n            {/* Component 6: Account Management Actions (Danger Zone) */}\n            <AccountManagementActions\n              onDeleteAccount={handleDeleteAccount}\n              onExportData={handleExportData}\n            />\n\n          </div>\n        </main>\n      </div>\n      <Footer />\n    </div>\n  );\n}\n"
    },
    {
        "fileName": "src/pages/MarketOverviewPage.tsx",
        "content": "import React, { useState } from 'react';\nimport Header from '@/components/layout/Header';\nimport Sidebar from '@/components/layout/Sidebar';\nimport Footer from '@/components/layout/Footer';\nimport MarketFilterGroup from '@/components/market_overview_page/MarketFilterGroup';\nimport MarketIndexChart from '@/components/market_overview_page/MarketIndexChart';\nimport SectorHeatMap from '@/components/market_overview_page/SectorHeatMap';\nimport MarketStatCards from '@/components/market_overview_page/MarketStatCards';\nimport SectorMoversTable from '@/components/market_overview_page/SectorMoversTable';\nimport MarketGainersLosersChart from '@/components/market_overview_page/MarketGainersLosersChart';\nimport MarketNewsPanel from '@/components/market_overview_page/MarketNewsPanel';\nimport MarketNavigationLinks from '@/components/market_overview_page/MarketNavigationLinks';\n\n// Placeholder Data Definitions\ninterface FilterOptions {\n  exchanges: string[];\n  regions: string[];\n  sectors: string[];\n}\n\ninterface IndexDataPoint {\n  time: string;\n  [indexName: string]: number | string;\n}\n\ninterface SectorPerformance {\n  name: string;\n  change: number;\n  volume?: number;\n}\n\ninterface MarketStats {\n  advancing: number;\n  declining: number;\n  unchanged: number;\n  sentiment?: 'Bullish' | 'Bearish' | 'Neutral';\n  marketHigh?: number;\n  marketLow?: number;\n}\n\ninterface SectorMover {\n  id: string;\n  name: string;\n  change: number;\n  volume: number;\n}\n\ninterface MoverData {\n  name: string;\n  change: number;\n}\n\ninterface NewsItem {\n  id: string;\n  headline: string;\n  summary: string;\n  publishTime: Date;\n  source: string;\n  url: string;\n}\n\n// --- Placeholder Data --- \n\nconst mockFilterOptions: FilterOptions = {\n  exchanges: ['NYSE', 'NASDAQ', 'LSE', 'TSE', 'HKEX'],\n  regions: ['North America', 'Europe', 'Asia', 'South America', 'Oceania'],\n  sectors: ['Technology', 'Healthcare', 'Financials', 'Energy', 'Industrials', 'Consumer Discretionary', 'Utilities', 'Real Estate', 'Materials'],\n};\n\nconst mockAvailableIndices: string[] = ['S&P 500', 'NASDAQ Comp.', 'Dow Jones IA', 'FTSE 100', 'Nikkei 225'];\n\nconst mockIndexData: IndexDataPoint[] = [\n  { time: 'Jan', 'S&P 500': 4800, 'NASDAQ Comp.': 15000, 'Dow Jones IA': 37000 },\n  { time: 'Feb', 'S&P 500': 4950, 'NASDAQ Comp.': 15500, 'Dow Jones IA': 37500 },\n  { time: 'Mar', 'S&P 500': 5100, 'NASDAQ Comp.': 15800, 'Dow Jones IA': 38000 },\n  { time: 'Apr', 'S&P 500': 5050, 'NASDAQ Comp.': 15600, 'Dow Jones IA': 37800 },\n  { time: 'May', 'S&P 500': 5200, 'NASDAQ Comp.': 16000, 'Dow Jones IA': 38500 },\n  { time: 'Jun', 'S&P 500': 5250, 'NASDAQ Comp.': 16200, 'Dow Jones IA': 38800 },\n];\n\nconst mockSectorPerformanceData: SectorPerformance[] = [\n    { name: 'Technology', change: 1.95, volume: 180000000 },\n    { name: 'Healthcare', change: -0.6, volume: 115000000 },\n    { name: 'Financials', change: 0.3, volume: 130000000 },\n    { name: 'Energy', change: 2.8, volume: 105000000 },\n    { name: 'Consumer Disc.', change: -2.1, volume: 75000000 },\n    { name: 'Industrials', change: 0.85, volume: 85000000 },\n    { name: 'Utilities', change: -0.2, volume: 50000000 },\n    { name: 'Real Estate', change: 1.2, volume: 65000000 },\n    { name: 'Materials', change: 0.5, volume: 70000000 },\n];\n\nconst mockMarketStats: MarketStats = {\n  advancing: 2150,\n  declining: 1050,\n  unchanged: 380,\n  sentiment: 'Neutral',\n  marketHigh: 5260.75,\n  marketLow: 5225.10,\n};\n\nconst mockSectorMoversData: SectorMover[] = [\n  { id: 'energy', name: 'Energy', change: 2.8, volume: 105000000 },\n  { id: 'tech', name: 'Technology', change: 1.95, volume: 180000000 },\n  { id: 'realestate', name: 'Real Estate', change: 1.2, volume: 65000000 },\n  { id: 'industrials', name: 'Industrials', change: 0.85, volume: 85000000 },\n  { id: 'materials', name: 'Materials', change: 0.5, volume: 70000000 },\n  { id: 'financials', name: 'Financials', change: 0.3, volume: 130000000 },\n  { id: 'utils', name: 'Utilities', change: -0.2, volume: 50000000 },\n  { id: 'healthcare', name: 'Healthcare', change: -0.6, volume: 115000000 },\n  { id: 'consumer', name: 'Consumer Disc.', change: -2.1, volume: 75000000 },\n];\n\nconst mockGainersData: MoverData[] = [\n  { name: 'GainerCorp', change: 6.1 },\n  { name: 'UpStock Inc', change: 5.8 },\n  { name: 'Profit Ltd', change: 5.3 },\n  { name: 'Advance Co', change: 4.9 },\n  { name: 'Bullish Ent', change: 4.5 },\n];\n\nconst mockLosersData: MoverData[] = [\n  { name: 'Decline Plc', change: -5.5 },\n  { name: 'DownTrend Sys', change: -4.9 },\n  { name: 'LossMaking', change: -4.3 },\n  { name: 'Bearish Ltd', change: -4.0 },\n  { name: 'Shrink Co', change: -3.7 },\n];\n\nconst mockNewsItems: NewsItem[] = [\n  {\n    id: 'n1',\n    headline: 'Global Markets React to Latest Inflation Data',\n    summary: 'Markets worldwide showed mixed reactions as new inflation figures were released, raising questions about future central bank policies.',\n    publishTime: new Date(Date.now() - 2 * 60 * 60 * 1000), // 2 hours ago\n    source: 'Global Finance News',\n    url: '#',\n  },\n  {\n    id: 'n2',\n    headline: 'Energy Sector Surges on Supply Concerns',\n    summary: 'Ongoing geopolitical tensions and supply chain disruptions have led to a significant rally in energy stocks globally.',\n    publishTime: new Date(Date.now() - 4 * 60 * 60 * 1000), // 4 hours ago\n    source: 'Oil & Gas Monitor',\n    url: '#',\n  },\n  {\n    id: 'n3',\n    headline: 'Economic Forum Discusses Impact of AI on Productivity',\n    summary: 'Leaders at the World Economic Forum debated the potential boosts and challenges artificial intelligence presents to global productivity and labor markets.',\n    publishTime: new Date(Date.now() - 8 * 60 * 60 * 1000), // 8 hours ago\n    source: 'Economic Times',\n    url: '#',\n  },\n  {\n    id: 'n4',\n    headline: 'Central Bank Watch: Rate Hike Expectations Shift',\n    summary: 'Analysts are revising their forecasts for future interest rate hikes following recent comments from central bank officials and evolving economic indicators.',\n    publishTime: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000), // 1 day ago\n    source: 'Financial Analysts Hub',\n    url: '#',\n  },\n];\n\n// --- Page Component --- \n\nconst MarketOverviewPage: React.FC = () => {\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n\n  const toggleSidebar = () => {\n    setIsSidebarOpen(!isSidebarOpen);\n  };\n\n  const closeSidebar = () => {\n    setIsSidebarOpen(false);\n  };\n\n  // Dummy handler for filter changes - replace with actual logic\n  const handleFilterChange = (filters: any) => {\n    console.log('Market filters changed:', filters);\n    // In a real app, trigger data refetching/updating based on these filters\n  };\n\n  return (\n    <div className=\"flex flex-col min-h-screen bg-background\">\n      <Header toggleSidebar={toggleSidebar} hasCollapsibleSidebar={true} />\n      <div className=\"flex flex-1\">\n        <Sidebar isOpen={isSidebarOpen} onClose={closeSidebar} />\n        <main className=\"flex-1 p-4 md:p-6 lg:p-8 overflow-y-auto\">\n          <div className=\"space-y-6\">\n            {/* Component 1: Filter Group */}\n            <MarketFilterGroup options={mockFilterOptions} onFilterChange={handleFilterChange} />\n\n            {/* Component 2: Line Chart */}\n            <MarketIndexChart data={mockIndexData} availableIndices={mockAvailableIndices} />\n\n            {/* Component 3: Heat Map */}\n            <SectorHeatMap sectors={mockSectorPerformanceData} />\n\n            {/* Component 4: Stat Card Group */}\n            <MarketStatCards stats={mockMarketStats} />\n\n            {/* Component 5: Table */}\n            <SectorMoversTable movers={mockSectorMoversData} title=\"Top Sector Movers (Filtered)\" />\n\n            {/* Component 6: Bar Chart */}\n            <MarketGainersLosersChart gainers={mockGainersData} losers={mockLosersData} />\n\n            {/* Component 7: News Panel */}\n            <MarketNewsPanel newsItems={mockNewsItems} title=\"Market Headlines & Economic Updates\" />\n\n            {/* Component 8: Navigation Links */}\n            <MarketNavigationLinks dashboardPath=\"/dashboard\" sectorAnalysisPath=\"/sectors\" /> {/* Assuming a general /sectors route */} \n          </div>\n        </main>\n      </div>\n      <Footer />\n    </div>\n  );\n};\n\nexport default MarketOverviewPage;\n"
    },
    {
        "fileName": "src/App.tsx",
        "content": "\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { Toaster as Sonner } from \"@/components/ui/sonner\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\n\n\nimport LoginPage from \"./pages/LoginPage\";\nimport MainTradingDashboardPage from \"./pages/MainTradingDashboardPage\";\nimport MarketOverviewPage from \"./pages/MarketOverviewPage\";\nimport StockDetailPage from \"./pages/StockDetailPage\";\nimport UserProfilePage from \"./pages/UserProfilePage\";\nimport NotFound from \"./pages/NotFound\";\n\nconst queryClient = new QueryClient();\n\n\nconst App = () => (\n<QueryClientProvider client={queryClient}>\n    <TooltipProvider>\n    <Toaster />\n    <Sonner />\n    <BrowserRouter>\n        <Routes>\n\n\n          <Route path=\"/login\" element={<LoginPage />} />\n          <Route path=\"/dashboard\" element={<MainTradingDashboardPage />} />\n          <Route path=\"/stock/:ticker\" element={<StockDetailPage />} />\n          <Route path=\"/profile\" element={<UserProfilePage />} />\n          <Route path=\"/market-overview\" element={<MarketOverviewPage />} />\n          {/* catch-all */}\n          <Route path=\"*\" element={<NotFound />} />\n\n\n        </Routes>\n    </BrowserRouter>\n    </TooltipProvider>\n</QueryClientProvider>\n);\n\nexport default App;\n"
    }
]